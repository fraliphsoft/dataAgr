  {
    "name": "nodejs fs",
    "source": "https://nodejs.org/api/fs.json",
    "methods": [
      {
        "class": "FileHandle",
        "name": "appendFile",
        "signature": "filehandle.appendFile(data, options)",
        "desc": "<p>Asynchronously append data to this file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. The <code>Promise</code> will be\nresolved with no arguments upon success.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>FileHandle</code> must have been opened for appending.</p>\n",
        "parameters": [
          {
            "name": "data",
            "type": "string|Buffer",
            "desc": "`data` {string|Buffer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": false,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'a'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "chmod",
        "signature": "filehandle.chmod(mode)",
        "desc": "<p>Modifies the permissions on the file. The <code>Promise</code> is resolved with no\narguments upon success.</p>\n",
        "parameters": [
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "chown",
        "signature": "filehandle.chown(uid, gid)",
        "desc": "<p>Changes the ownership of the file then resolves the <code>Promise</code> with no arguments\nupon success.</p>\n",
        "parameters": [
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "close",
        "signature": "filehandle.close()",
        "desc": "<p>Closes the file descriptor.</p>\n<pre><code class=\"lang-js\">const fsPromises = require(&#39;fs&#39;).promises;\nasync function openAndClose() {\n  let filehandle;\n  try {\n    filehandle = await fsPromises.open(&#39;thefile.txt&#39;, &#39;r&#39;);\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n</code></pre>\n",
        "parameters": [],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} A `Promise` that will be resolved once the underlying file descriptor is closed, or will be rejected if an error occurs while closing. "
        }
      },
      {
        "class": "FileHandle",
        "name": "datasync",
        "signature": "filehandle.datasync()",
        "desc": "<p>Asynchronous fdatasync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n",
        "parameters": [],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "read",
        "signature": "filehandle.read(buffer, offset, length, position)",
        "desc": "<p>Read data from the file.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>Following successful read, the <code>Promise</code> is resolved with an object with a\n<code>bytesRead</code> property specifying the number of bytes read, and a <code>buffer</code>\nproperty that is a reference to the passed in <code>buffer</code> argument.</p>\n",
        "parameters": [
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "readFile",
        "signature": "filehandle.readFile(options)",
        "desc": "<p>Asynchronously reads the entire contents of a file.</p>\n<p>The <code>Promise</code> is resolved with the contents of the file. If no encoding is\nspecified (using <code>options.encoding</code>), the data is returned as a <code>Buffer</code>\nobject. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory&#39;s contents will be\nreturned.</p>\n<p>The <code>FileHandle</code> has to support reading.</p>\n",
        "parameters": [
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": false,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`null`",
                "desc": "`encoding` {string|null} **Default:** `null` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'r'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "stat",
        "signature": "filehandle.stat()",
        "desc": "<p>Retrieves the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> for the file.</p>\n",
        "parameters": [],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "sync",
        "signature": "filehandle.sync()",
        "desc": "<p>Asynchronous fsync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n",
        "parameters": [],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "truncate",
        "signature": "filehandle.truncate(len)",
        "desc": "<p>Truncates the file then resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>If the file was larger than <code>len</code> bytes, only the first <code>len</code> bytes will be\nretained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\n\nconsole.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 4);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints: Node\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\n\nconsole.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 10);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints Node.js\\0\\0\\0\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n",
        "parameters": [
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "utimes",
        "signature": "filehandle.utimes(atime, mtime)",
        "desc": "<p>Change the file system timestamps of the object referenced by the <code>FileHandle</code>\nthen resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>This function does not work on AIX versions before 7.1, it will resolve the\n<code>Promise</code> with an error using code <code>UV_ENOSYS</code>.</p>\n",
        "parameters": [
          {
            "name": "atime",
            "type": "number|string|Date",
            "desc": "`atime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "number|string|Date",
            "desc": "`mtime` {number|string|Date} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "write",
        "signature": "filehandle.write(buffer, offset, length, position)",
        "desc": "<p>Write <code>buffer</code> to the file.</p>\n<p>The <code>Promise</code> is resolved with an object containing a <code>bytesWritten</code> property\nidentifying the number of bytes written, and a <code>buffer</code> property containing\na reference to the <code>buffer</code> written.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>It is unsafe to use <code>filehandle.write()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected). For this\nscenario, <code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n",
        "parameters": [
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "FileHandle",
        "name": "writeFile",
        "signature": "filehandle.writeFile(data, options)",
        "desc": "<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer. The <code>Promise</code> will be resolved with no\narguments upon success.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>filehandle.writeFile()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected).</p>\n",
        "parameters": [
          {
            "name": "data",
            "type": "string|Buffer|Uint8Array",
            "desc": "`data` {string|Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": false,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'w'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "access",
        "signature": "fsPromises.access(path[, mode])",
        "desc": "<p>Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. Check <a href=\"#fs_file_access_constants\">File Access Constants</a> for possible values\nof <code>mode</code>. It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<p>If the accessibility check is successful, the <code>Promise</code> is resolved with no\nvalue. If any of the accessibility checks fail, the <code>Promise</code> is rejected\nwith an <code>Error</code> object. The following example checks if the file\n<code>/etc/passwd</code> can be read and written by the current process.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\n\nfsPromises.access(&#39;/etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK)\n  .then(() =&gt; console.log(&#39;can access&#39;))\n  .catch(() =&gt; console.error(&#39;cannot access&#39;));\n</code></pre>\n<p>Using <code>fsPromises.access()</code> to check for the accessibility of a file before\ncalling <code>fsPromises.open()</code> is not recommended. Doing so introduces a race\ncondition, since other processes may change the file&#39;s state between the two\ncalls. Instead, user code should open/read/write the file directly and handle\nthe error raised if the file is not accessible.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `fs.constants.F_OK` ",
            "default": "`fs.constants.F_OK`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "appendFile",
        "signature": "fsPromises.appendFile(path, data[, options])",
        "desc": "<p>Asynchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. The <code>Promise</code> will be\nresolved with no arguments upon success.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>path</code> may be specified as a <code>FileHandle</code> that has been opened\nfor appending (using <code>fsPromises.open()</code>).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL|FileHandle",
            "desc": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` ",
            "optional": false,
            "options": []
          },
          {
            "name": "data",
            "type": "string|Buffer",
            "desc": "`data` {string|Buffer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'a'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "chmod",
        "signature": "fsPromises.chmod(path, mode)",
        "desc": "<p>Changes the permissions of a file then resolves the <code>Promise</code> with no\narguments upon succces.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "chown",
        "signature": "fsPromises.chown(path, uid, gid)",
        "desc": "<p>Changes the ownership of a file then resolves the <code>Promise</code> with no arguments\nupon success.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "copyFile",
        "signature": "fsPromises.copyFile(src, dest[, flags])",
        "desc": "<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. The <code>Promise</code> will be resolved with no arguments upon success.</p>\n<p>Node.js makes no guarantees about the atomicity of the copy operation. If an\nerror occurs after the destination file has been opened for writing, Node.js\nwill attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fsPromises = require(&#39;fs&#39;).promises;\n\n// destination.txt will be created or overwritten by default.\nfsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;)\n  .then(() =&gt; console.log(&#39;source.txt was copied to destination.txt&#39;))\n  .catch(() =&gt; console.log(&#39;The file could not be copied&#39;));\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL)\n  .then(() =&gt; console.log(&#39;source.txt was copied to destination.txt&#39;))\n  .catch(() =&gt; console.log(&#39;The file could not be copied&#39;));\n</code></pre>\n",
        "parameters": [
          {
            "name": "src",
            "type": "string|Buffer|URL",
            "desc": "`src` {string|Buffer|URL} source filename to copy ",
            "optional": false,
            "options": []
          },
          {
            "name": "dest",
            "type": "string|Buffer|URL",
            "desc": "`dest` {string|Buffer|URL} destination filename of the copy operation ",
            "optional": false,
            "options": []
          },
          {
            "name": "flags",
            "type": "number",
            "desc": "`flags` {number} modifiers for copy operation. **Default:** `0`. ",
            "default": "`0`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "fchmod",
        "signature": "fsPromises.fchmod(filehandle, mode)",
        "desc": "<p>Asynchronous fchmod(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "fchown",
        "signature": "fsPromises.fchown(filehandle, uid, gid)",
        "desc": "<p>Changes the ownership of the file represented by <code>filehandle</code> then resolves\nthe <code>Promise</code> with no arguments upon success.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "fdatasync",
        "signature": "fsPromises.fdatasync(filehandle)",
        "desc": "<p>Asynchronous fdatasync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "fstat",
        "signature": "fsPromises.fstat(filehandle)",
        "desc": "<p>Retrieves the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> for the given <code>filehandle</code>.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "fsync",
        "signature": "fsPromises.fsync(filehandle)",
        "desc": "<p>Asynchronous fsync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "ftruncate",
        "signature": "fsPromises.ftruncate(filehandle[, len])",
        "desc": "<p>Truncates the file represented by <code>filehandle</code> then resolves the <code>Promise</code>\nwith no arguments upon success.</p>\n<p>If the file referred to by the <code>FileHandle</code> was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 4);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints: Node\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 10);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints Node.js\\0\\0\\0\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          },
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "futimes",
        "signature": "fsPromises.futimes(filehandle, atime, mtime)",
        "desc": "<p>Change the file system timestamps of the object referenced by the supplied\n<code>FileHandle</code> then resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>This function does not work on AIX versions before 7.1, it will resolve the\n<code>Promise</code> with an error using code <code>UV_ENOSYS</code>.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          },
          {
            "name": "atime",
            "type": "number|string|Date",
            "desc": "`atime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "number|string|Date",
            "desc": "`mtime` {number|string|Date} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "lchmod",
        "signature": "fsPromises.lchmod(path, mode)",
        "desc": "<p>Changes the permissions on a symbolic link then resolves the <code>Promise</code> with\nno arguments upon success. This method is only implemented on macOS.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "lchown",
        "signature": "fsPromises.lchown(path, uid, gid)",
        "desc": "<p>Changes the ownership on a symbolic link then resolves the <code>Promise</code> with\nno arguments upon success. This method is only implemented on macOS.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "link",
        "signature": "fsPromises.link(existingPath, newPath)",
        "desc": "<p>Asynchronous link(2). The <code>Promise</code> is resolved with no arguments upon success.</p>\n",
        "parameters": [
          {
            "name": "existingPath",
            "type": "string|Buffer|URL",
            "desc": "`existingPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "newPath",
            "type": "string|Buffer|URL",
            "desc": "`newPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "lstat",
        "signature": "fsPromises.lstat(path)",
        "desc": "<p>Asynchronous lstat(2). The <code>Promise</code> is resolved with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object\nfor the given symbolic link <code>path</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "mkdir",
        "signature": "fsPromises.mkdir(path[, mode])",
        "desc": "<p>Asynchronously creates a directory then resolves the <code>Promise</code> with no\narguments upon success.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `0o777` ",
            "default": "`0o777`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "mkdtemp",
        "signature": "fsPromises.mkdtemp(prefix[, options])",
        "desc": "<p>Creates a unique temporary directory and resolves the <code>Promise</code> with the created\nfolder path. A unique directory name is generated by appending six random\ncharacters to the end of the provided <code>prefix</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n<pre><code class=\"lang-js\">fsPromises.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;))\n  .catch(console.error);\n</code></pre>\n<p>The <code>fsPromises.mkdtemp()</code> method will append the six randomly selected\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>, the\n<code>prefix</code> must end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n",
        "parameters": [
          {
            "name": "prefix",
            "type": "string",
            "desc": "`prefix` {string} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "open",
        "signature": "fsPromises.open(path, flags[, mode])",
        "desc": "<p>Asynchronous file open that returns a <code>Promise</code> that, when resolved, yields a\n<code>FileHandle</code> object. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated.</p>\n<p>Some characters (<code>&lt; &gt; : &quot; / \\ | ? *</code>) are reserved under Windows as documented\nby <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx\">this MSDN page</a>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "flags",
            "type": "string|number",
            "desc": "`flags` {string|number} See [support of file system `flags`][]. ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `0o666` (readable and writable) ",
            "default": "`0o666` (readable and writable)",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "read",
        "signature": "fsPromises.read(filehandle, buffer, offset, length, position)",
        "desc": "<p>Read data from the file specified by <code>filehandle</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>Following successful read, the <code>Promise</code> is resolved with an object with a\n<code>bytesRead</code> property specifying the number of bytes read, and a <code>buffer</code>\nproperty that is a reference to the passed in <code>buffer</code> argument.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          },
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "readdir",
        "signature": "fsPromises.readdir(path[, options])",
        "desc": "<p>Reads the contents of a directory then resolves the <code>Promise</code> with an array\nof the names of the files in the directory excludiing <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the filenames returned\nwill be passed as <code>Buffer</code> objects.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "readFile",
        "signature": "fsPromises.readFile(path[, options])",
        "desc": "<p>Asynchronously reads the entire contents of a file.</p>\n<p>The <code>Promise</code> is resolved with the contents of the file. If no encoding is\nspecified (using <code>options.encoding</code>), the data is returned as a <code>Buffer</code>\nobject. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory&#39;s contents will be\nreturned.</p>\n<p>Any specified <code>FileHandle</code> has to support reading.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL|FileHandle",
            "desc": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`null`",
                "desc": "`encoding` {string|null} **Default:** `null` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'r'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "readlink",
        "signature": "fsPromises.readlink(path[, options])",
        "desc": "<p>Asynchronous readlink(2). The <code>Promise</code> is resolved with the <code>linkString</code> upon\nsuccess.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path returned. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the link path\nreturned will be passed as a <code>Buffer</code> object.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "realpath",
        "signature": "fsPromises.realpath(path[, options])",
        "desc": "<p>Determines the actual location of <code>path</code> using the same semantics as the\n<code>fs.realpath.native()</code> function then resolves the <code>Promise</code> with the resolved\npath.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned will be\npassed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "rename",
        "signature": "fsPromises.rename(oldPath, newPath)",
        "desc": "<p>Renames <code>oldPath</code> to <code>newPath</code> and resolves the <code>Promise</code> with no arguments\nupon success.</p>\n",
        "parameters": [
          {
            "name": "oldPath",
            "type": "string|Buffer|URL",
            "desc": "`oldPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "newPath",
            "type": "string|Buffer|URL",
            "desc": "`newPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "rmdir",
        "signature": "fsPromises.rmdir(path)",
        "desc": "<p>Removes the directory identified by <code>path</code> then resolves the <code>Promise</code> with\nno arguments upon success.</p>\n<p>Using <code>fsPromises.rmdir()</code> on a file (not a directory) results in the\n<code>Promise</code> being rejected with an <code>ENOENT</code> error on Windows and an <code>ENOTDIR</code>\nerror on POSIX.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "stat",
        "signature": "fsPromises.stat(path)",
        "desc": "<p>The <code>Promise</code> is resolved with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object for the given <code>path</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "symlink",
        "signature": "fsPromises.symlink(target, path[, type])",
        "desc": "<p>Creates a symbolic link then resolves the <code>Promise</code> with no arguments upon\nsuccess.</p>\n<p>The <code>type</code> argument is only used on Windows platforms and can be one of <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code>. Note that Windows junction\npoints require the destination path to be absolute. When using <code>&#39;junction&#39;</code>,\nthe <code>target</code> argument will automatically be normalized to absolute path.</p>\n",
        "parameters": [
          {
            "name": "target",
            "type": "string|Buffer|URL",
            "desc": "`target` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "type",
            "type": "string",
            "desc": "`type` {string} **Default:** `'file'` ",
            "default": "`'file'`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "truncate",
        "signature": "fsPromises.truncate(path[, len])",
        "desc": "<p>Truncates the <code>path</code> then resolves the <code>Promise</code> with no arguments upon\nsuccess. The <code>path</code> <em>must</em> be a string or <code>Buffer</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "unlink",
        "signature": "fsPromises.unlink(path)",
        "desc": "<p>Asynchronous unlink(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "utimes",
        "signature": "fsPromises.utimes(path, atime, mtime)",
        "desc": "<p>Change the file system timestamps of the object referenced by <code>path</code> then\nresolves the <code>Promise</code> with no arguments upon success.</p>\n<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>\n<ul>\n<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a\nnumeric string like <code>&#39;123456789.0&#39;</code>.</li>\n<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code> or\n<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>\n</ul>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "atime",
            "type": "number|string|Date",
            "desc": "`atime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "number|string|Date",
            "desc": "`mtime` {number|string|Date} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "write",
        "signature": "fsPromises.write(filehandle, buffer[, offset[, length[, position]]])",
        "desc": "<p>Write <code>buffer</code> to the file specified by <code>filehandle</code>.</p>\n<p>The <code>Promise</code> is resolved with an object containing a <code>bytesWritten</code> property\nidentifying the number of bytes written, and a <code>buffer</code> property containing\na reference to the <code>buffer</code> written.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>It is unsafe to use <code>fsPromises.write()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected). For this\nscenario, <code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n",
        "parameters": [
          {
            "name": "filehandle",
            "type": "FileHandle",
            "desc": "`filehandle` {FileHandle} ",
            "optional": false,
            "options": []
          },
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs_promises_api",
        "name": "writeFile",
        "signature": "fsPromises.writeFile(file, data[, options])",
        "desc": "<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer. The <code>Promise</code> will be resolved with no\narguments upon success.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>Any specified <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>fsPromises.writeFile()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected).</p>\n",
        "parameters": [
          {
            "name": "file",
            "type": "string|Buffer|URL|FileHandle",
            "desc": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` ",
            "optional": false,
            "options": []
          },
          {
            "name": "data",
            "type": "string|Buffer|Uint8Array",
            "desc": "`data` {string|Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'w'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "Promise",
          "desc": "Returns: {Promise} "
        }
      },
      {
        "class": "fs.FSWatcher",
        "name": "close",
        "signature": "watcher.close()",
        "desc": "<p>Stop watching for changes on the given <code>fs.FSWatcher</code>. Once stopped, the\n<code>fs.FSWatcher</code> object is no longer usable.</p>\n",
        "parameters": [],
        "return": null
      },
      {
        "class": "fs.Stats",
        "name": "isBlockDevice",
        "signature": "stats.isBlockDevice()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a block device.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs.Stats",
        "name": "isCharacterDevice",
        "signature": "stats.isCharacterDevice()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a character device.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs.Stats",
        "name": "isDirectory",
        "signature": "stats.isDirectory()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a file system directory.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs.Stats",
        "name": "isFIFO",
        "signature": "stats.isFIFO()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a first-in-first-out (FIFO)\npipe.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs.Stats",
        "name": "isFile",
        "signature": "stats.isFile()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a regular file.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs.Stats",
        "name": "isSocket",
        "signature": "stats.isSocket()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a socket.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs.Stats",
        "name": "isSymbolicLink",
        "signature": "stats.isSymbolicLink()",
        "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a symbolic link.</p>\n<p>This method is only valid when using <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a>.</p>\n",
        "parameters": [],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs",
        "name": "access",
        "signature": "fs.access(path[, mode], callback)",
        "desc": "<p>Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. Check <a href=\"#fs_file_access_constants\">File Access Constants</a> for possible values\nof <code>mode</code>. It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<p>The final argument, <code>callback</code>, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be an <code>Error</code> object. The following examples check if\n<code>package.json</code> exists, and if it is readable or writable.</p>\n<pre><code class=\"lang-js\">const file = &#39;package.json&#39;;\n\n// Check if the file exists in the current directory.\nfs.access(file, fs.constants.F_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;does not exist&#39; : &#39;exists&#39;}`);\n});\n\n// Check if the file is readable.\nfs.access(file, fs.constants.R_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;is not readable&#39; : &#39;is readable&#39;}`);\n});\n\n// Check if the file is writable.\nfs.access(file, fs.constants.W_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;is not writable&#39; : &#39;is writable&#39;}`);\n});\n\n// Check if the file exists in the current directory, and if it is writable.\nfs.access(file, fs.constants.F_OK | fs.constants.W_OK, (err) =&gt; {\n  if (err) {\n    console.error(\n      `${file} ${err.code === &#39;ENOENT&#39; ? &#39;does not exist&#39; : &#39;is read-only&#39;}`);\n  } else {\n    console.log(`${file} exists, and it is writable`);\n  }\n});\n</code></pre>\n<p>Using <code>fs.access()</code> to check for the accessibility of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible.</p>\n<p><strong>write (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (!err) {\n    console.error(&#39;myfile already exists&#39;);\n    return;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n</code></pre>\n<p><strong>write (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;EEXIST&#39;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<p><strong>read (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n</code></pre>\n<p><strong>read (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</code></pre>\n<p>The &quot;not recommended&quot; examples above check for accessibility and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.</p>\n<p>In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `fs.constants.F_OK` ",
            "default": "`fs.constants.F_OK`",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "accessSync",
        "signature": "fs.accessSync(path[, mode])",
        "desc": "<p>Synchronously tests a user&#39;s permissions for the file or directory specified\nby <code>path</code>. The <code>mode</code> argument is an optional integer that specifies the\naccessibility checks to be performed. Check <a href=\"#fs_file_access_constants\">File Access Constants</a> for\npossible values of <code>mode</code>. It is possible to create a mask consisting of\nthe bitwise OR of two or more values\n(e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<p>If any of the accessibility checks fail, an <code>Error</code> will be thrown. Otherwise,\nthe method will return <code>undefined</code>.</p>\n<pre><code class=\"lang-js\">try {\n  fs.accessSync(&#39;etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK);\n  console.log(&#39;can read/write&#39;);\n} catch (err) {\n  console.error(&#39;no access!&#39;);\n}\n</code></pre>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `fs.constants.F_OK` ",
            "default": "`fs.constants.F_OK`",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "appendFile",
        "signature": "fs.appendFile(path, data[, options], callback)",
        "desc": "<p>Asynchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened\nfor appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will\nnot be closed automatically.</p>\n<pre><code class=\"lang-js\">fs.open(&#39;message.txt&#39;, &#39;a&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.appendFile(fd, &#39;data to append&#39;, &#39;utf8&#39;, (err) =&gt; {\n    fs.close(fd, (err) =&gt; {\n      if (err) throw err;\n    });\n    if (err) throw err;\n  });\n});\n</code></pre>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL|number",
            "desc": "`path` {string|Buffer|URL|number} filename or file descriptor ",
            "optional": false,
            "options": []
          },
          {
            "name": "data",
            "type": "string|Buffer",
            "desc": "`data` {string|Buffer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'a'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "appendFileSync",
        "signature": "fs.appendFileSync(path, data[, options])",
        "desc": "<p>Synchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">try {\n  fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;);\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n} catch (err) {\n  /* Handle the error */\n}\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;);\n</code></pre>\n<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened\nfor appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will\nnot be closed automatically.</p>\n<pre><code class=\"lang-js\">let fd;\n\ntry {\n  fd = fs.openSync(&#39;message.txt&#39;, &#39;a&#39;);\n  fs.appendFileSync(fd, &#39;data to append&#39;, &#39;utf8&#39;);\n} catch (err) {\n  /* Handle the error */\n} finally {\n  if (fd !== undefined)\n    fs.closeSync(fd);\n}\n</code></pre>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL|number",
            "desc": "`path` {string|Buffer|URL|number} filename or file descriptor ",
            "optional": false,
            "options": []
          },
          {
            "name": "data",
            "type": "string|Buffer",
            "desc": "`data` {string|Buffer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'a'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "chmod",
        "signature": "fs.chmod(path, mode, callback)",
        "desc": "<p>Asynchronously changes the permissions of a file. No arguments other than a\npossible exception are given to the completion callback.</p>\n<p>See also: chmod(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "chmodSync",
        "signature": "fs.chmodSync(path, mode)",
        "desc": "<p>Synchronously changes the permissions of a file. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_chmod_path_mode_callback\"><code>fs.chmod()</code></a>.</p>\n<p>See also: chmod(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "chown",
        "signature": "fs.chown(path, uid, gid, callback)",
        "desc": "<p>Asynchronously changes owner and group of a file. No arguments other than a\npossible exception are given to the completion callback.</p>\n<p>See also: chown(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "chownSync",
        "signature": "fs.chownSync(path, uid, gid)",
        "desc": "<p>Synchronously changes owner and group of a file. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_chown_path_uid_gid_callback\"><code>fs.chown()</code></a>.</p>\n<p>See also: chown(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "close",
        "signature": "fs.close(fd, callback)",
        "desc": "<p>Asynchronous close(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "closeSync",
        "signature": "fs.closeSync(fd)",
        "desc": "<p>Synchronous close(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "copyFile",
        "signature": "fs.copyFile(src, dest[, flags], callback)",
        "desc": "<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. No arguments other than a possible exception are given to the\ncallback function. Node.js makes no guarantees about the atomicity of the copy\noperation. If an error occurs after the destination file has been opened for\nwriting, Node.js will attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;source.txt was copied to destination.txt&#39;);\n});\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL, callback);\n</code></pre>\n",
        "parameters": [
          {
            "name": "src",
            "type": "string|Buffer|URL",
            "desc": "`src` {string|Buffer|URL} source filename to copy ",
            "optional": false,
            "options": []
          },
          {
            "name": "dest",
            "type": "string|Buffer|URL",
            "desc": "`dest` {string|Buffer|URL} destination filename of the copy operation ",
            "optional": false,
            "options": []
          },
          {
            "name": "flags",
            "type": "number",
            "desc": "`flags` {number} modifiers for copy operation. **Default:** `0`. ",
            "default": "`0`",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "copyFileSync",
        "signature": "fs.copyFileSync(src, dest[, flags])",
        "desc": "<p>Synchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. Returns <code>undefined</code>. Node.js makes no guarantees about the\natomicity of the copy operation. If an error occurs after the destination file\nhas been opened for writing, Node.js will attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;);\nconsole.log(&#39;source.txt was copied to destination.txt&#39;);\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL);\n</code></pre>\n",
        "parameters": [
          {
            "name": "src",
            "type": "string|Buffer|URL",
            "desc": "`src` {string|Buffer|URL} source filename to copy ",
            "optional": false,
            "options": []
          },
          {
            "name": "dest",
            "type": "string|Buffer|URL",
            "desc": "`dest` {string|Buffer|URL} destination filename of the copy operation ",
            "optional": false,
            "options": []
          },
          {
            "name": "flags",
            "type": "number",
            "desc": "`flags` {number} modifiers for copy operation. **Default:** `0`. ",
            "default": "`0`",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "createReadStream",
        "signature": "fs.createReadStream(path[, options])",
        "desc": "<p>Unlike the 16 kb default <code>highWaterMark</code> for a readable stream, the stream\nreturned by this method has a default <code>highWaterMark</code> of 64 kb.</p>\n<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from\nthe file instead of the entire file. Both <code>start</code> and <code>end</code> are inclusive and\nstart counting at 0. If <code>fd</code> is specified and <code>start</code> is omitted or <code>undefined</code>,\n<code>fs.createReadStream()</code> reads sequentially from the current file position.\nThe <code>encoding</code> can be any one of those accepted by <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use\nthe specified file descriptor. This means that no <code>&#39;open&#39;</code> event will be\nemitted. Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed\nto <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>autoClose</code> is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error. It is the application&#39;s responsibility to close it and make\nsure there&#39;s no file descriptor leak. If <code>autoClose</code> is set to true (default\nbehavior), on <code>&#39;error&#39;</code> or <code>&#39;end&#39;</code> the file descriptor will be closed\nautomatically.</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the\nfile was created.</p>\n<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>\n<pre><code class=\"lang-js\">fs.createReadStream(&#39;sample.txt&#39;, { start: 90, end: 99 });\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "flags",
                "type": "string",
                "default": "`'r'`",
                "desc": "`flags` {string} See [support of file system `flags`][]. **Default:** `'r'`. "
              },
              {
                "name": "encoding",
                "type": "string",
                "default": "`null`",
                "desc": "`encoding` {string} **Default:** `null` "
              },
              {
                "name": "fd",
                "type": "integer",
                "default": "`null`",
                "desc": "`fd` {integer} **Default:** `null` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "autoClose",
                "type": "boolean",
                "default": "`true`",
                "desc": "`autoClose` {boolean} **Default:** `true` "
              },
              {
                "name": "start",
                "type": "integer",
                "desc": "`start` {integer} "
              },
              {
                "name": "end",
                "type": "integer",
                "default": "`Infinity`",
                "desc": "`end` {integer} **Default:** `Infinity` "
              },
              {
                "name": "highWaterMark",
                "type": "integer",
                "default": "`64 * 1024`",
                "desc": "`highWaterMark` {integer} **Default:** `64 * 1024` "
              }
            ]
          }
        ],
        "return": {
          "type": "fs.ReadStream",
          "desc": "Returns: {fs.ReadStream} See [Readable Streams][]. "
        }
      },
      {
        "class": "fs",
        "name": "createWriteStream",
        "signature": "fs.createWriteStream(path[, options])",
        "desc": "<p><code>options</code> may also include a <code>start</code> option to allow writing data at\nsome position past the beginning of the file. Modifying a file rather\nthan replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the\ndefault mode <code>w</code>. The <code>encoding</code> can be any one of those accepted by\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>autoClose</code> is set to true (default behavior) on <code>&#39;error&#39;</code> or <code>&#39;finish&#39;</code>\nthe file descriptor will be closed automatically. If <code>autoClose</code> is false,\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\nIt is the application&#39;s responsibility to close it and make sure there&#39;s no\nfile descriptor leak.</p>\n<p>Like <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a>, if <code>fd</code> is specified, <a href=\"#fs_class_fs_writestream\"><code>WriteStream</code></a> will ignore the\n<code>path</code> argument and will use the specified file descriptor. This means that no\n<code>&#39;open&#39;</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking\n<code>fd</code>s should be passed to <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "flags",
                "type": "string",
                "default": "`'w'`",
                "desc": "`flags` {string} See [support of file system `flags`][]. **Default:** `'w'`. "
              },
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              },
              {
                "name": "fd",
                "type": "integer",
                "default": "`null`",
                "desc": "`fd` {integer} **Default:** `null` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "autoClose",
                "type": "boolean",
                "default": "`true`",
                "desc": "`autoClose` {boolean} **Default:** `true` "
              },
              {
                "name": "start",
                "type": "integer",
                "desc": "`start` {integer} "
              }
            ]
          }
        ],
        "return": {
          "type": "fs.WriteStream",
          "desc": "Returns: {fs.WriteStream} See [Writable Stream][]. "
        }
      },
      {
        "class": "fs",
        "name": "exists",
        "signature": "fs.exists(path, callback)",
        "desc": "<p>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false. Example:</p>\n<pre><code class=\"lang-js\">fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\n  console.log(exists ? &#39;it\\&#39;s there&#39; : &#39;no passwd!&#39;);\n});\n</code></pre>\n<p><strong>Note that the parameter to this callback is not consistent with other\nNode.js callbacks.</strong> Normally, the first parameter to a Node.js callback is\nan <code>err</code> parameter, optionally followed by other parameters. The\n<code>fs.exists()</code> callback has only one boolean parameter. This is one reason\n<code>fs.access()</code> is recommended instead of <code>fs.exists()</code>.</p>\n<p>Using <code>fs.exists()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist.</p>\n<p><strong>write (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    console.error(&#39;myfile already exists&#39;);\n  } else {\n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n</code></pre>\n<p><strong>write (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;EEXIST&#39;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<p><strong>read (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      readMyData(fd);\n    });\n  } else {\n    console.error(&#39;myfile does not exist&#39;);\n  }\n});\n</code></pre>\n<p><strong>read (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</code></pre>\n<p>The &quot;not recommended&quot; examples above check for existence and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.</p>\n<p>In general, check for the existence of a file only if the file won’t be\nused directly, for example when its existence is a signal from another\nprocess.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "exists",
                "type": "boolean",
                "desc": "`exists` {boolean} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "existsSync",
        "signature": "fs.existsSync(path)",
        "desc": "<p>Synchronous version of <a href=\"fs.html#fs_fs_exists_path_callback\"><code>fs.exists()</code></a>.\nReturns <code>true</code> if the path exists, <code>false</code> otherwise.</p>\n<p>Note that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not.\n(The <code>callback</code> parameter to <code>fs.exists()</code> accepts parameters that are\ninconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not use\na callback.)</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "boolean",
          "desc": "Returns: {boolean} "
        }
      },
      {
        "class": "fs",
        "name": "fchmod",
        "signature": "fs.fchmod(fd, mode, callback)",
        "desc": "<p>Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fchmodSync",
        "signature": "fs.fchmodSync(fd, mode)",
        "desc": "<p>Synchronous fchmod(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fchown",
        "signature": "fs.fchown(fd, uid, gid, callback)",
        "desc": "<p>Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fchownSync",
        "signature": "fs.fchownSync(fd, uid, gid)",
        "desc": "<p>Synchronous fchown(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fdatasync",
        "signature": "fs.fdatasync(fd, callback)",
        "desc": "<p>Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fdatasyncSync",
        "signature": "fs.fdatasyncSync(fd)",
        "desc": "<p>Synchronous fdatasync(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fstat",
        "signature": "fs.fstat(fd, callback)",
        "desc": "<p>Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>fstat()</code> is identical to <a href=\"fs.html#fs_fs_stat_path_callback\"><code>stat()</code></a>,\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "stats",
                "type": "fs.Stats",
                "desc": "`stats` {fs.Stats} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fstatSync",
        "signature": "fs.fstatSync(fd)",
        "desc": "<p>Synchronous fstat(2).</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "fs.Stats",
          "desc": "Returns: {fs.Stats} "
        }
      },
      {
        "class": "fs",
        "name": "fsync",
        "signature": "fs.fsync(fd, callback)",
        "desc": "<p>Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "fsyncSync",
        "signature": "fs.fsyncSync(fd)",
        "desc": "<p>Synchronous fsync(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "ftruncate",
        "signature": "fs.ftruncate(fd[, len], callback)",
        "desc": "<p>Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<p>If the file referred to by the file descriptor was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n});\n// Prints: Node\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// (&#39;Node.js\\0\\0\\0&#39; in UTF8)\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "ftruncateSync",
        "signature": "fs.ftruncateSync(fd[, len])",
        "desc": "<p>Synchronous ftruncate(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "futimes",
        "signature": "fs.futimes(fd, atime, mtime, callback)",
        "desc": "<p>Change the file system timestamps of the object referenced by the supplied file\ndescriptor. See <a href=\"#fs_fs_utimes_path_atime_mtime_callback\"><code>fs.utimes()</code></a>.</p>\n<p>This function does not work on AIX versions before 7.1, it will return the\nerror <code>UV_ENOSYS</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "atime",
            "type": "number|string|Date",
            "desc": "`atime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "number|string|Date",
            "desc": "`mtime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "futimesSync",
        "signature": "fs.futimesSync(fd, atime, mtime)",
        "desc": "<p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "atime",
            "type": "integer",
            "desc": "`atime` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "integer",
            "desc": "`mtime` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "lchmod",
        "signature": "fs.lchmod(path, mode, callback)",
        "desc": "<p>Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>Only available on macOS.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "lchmodSync",
        "signature": "fs.lchmodSync(path, mode)",
        "desc": "<p>Synchronous lchmod(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "lchown",
        "signature": "fs.lchown(path, uid, gid, callback)",
        "desc": "<p>Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "lchownSync",
        "signature": "fs.lchownSync(path, uid, gid)",
        "desc": "<p>Synchronous lchown(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "uid",
            "type": "integer",
            "desc": "`uid` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "gid",
            "type": "integer",
            "desc": "`gid` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "link",
        "signature": "fs.link(existingPath, newPath, callback)",
        "desc": "<p>Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.</p>\n",
        "parameters": [
          {
            "name": "existingPath",
            "type": "string|Buffer|URL",
            "desc": "`existingPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "newPath",
            "type": "string|Buffer|URL",
            "desc": "`newPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "linkSync",
        "signature": "fs.linkSync(existingPath, newPath)",
        "desc": "<p>Synchronous link(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "existingPath",
            "type": "string|Buffer|URL",
            "desc": "`existingPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "newPath",
            "type": "string|Buffer|URL",
            "desc": "`newPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "lstat",
        "signature": "fs.lstat(path, callback)",
        "desc": "<p>Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>lstat()</code> is identical to <code>stat()</code>,\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "stats",
                "type": "fs.Stats",
                "desc": "`stats` {fs.Stats} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "lstatSync",
        "signature": "fs.lstatSync(path)",
        "desc": "<p>Synchronous lstat(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "fs.Stats",
          "desc": "Returns: {fs.Stats} "
        }
      },
      {
        "class": "fs",
        "name": "mkdir",
        "signature": "fs.mkdir(path[, mode], callback)",
        "desc": "<p>Asynchronously creates a directory. No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>See also: mkdir(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `0o777` ",
            "default": "`0o777`",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "mkdirSync",
        "signature": "fs.mkdirSync(path[, mode])",
        "desc": "<p>Synchronously creates a directory. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_mkdir_path_mode_callback\"><code>fs.mkdir()</code></a>.</p>\n<p>See also: mkdir(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `0o777` ",
            "default": "`0o777`",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "mkdtemp",
        "signature": "fs.mkdtemp(prefix[, options], callback)",
        "desc": "<p>Creates a unique temporary directory.</p>\n<p>Generates six random characters to be appended behind a required\n<code>prefix</code> to create a unique temporary directory.</p>\n<p>The created folder path is passed as a string to the callback&#39;s second\nparameter.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n<pre><code class=\"lang-js\">fs.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;), (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2\n});\n</code></pre>\n<p>The <code>fs.mkdtemp()</code> method will append the six randomly selected characters\ndirectly to the <code>prefix</code> string. For instance, given a directory <code>/tmp</code>, if the\nintention is to create a temporary directory <em>within</em> <code>/tmp</code>, the <code>prefix</code>\nmust end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n<pre><code class=\"lang-js\">// The parent directory for the new temporary directory\nconst tmpDir = os.tmpdir();\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst { sep } = require(&#39;path&#39;);\nfs.mkdtemp(`${tmpDir}${sep}`, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n</code></pre>\n",
        "parameters": [
          {
            "name": "prefix",
            "type": "string",
            "desc": "`prefix` {string} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "folder",
                "type": "string",
                "desc": "`folder` {string} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "mkdtempSync",
        "signature": "fs.mkdtempSync(prefix[, options])",
        "desc": "<p>The synchronous version of <a href=\"#fs_fs_mkdtemp_prefix_options_callback\"><code>fs.mkdtemp()</code></a>. Returns the created\nfolder path.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n",
        "parameters": [
          {
            "name": "prefix",
            "type": "string",
            "desc": "`prefix` {string} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "string",
          "desc": "Returns: {string} "
        }
      },
      {
        "class": "fs",
        "name": "open",
        "signature": "fs.open(path, flags[, mode], callback)",
        "desc": "<p>Asynchronous file open. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated.</p>\n<p>The callback gets two arguments <code>(err, fd)</code>.</p>\n<p>Some characters (<code>&lt; &gt; : &quot; / \\ | ? *</code>) are reserved under Windows as documented\nby <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx\">this MSDN page</a>.</p>\n<p>Functions based on <code>fs.open()</code> exhibit this behavior as well. eg.\n<code>fs.writeFile()</code>, <code>fs.readFile()</code>, etc.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "flags",
            "type": "string|number",
            "desc": "`flags` {string|number} See [support of file system `flags`][]. ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `0o666` (readable and writable) ",
            "default": "`0o666` (readable and writable)",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "fd",
                "type": "integer",
                "desc": "`fd` {integer} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "openSync",
        "signature": "fs.openSync(path, flags[, mode])",
        "desc": "<p>Synchronous version of <a href=\"#fs_fs_open_path_flags_mode_callback\"><code>fs.open()</code></a>. Returns an integer representing the file\ndescriptor.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "flags",
            "type": "string|number",
            "desc": "`flags` {string|number} See [support of file system `flags`][]. ",
            "optional": false,
            "options": []
          },
          {
            "name": "mode",
            "type": "integer",
            "desc": "`mode` {integer} **Default:** `0o666` ",
            "default": "`0o666`",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "number",
          "desc": "Returns: {number} "
        }
      },
      {
        "class": "fs",
        "name": "read",
        "signature": "fs.read(fd, buffer, offset, length, position, callback)",
        "desc": "<p>Read data from the file specified by <code>fd</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>\n<p>If this method is invoked as its <a href=\"util.html#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>bytesRead</code> and <code>buffer</code> properties.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "bytesRead",
                "type": "integer",
                "desc": "`bytesRead` {integer} "
              },
              {
                "name": "buffer",
                "type": "Buffer",
                "desc": "`buffer` {Buffer} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "readdir",
        "signature": "fs.readdir(path[, options], callback)",
        "desc": "<p>Asynchronous readdir(3). Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\nthe names of the files in the directory excluding <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "files",
                "type": "string[]|Buffer[]",
                "desc": "`files` {string[]|Buffer[]} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "readdirSync",
        "signature": "fs.readdirSync(path[, options])",
        "desc": "<p>Synchronous readdir(3).</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "string[]",
          "desc": "Returns: {string[]} An array of filenames excluding `'.'` and `'..'`. "
        }
      },
      {
        "class": "fs",
        "name": "readFile",
        "signature": "fs.readFile(path[, options], callback)",
        "desc": "<p>Asynchronously reads the entire contents of a file. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>\n<p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the\ncontents of the file.</p>\n<p>If no encoding is specified, then the raw buffer is returned.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>When the path is a directory, the behavior of <code>fs.readFile()</code> and\n<a href=\"#fs_fs_readfilesync_path_options\"><code>fs.readFileSync()</code></a> is platform-specific. On macOS, Linux, and Windows, an\nerror will be returned. On FreeBSD, a representation of the directory&#39;s contents\nwill be returned.</p>\n<pre><code class=\"lang-js\">// macOS, Linux, and Windows\nfs.readFile(&#39;&lt;directory&gt;&#39;, (err, data) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, read &lt;directory&gt;]\n});\n\n//  FreeBSD\nfs.readFile(&#39;&lt;directory&gt;&#39;, (err, data) =&gt; {\n  // =&gt; null, &lt;data&gt;\n});\n</code></pre>\n<p>Any specified file descriptor has to support reading.</p>\n<p>If a file descriptor is specified as the <code>path</code>, it will not be closed\nautomatically.</p>\n<p>The <code>fs.readFile()</code> function buffers the entire file. To minimize memory costs,\nwhen possible prefer streaming via <code>fs.createReadStream()</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL|integer",
            "desc": "`path` {string|Buffer|URL|integer} filename or file descriptor ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`null`",
                "desc": "`encoding` {string|null} **Default:** `null` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'r'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "data",
                "type": "string|Buffer",
                "desc": "`data` {string|Buffer} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "readFileSync",
        "signature": "fs.readFileSync(path[, options])",
        "desc": "<p>Synchronous version of <a href=\"#fs_fs_readfile_path_options_callback\"><code>fs.readFile()</code></a>. Returns the contents of the <code>path</code>.</p>\n<p>If the <code>encoding</code> option is specified then this function returns a\nstring. Otherwise it returns a buffer.</p>\n<p>Similar to <a href=\"#fs_fs_readfile_path_options_callback\"><code>fs.readFile()</code></a>, when the path is a directory, the behavior of\n<code>fs.readFileSync()</code> is platform-specific.</p>\n<pre><code class=\"lang-js\">// macOS, Linux, and Windows\nfs.readFileSync(&#39;&lt;directory&gt;&#39;);\n// =&gt; [Error: EISDIR: illegal operation on a directory, read &lt;directory&gt;]\n\n//  FreeBSD\nfs.readFileSync(&#39;&lt;directory&gt;&#39;); // =&gt; null, &lt;data&gt;\n</code></pre>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL|integer",
            "desc": "`path` {string|Buffer|URL|integer} filename or file descriptor ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`null`",
                "desc": "`encoding` {string|null} **Default:** `null` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'r'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. "
              }
            ]
          }
        ],
        "return": {
          "type": "string|Buffer",
          "desc": "Returns: {string|Buffer} "
        }
      },
      {
        "class": "fs",
        "name": "readlink",
        "signature": "fs.readlink(path[, options], callback)",
        "desc": "<p>Asynchronous readlink(2). The callback gets two arguments <code>(err,\nlinkString)</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "linkString",
                "type": "string|Buffer",
                "desc": "`linkString` {string|Buffer} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "readlinkSync",
        "signature": "fs.readlinkSync(path[, options])",
        "desc": "<p>Synchronous readlink(2). Returns the symbolic link&#39;s string value.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "string|Buffer",
          "desc": "Returns: {string|Buffer} "
        }
      },
      {
        "class": "fs",
        "name": "readSync",
        "signature": "fs.readSync(fd, buffer, offset, length, position)",
        "desc": "<p>Synchronous version of <a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\"><code>fs.read()</code></a>. Returns the number of <code>bytesRead</code>.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "number",
          "desc": "Returns: {number} "
        }
      },
      {
        "class": "fs",
        "name": "realpath",
        "signature": "fs.realpath(path[, options], callback)",
        "desc": "<p>Asynchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and\nsymbolic links.</p>\n<p>Note that &quot;canonical&quot; does not mean &quot;unique&quot;: hard links and bind mounts can\nexpose a file system entity through many pathnames.</p>\n<p>This function behaves like realpath(3), with some exceptions:</p>\n<ol>\n<li><p>No case conversion is performed on case-insensitive file systems.</p>\n</li>\n<li><p>The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.</p>\n</li>\n</ol>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>. May use <code>process.cwd</code>\nto resolve relative paths.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system\ndependent name for that object.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "resolvedPath",
                "type": "string|Buffer",
                "desc": "`resolvedPath` {string|Buffer} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "native",
        "signature": "fs.realpath.native(path[, options], callback)",
        "desc": "<p>Asynchronous realpath(3).</p>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "resolvedPath",
                "type": "string|Buffer",
                "desc": "`resolvedPath` {string|Buffer} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "realpathSync",
        "signature": "fs.realpathSync(path[, options])",
        "desc": "<p>Synchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and\nsymbolic links.</p>\n<p>Note that &quot;canonical&quot; does not mean &quot;unique&quot;: hard links and bind mounts can\nexpose a file system entity through many pathnames.</p>\n<p>This function behaves like realpath(3), with some exceptions:</p>\n<ol>\n<li><p>No case conversion is performed on case-insensitive file systems.</p>\n</li>\n<li><p>The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.</p>\n</li>\n</ol>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe returned value. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned\nwill be passed as a <code>Buffer</code> object.</p>\n<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system\ndependent name for that object.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "string|Buffer",
          "desc": "Returns: {string|Buffer} "
        }
      },
      {
        "class": "fs",
        "name": "native",
        "signature": "fs.realpathSync.native(path[, options])",
        "desc": "<p>Synchronous realpath(3).</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} **Default:** `'utf8'` "
              }
            ]
          }
        ],
        "return": {
          "type": "string|Buffer",
          "desc": "Returns: {string|Buffer} "
        }
      },
      {
        "class": "fs",
        "name": "rename",
        "signature": "fs.rename(oldPath, newPath, callback)",
        "desc": "<p>Asynchronously rename file at <code>oldPath</code> to the pathname provided\nas <code>newPath</code>. In the case that <code>newPath</code> already exists, it will\nbe overwritten. No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<p>See also: rename(2).</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;oldFile.txt&#39;, &#39;newFile.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;Rename complete!&#39;);\n});\n</code></pre>\n",
        "parameters": [
          {
            "name": "oldPath",
            "type": "string|Buffer|URL",
            "desc": "`oldPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "newPath",
            "type": "string|Buffer|URL",
            "desc": "`newPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "renameSync",
        "signature": "fs.renameSync(oldPath, newPath)",
        "desc": "<p>Synchronous rename(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "oldPath",
            "type": "string|Buffer|URL",
            "desc": "`oldPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "newPath",
            "type": "string|Buffer|URL",
            "desc": "`newPath` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "rmdir",
        "signature": "fs.rmdir(path, callback)",
        "desc": "<p>Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n<p>Using <code>fs.rmdir()</code> on a file (not a directory) results in an <code>ENOENT</code> error on\nWindows and an <code>ENOTDIR</code> error on POSIX.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "rmdirSync",
        "signature": "fs.rmdirSync(path)",
        "desc": "<p>Synchronous rmdir(2). Returns <code>undefined</code>.</p>\n<p>Using <code>fs.rmdirSync()</code> on a file (not a directory) results in an <code>ENOENT</code> error\non Windows and an <code>ENOTDIR</code> error on POSIX.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "stat",
        "signature": "fs.stat(path, callback)",
        "desc": "<p>Asynchronous stat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object.</p>\n<p>In case of an error, the <code>err.code</code> will be one of <a href=\"errors.html#errors_common_system_errors\">Common System Errors</a>.</p>\n<p>Using <code>fs.stat()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available.</p>\n<p>To check if a file exists without manipulating it afterwards, <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>\nis recommended.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "stats",
                "type": "fs.Stats",
                "desc": "`stats` {fs.Stats} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "statSync",
        "signature": "fs.statSync(path)",
        "desc": "<p>Synchronous stat(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": {
          "type": "fs.Stats",
          "desc": "Returns: {fs.Stats} "
        }
      },
      {
        "class": "fs",
        "name": "symlink",
        "signature": "fs.symlink(target, path[, type], callback)",
        "desc": "<p>Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback. The <code>type</code> argument can be set to <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code> and is only available on\nWindows (ignored on other platforms). Note that Windows junction points require\nthe destination path to be absolute. When using <code>&#39;junction&#39;</code>, the <code>target</code>\nargument will automatically be normalized to absolute path.</p>\n<p>Here is an example below:</p>\n<pre><code class=\"lang-js\">fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;, callback);\n</code></pre>\n<p>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</p>\n",
        "parameters": [
          {
            "name": "target",
            "type": "string|Buffer|URL",
            "desc": "`target` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "type",
            "type": "string",
            "desc": "`type` {string} **Default:** `'file'` ",
            "default": "`'file'`",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "symlinkSync",
        "signature": "fs.symlinkSync(target, path[, type])",
        "desc": "<p>Synchronous symlink(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "target",
            "type": "string|Buffer|URL",
            "desc": "`target` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "type",
            "type": "string",
            "desc": "`type` {string} **Default:** `'file'` ",
            "default": "`'file'`",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "truncate",
        "signature": "fs.truncate(path[, len], callback)",
        "desc": "<p>Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.</p>\n<p>Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "truncateSync",
        "signature": "fs.truncateSync(path[, len])",
        "desc": "<p>Synchronous truncate(2). Returns <code>undefined</code>. A file descriptor can also be\npassed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p>\n<p>Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "len",
            "type": "integer",
            "desc": "`len` {integer} **Default:** `0` ",
            "default": "`0`",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "unlink",
        "signature": "fs.unlink(path, callback)",
        "desc": "<p>Asynchronously removes a file or symbolic link. No arguments other than a\npossible exception are given to the completion callback.</p>\n<pre><code class=\"lang-js\">// Assuming that &#39;path/file.txt&#39; is a regular file.\nfs.unlink(&#39;path/file.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;path/file.txt was deleted&#39;);\n});\n</code></pre>\n<p><code>fs.unlink()</code> will not work on a directory, empty or otherwise. To remove a\ndirectory, use <a href=\"#fs_fs_rmdir_path_callback\"><code>fs.rmdir()</code></a>.</p>\n<p>See also: unlink(2).</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "unlinkSync",
        "signature": "fs.unlinkSync(path)",
        "desc": "<p>Synchronous unlink(2). Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "unwatchFile",
        "signature": "fs.unwatchFile(filename[, listener])",
        "desc": "<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed,\neffectively stopping watching of <code>filename</code>.</p>\n<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a\nno-op, not an error.</p>\n<p>Using <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and\n<code>fs.unwatchFile()</code>. <code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code>\nand <code>fs.unwatchFile()</code> when possible.</p>\n",
        "parameters": [
          {
            "name": "filename",
            "type": "string|Buffer|URL",
            "desc": "`filename` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "listener",
            "type": "Function",
            "desc": "`listener` {Function} Optional, a listener previously attached using `fs.watchFile()` ",
            "optional": true,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "utimes",
        "signature": "fs.utimes(path, atime, mtime, callback)",
        "desc": "<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>\n<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>\n<ul>\n<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a\nnumeric string like <code>&#39;123456789.0&#39;</code>.</li>\n<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code> or\n<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>\n</ul>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "atime",
            "type": "number|string|Date",
            "desc": "`atime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "number|string|Date",
            "desc": "`mtime` {number|string|Date} ",
            "optional": false,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "utimesSync",
        "signature": "fs.utimesSync(path, atime, mtime)",
        "desc": "<p>Synchronous version of <a href=\"#fs_fs_utimes_path_atime_mtime_callback\"><code>fs.utimes()</code></a>. Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "path",
            "type": "string|Buffer|URL",
            "desc": "`path` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "atime",
            "type": "integer",
            "desc": "`atime` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "mtime",
            "type": "integer",
            "desc": "`mtime` {integer} ",
            "optional": false,
            "options": []
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "watch",
        "signature": "fs.watch(filename[, options][, listener])",
        "desc": "<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\ndirectory.</p>\n<p>The second argument is optional. If <code>options</code> is provided as a string, it\nspecifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>\n<p>The listener callback gets two arguments <code>(eventType, filename)</code>. <code>eventType</code>\nis either <code>&#39;rename&#39;</code> or <code>&#39;change&#39;</code>, and <code>filename</code> is the name of the file\nwhich triggered the event.</p>\n<p>Note that on most platforms, <code>&#39;rename&#39;</code> is emitted whenever a filename appears\nor disappears in the directory.</p>\n<p>Also note the listener callback is attached to the <code>&#39;change&#39;</code> event fired by\n<a href=\"#fs_class_fs_fswatcher\"><code>fs.FSWatcher</code></a>, but it is not the same thing as the <code>&#39;change&#39;</code> value of\n<code>eventType</code>.</p>\n",
        "parameters": [
          {
            "name": "filename",
            "type": "string|Buffer|URL",
            "desc": "`filename` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "string|Object",
            "desc": "`options` {string|Object} ",
            "optional": true,
            "options": [
              {
                "name": "persistent",
                "type": "boolean",
                "default": "`true`",
                "desc": "`persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. "
              },
              {
                "name": "recursive",
                "type": "boolean",
                "default": "`false`",
                "desc": "`recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [Caveats][]). **Default:** `false`. "
              },
              {
                "name": "encoding",
                "type": "string",
                "default": "`'utf8'`",
                "desc": "`encoding` {string} Specifies the character encoding to be used for the  filename passed to the listener. **Default:** `'utf8'`. "
              }
            ]
          },
          {
            "name": "listener",
            "type": "Function|undefined",
            "desc": "`listener` {Function|undefined} **Default:** `undefined` ",
            "default": "`undefined`",
            "optional": true,
            "options": [
              {
                "name": "eventType",
                "type": "string",
                "desc": "`eventType` {string} "
              },
              {
                "name": "filename",
                "type": "string|Buffer",
                "desc": "`filename` {string|Buffer} "
              }
            ]
          }
        ],
        "return": {
          "type": "fs.FSWatcher",
          "desc": "Returns: {fs.FSWatcher} "
        }
      },
      {
        "class": "fs",
        "name": "watchFile",
        "signature": "fs.watchFile(filename[, options], listener)",
        "desc": "<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\ntime the file is accessed.</p>\n<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The\n<code>options</code> object may contain a boolean named <code>persistent</code> that indicates\nwhether the process should continue to run as long as files are being watched.\nThe <code>options</code> object may specify an <code>interval</code> property indicating how often the\ntarget should be polled in milliseconds.</p>\n<p>The <code>listener</code> gets two arguments the current stat object and the previous\nstat object:</p>\n<pre><code class=\"lang-js\">fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</code></pre>\n<p>These stat objects are instances of <code>fs.Stat</code>.</p>\n<p>To be notified when the file was modified, not just accessed, it is necessary\nto compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p>\n<p>When an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it\nwill invoke the listener once, with all the fields zeroed (or, for dates, the\nUnix Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>,\ninstead of zero. If the file is created later on, the listener will be called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10.</p>\n<p>Using <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code>. <code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code> when possible.</p>\n<p>When a file being watched by <code>fs.watchFile()</code> disappears and reappears,\nthen the <code>previousStat</code> reported in the second callback event (the file&#39;s\nreappearance) will be the same as the <code>previousStat</code> of the first callback\nevent (its disappearance).</p>\n<p>This happens when:</p>\n<ul>\n<li>the file is deleted, followed by a restore</li>\n<li>the file is renamed twice - the second time back to its original name</li>\n</ul>\n",
        "parameters": [
          {
            "name": "filename",
            "type": "string|Buffer|URL",
            "desc": "`filename` {string|Buffer|URL} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object",
            "desc": "`options` {Object} ",
            "optional": true,
            "options": [
              {
                "name": "persistent",
                "type": "boolean",
                "default": "`true`",
                "desc": "`persistent` {boolean} **Default:** `true` "
              },
              {
                "name": "interval",
                "type": "integer",
                "default": "`5007`",
                "desc": "`interval` {integer} **Default:** `5007` "
              }
            ]
          },
          {
            "name": "listener",
            "type": "Function",
            "desc": "`listener` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "current",
                "type": "fs.Stats",
                "desc": "`current` {fs.Stats} "
              },
              {
                "name": "previous",
                "type": "fs.Stats",
                "desc": "`previous` {fs.Stats} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "write",
        "signature": "fs.write(fd, buffer[, offset[, length[, position]]], callback)",
        "desc": "<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>The callback will be given three arguments <code>(err, bytesWritten, buffer)</code> where\n<code>bytesWritten</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>\n<p>If this method is invoked as its <a href=\"util.html#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>bytesWritten</code> and <code>buffer</code> properties.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "bytesWritten",
                "type": "integer",
                "desc": "`bytesWritten` {integer} "
              },
              {
                "name": "buffer",
                "type": "Buffer|Uint8Array",
                "desc": "`buffer` {Buffer|Uint8Array} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "write",
        "signature": "fs.write(fd, string[, position[, encoding]], callback)",
        "desc": "<p>Write <code>string</code> to the file specified by <code>fd</code>. If <code>string</code> is not a string, then\nthe value will be coerced to one.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code> the data will be written at\nthe current position. See pwrite(2).</p>\n<p><code>encoding</code> is the expected string encoding.</p>\n<p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>\nspecifies how many <em>bytes</em> the passed string required to be written. Note that\nbytes written is not the same as string characters. See <a href=\"buffer.html#buffer_class_method_buffer_bytelength_string_encoding\"><code>Buffer.byteLength</code></a>.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "string",
            "type": "string",
            "desc": "`string` {string} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "encoding",
            "type": "string",
            "desc": "`encoding` {string} ",
            "optional": true,
            "options": []
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              },
              {
                "name": "written",
                "type": "integer",
                "desc": "`written` {integer} "
              },
              {
                "name": "string",
                "type": "string",
                "desc": "`string` {string} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "writeFile",
        "signature": "fs.writeFile(file, data[, options], callback)",
        "desc": "<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The file has been saved!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>Any specified file descriptor has to support writing.</p>\n<p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>If a file descriptor is specified as the <code>file</code>, it will not be closed\nautomatically.</p>\n",
        "parameters": [
          {
            "name": "file",
            "type": "string|Buffer|URL|integer",
            "desc": "`file` {string|Buffer|URL|integer} filename or file descriptor ",
            "optional": false,
            "options": []
          },
          {
            "name": "data",
            "type": "string|Buffer|Uint8Array",
            "desc": "`data` {string|Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'w'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. "
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "desc": "`callback` {Function} ",
            "optional": false,
            "options": [
              {
                "name": "err",
                "type": "Error",
                "desc": "`err` {Error} "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "writeFileSync",
        "signature": "fs.writeFileSync(file, data[, options])",
        "desc": "<p>The synchronous version of <a href=\"#fs_fs_writefile_file_data_options_callback\"><code>fs.writeFile()</code></a>. Returns <code>undefined</code>.</p>\n",
        "parameters": [
          {
            "name": "file",
            "type": "string|Buffer|URL|integer",
            "desc": "`file` {string|Buffer|URL|integer} filename or file descriptor ",
            "optional": false,
            "options": []
          },
          {
            "name": "data",
            "type": "string|Buffer|Uint8Array",
            "desc": "`data` {string|Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "options",
            "type": "Object|string",
            "desc": "`options` {Object|string} ",
            "optional": true,
            "options": [
              {
                "name": "encoding",
                "type": "string|null",
                "default": "`'utf8'`",
                "desc": "`encoding` {string|null} **Default:** `'utf8'` "
              },
              {
                "name": "mode",
                "type": "integer",
                "default": "`0o666`",
                "desc": "`mode` {integer} **Default:** `0o666` "
              },
              {
                "name": "flag",
                "type": "string",
                "default": "`'w'`",
                "desc": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. "
              }
            ]
          }
        ],
        "return": null
      },
      {
        "class": "fs",
        "name": "writeSync",
        "signature": "fs.writeSync(fd, buffer[, offset[, length[, position]]])",
        "desc": "<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "buffer",
            "type": "Buffer|Uint8Array",
            "desc": "`buffer` {Buffer|Uint8Array} ",
            "optional": false,
            "options": []
          },
          {
            "name": "offset",
            "type": "integer",
            "desc": "`offset` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "length",
            "type": "integer",
            "desc": "`length` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "number",
          "desc": "Returns: {number} "
        }
      },
      {
        "class": "fs",
        "name": "writeSync",
        "signature": "fs.writeSync(fd, string[, position[, encoding]])",
        "desc": "<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n",
        "parameters": [
          {
            "name": "fd",
            "type": "integer",
            "desc": "`fd` {integer} ",
            "optional": false,
            "options": []
          },
          {
            "name": "string",
            "type": "string",
            "desc": "`string` {string} ",
            "optional": false,
            "options": []
          },
          {
            "name": "position",
            "type": "integer",
            "desc": "`position` {integer} ",
            "optional": true,
            "options": []
          },
          {
            "name": "encoding",
            "type": "string",
            "desc": "`encoding` {string} ",
            "optional": true,
            "options": []
          }
        ],
        "return": {
          "type": "number",
          "desc": "Returns: {number} "
        }
      }
    ]
  }