<?xml version="1.0" encoding="UTF-8"?>
<api xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="result_xs.xsd">
  <name>mongodb nodejs driver</name>
  <source>http://mongodb.github.io/node-mongodb-native/3.0/api/index.html</source>
  <methods>
    <method>
      <name>addUser</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>username</name>
          <desc>The username.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>password</name>
          <desc>The password.</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number
|

string</type>
              <name>w</name>
              <desc>The write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>wtimeout</name>
              <desc>The write concern timeout.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>j</name>
              <desc>Specify a journal write concern.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>fsync</name>
              <desc>Specify a file sync write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>customData</name>
              <desc>Custom data associated with the user (only Mongodb 2.6 or higher)</desc>
            </option>
            <option>
              <default>null</default>
              <type>Array.&lt;object&gt;</type>
              <name>roles</name>
              <desc>Roles associated with the created user (only Mongodb 2.6 or higher)</desc>
            </option>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>addUser(username, password, options, callback)</signature>
      <class>Admin</class>
      <desc>Add a user to the database.</desc>
    </method>
    <method>
      <name>buildInfo</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>buildInfo(options, callback)</signature>
      <class>Admin</class>
      <desc>Retrieve the server information for the currentinstance of the db client</desc>
    </method>
    <method>
      <name>command</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>command</name>
          <desc>The command hash</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>ReadPreference
|

string</type>
              <name>readPreference</name>
              <desc>The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>maxTimeMS</name>
              <desc>Number of milliseconds to wait before aborting the query.</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>command(command, options, callback)</signature>
      <class>Admin</class>
      <desc>Execute a command</desc>
    </method>
    <method>
      <name>BulkWriteError</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Error
|

string
|

object</type>
          <name>message</name>
          <desc>The error message</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>BulkWriteResult</type>
          <name>result</name>
          <desc>The result of the bulk write operation</desc>
        </param>
      </parameters>
      <return>
        <type>BulkWriteError</type>
        <desc>BulkWriteError instance</desc>
      </return>
      <signature>new BulkWriteError(message, result)</signature>
      <class>BulkWriteError</class>
      <desc>Creates a new BulkWriteError</desc>
    </method>
    <method>
      <name>batchSize</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>The batchSize for the cursor.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>batchSize(value)</signature>
      <class>AggregationCursor</class>
      <desc>Set the batch size for the cursor.</desc>
    </method>
    <method>
      <name>listDatabases</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>nameOnly</name>
              <desc>Whether the command should return only db names, or names and size info.</desc>
            </option>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>listDatabases(options, callback)</signature>
      <class>Admin</class>
      <desc>List the available databases</desc>
    </method>
    <method>
      <name>ping</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>ping(options, callback)</signature>
      <class>Admin</class>
      <desc>Ping the MongoDB server and retrieve results</desc>
    </method>
    <method>
      <name>close</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>AggregationCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>close(callback)</signature>
      <class>AggregationCursor</class>
      <desc>Close the cursor, sending a AggregationCursor command and emitting close.</desc>
    </method>
    <method>
      <name>each</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>AggregationCursor~resultCallback</type>
          <name>callback</name>
          <desc>The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>each(callback)</signature>
      <class>AggregationCursor</class>
      <desc>Iterates over all the documents for this cursor. As with {cursor.toArray},not all of the elements will be iterated if this cursor had been previouly accessed.In that case, {cursor.rewind} can be used to reset the cursor. However, unlike{cursor.toArray}, the cursor will only hold a maximum of batch size elementsat any given time if batch size is specified. Otherwise, the caller is responsiblefor making sure that the entire result can fit the memory.</desc>
    </method>
    <method>
      <name>explain</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>AggregationCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>explain(callback)</signature>
      <class>AggregationCursor</class>
      <desc>Execute the explain for the cursor</desc>
    </method>
    <method>
      <name>geoNear</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>document</name>
          <desc>The geoNear stage document.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>geoNear(document)</signature>
      <class>AggregationCursor</class>
      <desc>Add a geoNear stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>removeUser</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>username</name>
          <desc>The username.</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number
|

string</type>
              <name>w</name>
              <desc>The write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>wtimeout</name>
              <desc>The write concern timeout.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>j</name>
              <desc>Specify a journal write concern.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>fsync</name>
              <desc>Specify a file sync write concern.</desc>
            </option>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>removeUser(username, options, callback)</signature>
      <class>Admin</class>
      <desc>Remove a user from a database</desc>
    </method>
    <method>
      <name>ChangeStream</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Db
|

Collection</type>
          <name>changeDomain</name>
          <desc>The collection against which to create the change stream</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Array</type>
          <name>pipeline</name>
          <desc>An array of aggregation pipeline stages through which to pass change stream documents</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>'default'</default>
              <type>string</type>
              <name>fullDocument</name>
              <desc>Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.</desc>
            </option>
            <option>
              <default/>
              <type>number</type>
              <name>maxAwaitTimeMS</name>
              <desc>The maximum amount of time for the server to wait on new documents to satisfy a change stream query</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>resumeAfter</name>
              <desc>Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>batchSize</name>
              <desc>The number of documents to return per batch. See aggregation documentation.</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>collation</name>
              <desc>Specify collation settings for operation. See aggregation documentation.</desc>
            </option>
            <option>
              <default>null</default>
              <type>ReadPreference</type>
              <name>readPreference</name>
              <desc>The read preference. Defaults to the read preference of the database or collection. See read preference documentation.</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>ChangeStream</type>
        <desc>ChangeStream instance.</desc>
      </return>
      <signature>new ChangeStream(changeDomain, pipeline, options)</signature>
      <class>ChangeStream</class>
      <desc>Creates a new Change Stream instance. Normally created using Collection.watch().</desc>
    </method>
    <method>
      <name>addCursorFlag</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>flag</name>
          <desc>The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>boolean</type>
          <name>value</name>
          <desc>The flag boolean value.</desc>
        </param>
      </parameters>
      <return>
        <type>Cursor</type>
        <desc/>
</return>
      <signature>addCursorFlag(flag, value)</signature>
      <class>Cursor</class>
      <desc>Add a cursor flag to the cursor</desc>
    </method>
    <method>
      <name>Binary</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Buffer</type>
          <name>buffer</name>
          <desc>a buffer object containing the binary data.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Number</type>
          <name>subType</name>
          <desc>optional
the option binary type.</desc>
        </param>
      </parameters>
      <return>
        <type>Binary</type>
        <desc/>
</return>
      <signature>new Binary(buffer, subType)</signature>
      <class>Binary</class>
      <desc>A class representation of the BSON Binary type.
Sub types

BSON.BSON_BINARY_SUBTYPE_DEFAULT, default BSON type.
BSON.BSON_BINARY_SUBTYPE_FUNCTION, BSON function type.
BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY, BSON byte array type.
BSON.BSON_BINARY_SUBTYPE_UUID, BSON uuid type.
BSON.BSON_BINARY_SUBTYPE_MD5, BSON md5 type.
BSON.BSON_BINARY_SUBTYPE_USER_DEFINED, BSON user defined type.</desc>
    </method>
    <method>
      <name>getUpsertedIdAt</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>index</name>
          <desc>the number of the upserted id to return, returns undefined if no result for passed in index</desc>
        </param>
      </parameters>
      <return>
        <type>object</type>
        <desc/>
</return>
      <signature>getUpsertedIdAt(index)</signature>
      <class>BulkWriteResult</class>
      <desc>Return the upserted id at position x</desc>
    </method>
    <method>
      <name>Code</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string
|

function</type>
          <name>code</name>
          <desc>a string or function.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Object</type>
          <name>scope</name>
          <desc>optional
an optional scope for the function.</desc>
        </param>
      </parameters>
      <return>
        <type>Code</type>
        <desc/>
</return>
      <signature>new Code(code, scope)</signature>
      <class>Code</class>
      <desc>A class representation of the BSON Code type.</desc>
    </method>
    <method>
      <name>batchSize</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>The batchSize for the cursor.</desc>
        </param>
      </parameters>
      <return>
        <type>CommandCursor</type>
        <desc/>
</return>
      <signature>batchSize(value)</signature>
      <class>CommandCursor</class>
      <desc>Set the batch size for the cursor.</desc>
    </method>
    <method>
      <name>group</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>document</name>
          <desc>The group stage document.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>group(document)</signature>
      <class>AggregationCursor</class>
      <desc>Add a group stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>hasNext</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>AggregationCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>hasNext(callback)</signature>
      <class>AggregationCursor</class>
      <desc>Check if there is any document still available in the cursor</desc>
    </method>
    <method>
      <name>limit</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>The state limit value.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>limit(value)</signature>
      <class>AggregationCursor</class>
      <desc>Add a limit stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>lookup</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>document</name>
          <desc>The lookup stage document.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>lookup(document)</signature>
      <class>AggregationCursor</class>
      <desc>Add a lookup stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>match</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>document</name>
          <desc>The match stage document.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>match(document)</signature>
      <class>AggregationCursor</class>
      <desc>Add a match stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>replSetGetStatus</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>replSetGetStatus(options, callback)</signature>
      <class>Admin</class>
      <desc>Get ReplicaSet status</desc>
    </method>
    <method>
      <name>serverInfo</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>serverInfo(options, callback)</signature>
      <class>Admin</class>
      <desc>Retrieve the server information for the currentinstance of the db client</desc>
    </method>
    <method>
      <name>serverStatus</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>serverStatus(options, callback)</signature>
      <class>Admin</class>
      <desc>Retrieve this db's server status.</desc>
    </method>
    <method>
      <name>addQueryModifier</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>name</name>
          <desc>The query modifier (must start with $, such as $orderby etc)</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>boolean</type>
          <name>value</name>
          <desc>The flag boolean value.</desc>
        </param>
      </parameters>
      <return>
        <type>Cursor</type>
        <desc/>
</return>
      <signature>addQueryModifier(name, value)</signature>
      <class>Cursor</class>
      <desc>Add a query modifier to the cursor query</desc>
    </method>
    <method>
      <name>batchSize</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>The batchSize for the cursor.</desc>
        </param>
      </parameters>
      <return>
        <type>Cursor</type>
        <desc/>
</return>
      <signature>batchSize(value)</signature>
      <class>Cursor</class>
      <desc>Set the batch size for the cursor.</desc>
    </method>
    <method>
      <name>close</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>boolean</type>
              <name>skipKillCursors</name>
              <desc>Bypass calling killCursors when closing the cursor.</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Cursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>close(options, callback)</signature>
      <class>Cursor</class>
      <desc>Close the cursor, sending a KillCursor command and emitting close.</desc>
    </method>
    <method>
      <name>collation</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>value</name>
          <desc>The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).</desc>
        </param>
      </parameters>
      <return>
        <type>Cursor</type>
        <desc/>
</return>
      <signature>collation(value)</signature>
      <class>Cursor</class>
      <desc>Set the collation options for the cursor.</desc>
    </method>
    <method>
      <name>put</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>byte_value</name>
          <desc>a single byte we wish to write.</desc>
        </param>
      </parameters>
      <return/>
      <signature>put(byte_value)</signature>
      <class>Binary</class>
      <desc>Updates this binary with byte_value.</desc>
    </method>
    <method>
      <name>read</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>position</name>
          <desc>read from the given position in the Binary.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>length</name>
          <desc>the number of bytes to read.</desc>
        </param>
      </parameters>
      <return>
        <type>Buffer</type>
        <desc/>
</return>
      <signature>read(position, length)</signature>
      <class>Binary</class>
      <desc>Reads length bytes starting at position.</desc>
    </method>
    <method>
      <name>write</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Buffer
|

string</type>
          <name>string</name>
          <desc>a string or buffer to be written to the Binary BSON object.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>offset</name>
          <desc>specify the binary of where to write the content.</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>write(string, offset)</signature>
      <class>Binary</class>
      <desc>Writes a buffer or string to the binary.</desc>
    </method>
    <method>
      <name>getWriteErrorAt</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>index</name>
          <desc>of the write error to return, returns null if there is no result for passed in index</desc>
        </param>
      </parameters>
      <return>
        <type>WriteError</type>
        <desc/>
</return>
      <signature>getWriteErrorAt(index)</signature>
      <class>BulkWriteResult</class>
      <desc>Returns a specific write error object</desc>
    </method>
    <method>
      <name>close</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>CommandCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>close(callback)</signature>
      <class>CommandCursor</class>
      <desc>Close the cursor, sending a KillCursor command and emitting close.</desc>
    </method>
    <method>
      <name>each</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>CommandCursor~resultCallback</type>
          <name>callback</name>
          <desc>The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>each(callback)</signature>
      <class>CommandCursor</class>
      <desc>Iterates over all the documents for this cursor. As with {cursor.toArray},not all of the elements will be iterated if this cursor had been previouly accessed.In that case, {cursor.rewind} can be used to reset the cursor. However, unlike{cursor.toArray}, the cursor will only hold a maximum of batch size elementsat any given time if batch size is specified. Otherwise, the caller is responsiblefor making sure that the entire result can fit the memory.</desc>
    </method>
    <method>
      <name>hasNext</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>CommandCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>hasNext(callback)</signature>
      <class>CommandCursor</class>
      <desc>Check if there is any document still available in the cursor</desc>
    </method>
    <method>
      <name>maxTimeMS</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>The state maxTimeMS value.</desc>
        </param>
      </parameters>
      <return>
        <type>CommandCursor</type>
        <desc/>
</return>
      <signature>maxTimeMS(value)</signature>
      <class>CommandCursor</class>
      <desc>Add a maxTimeMS stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>maxTimeMS</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>The state maxTimeMS value.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>maxTimeMS(value)</signature>
      <class>AggregationCursor</class>
      <desc>Add a maxTimeMS stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>next</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>AggregationCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>next(callback)</signature>
      <class>AggregationCursor</class>
      <desc>Get the next available document from the cursor, returns null if no more documents are available.</desc>
    </method>
    <method>
      <name>out</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>destination</name>
          <desc>The destination name.</desc>
        </param>
      </parameters>
      <return>
        <type>AggregationCursor</type>
        <desc/>
</return>
      <signature>out(destination)</signature>
      <class>AggregationCursor</class>
      <desc>Add a out stage to the aggregation pipeline</desc>
    </method>
    <method>
      <name>validateCollection</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>collectionName</name>
          <desc>The name of the collection to validate.</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default/>
              <type>ClientSession</type>
              <name>session</name>
              <desc>optional session to use for this operation</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Admin~resultCallback</type>
          <name>callback</name>
          <desc>optional
The command result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>validateCollection(collectionName, options, callback)</signature>
      <class>Admin</class>
      <desc>Validate an existing collection</desc>
    </method>
    <method>
      <name>~resultCallback</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>MongoError</type>
          <name>error</name>
          <desc>An error instance representing the error during the execution.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>result</name>
          <desc>The result object if the command was executed successfully.</desc>
        </param>
      </parameters>
      <return/>
      <signature>resultCallback(error, result)</signature>
      <class>Admin</class>
      <desc>The callback format for results</desc>
    </method>
    <method>
      <name>DBRef</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>namespace</name>
          <desc>the collection name.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>ObjectID</type>
          <name>oid</name>
          <desc>the reference ObjectID.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>db</name>
          <desc>optional
optional db name, if omitted the reference is local to the current db.</desc>
        </param>
      </parameters>
      <return>
        <type>DBRef</type>
        <desc/>
</return>
      <signature>new DBRef(namespace, oid, db)</signature>
      <class>DBRef</class>
      <desc>A class representation of the BSON DBRef type.</desc>
    </method>
    <method>
      <name>Decimal128</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Buffer</type>
          <name>bytes</name>
          <desc>a buffer containing the raw Decimal128 bytes.</desc>
        </param>
      </parameters>
      <return>
        <type>Double</type>
        <desc/>
</return>
      <signature>new Decimal128(bytes)</signature>
      <class>Decimal128</class>
      <desc>A class representation of the BSON Decimal128 type.</desc>
    </method>
    <method>
      <name>Double</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>the number we want to represent as a double.</desc>
        </param>
      </parameters>
      <return>
        <type>Double</type>
        <desc/>
</return>
      <signature>new Double(value)</signature>
      <class>Double</class>
      <desc>A class representation of the BSON Double type.</desc>
    </method>
    <method>
      <name>replaceOne</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>doc</name>
          <desc>the new document to replace the existing one with</desc>
        </param>
      </parameters>
      <return>
        <type>OrderedBulkOperation</type>
        <desc/>
</return>
      <signature>replaceOne(doc)</signature>
      <class>FindOperatorsOrdered</class>
      <desc>Add a replace one operation to the bulk operation</desc>
    </method>
    <method>
      <name>replaceOne</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>updateDocument</name>
          <desc>the new document to replace the existing one with</desc>
        </param>
      </parameters>
      <return>
        <type>FindOperatorsUnordered</type>
        <desc/>
</return>
      <signature>replaceOne(updateDocument)</signature>
      <class>FindOperatorsUnordered</class>
      <desc>Add a replace one operation to the bulk operation</desc>
    </method>
    <method>
      <name>GridFSBucket</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Db</type>
          <name>db</name>
          <desc>A db handle</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>&quot;fs&quot;</default>
              <type>string</type>
              <name>bucketName</name>
              <desc>The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.</desc>
            </option>
            <option>
              <default>255 * 1024</default>
              <type>number</type>
              <name>chunkSizeBytes</name>
              <desc>Number of bytes stored in each chunk. Defaults to 255KB</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>writeConcern</name>
              <desc>Optional write concern to be passed to write operations, for instance { w: 1 }</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>readPreference</name>
              <desc>Optional read preference to be passed to read operations</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucket</type>
        <desc/>
</return>
      <signature>new GridFSBucket(db, options)</signature>
      <class>GridFSBucket</class>
      <desc>Constructor for a streaming GridFS interface</desc>
    </method>
    <method>
      <name>comment</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>value</name>
          <desc>The comment attached to this query.</desc>
        </param>
      </parameters>
      <return>
        <type>Cursor</type>
        <desc/>
</return>
      <signature>comment(value)</signature>
      <class>Cursor</class>
      <desc>Add a comment to the cursor query allowing for tracking the comment in the log.</desc>
    </method>
    <method>
      <name>count</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>boolean</type>
          <name>applySkipLimit</name>
          <desc>optional
Should the count command apply limit and skip settings on the cursor or in the passed in options.</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number</type>
              <name>skip</name>
              <desc>The number of documents to skip.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>limit</name>
              <desc>The maximum amounts to count before aborting.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>maxTimeMS</name>
              <desc>Number of miliseconds to wait before aborting the query.</desc>
            </option>
            <option>
              <default>null</default>
              <type>string</type>
              <name>hint</name>
              <desc>An index name hint for the query.</desc>
            </option>
            <option>
              <default>null</default>
              <type>ReadPreference
|

string</type>
              <name>readPreference</name>
              <desc>The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Cursor~countResultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>count(applySkipLimit, options, callback)</signature>
      <class>Cursor</class>
      <desc>Get the count of documents for this cursor</desc>
    </method>
    <method>
      <name>next</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>CommandCursor~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>next(callback)</signature>
      <class>CommandCursor</class>
      <desc>Get the next available document from the cursor, returns null if no more documents are available.</desc>
    </method>
    <method>
      <name>Decimal128.fromString</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>string</name>
          <desc>a numeric string representation.</desc>
        </param>
      </parameters>
      <return>
        <type>Decimal128</type>
        <desc>a Decimal128 instance.</desc>
      </return>
      <signature>Decimal128.fromString(string)</signature>
      <class>Decimal128</class>
      <desc>Create a Decimal128 instance from a string representation</desc>
    </method>
    <method>
      <name>update</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>doc</name>
          <desc>update operations</desc>
        </param>
      </parameters>
      <return>
        <type>OrderedBulkOperation</type>
        <desc/>
</return>
      <signature>update(doc)</signature>
      <class>FindOperatorsOrdered</class>
      <desc>Add a single update document to the bulk operation</desc>
    </method>
    <method>
      <name>updateOne</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>doc</name>
          <desc>update operations</desc>
        </param>
      </parameters>
      <return>
        <type>OrderedBulkOperation</type>
        <desc/>
</return>
      <signature>updateOne(doc)</signature>
      <class>FindOperatorsOrdered</class>
      <desc>Add a single update one document to the bulk operation</desc>
    </method>
    <method>
      <name>update</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>updateDocument</name>
          <desc>update operations</desc>
        </param>
      </parameters>
      <return>
        <type>FindOperatorsUnordered</type>
        <desc/>
</return>
      <signature>update(updateDocument)</signature>
      <class>FindOperatorsUnordered</class>
      <desc>Add a single update document to the bulk operation</desc>
    </method>
    <method>
      <name>delete</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>ObjectId</type>
          <name>id</name>
          <desc>The id of the file doc</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>GridFSBucket~errorCallback</type>
          <name>callback</name>
          <desc>optional</desc>
        </param>
      </parameters>
      <return/>
      <signature>delete(id, callback)</signature>
      <class>GridFSBucket</class>
      <desc>Deletes a file with the given id</desc>
    </method>
    <method>
      <name>drop</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>GridFSBucket~errorCallback</type>
          <name>callback</name>
          <desc>optional</desc>
        </param>
      </parameters>
      <return/>
      <signature>drop(callback)</signature>
      <class>GridFSBucket</class>
      <desc>Removes this bucket's files collection, followed by its chunks collection.</desc>
    </method>
    <method>
      <name>find</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Object</type>
          <name>filter</name>
          <desc/>
</param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number</type>
              <name>batchSize</name>
              <desc>Optional batch size for cursor</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>limit</name>
              <desc>Optional limit for cursor</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>maxTimeMS</name>
              <desc>Optional maxTimeMS for cursor</desc>
            </option>
            <option>
              <default>null</default>
              <type>boolean</type>
              <name>noCursorTimeout</name>
              <desc>Optionally set cursor's noCursorTimeout flag</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>skip</name>
              <desc>Optional skip for cursor</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>sort</name>
              <desc>Optional sort for cursor</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>Cursor</type>
        <desc/>
</return>
      <signature>find(filter, options)</signature>
      <class>GridFSBucket</class>
      <desc>Convenience wrapper around find on the files collection</desc>
    </method>
    <method>
      <name>each</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Cursor~resultCallback</type>
          <name>callback</name>
          <desc>The result callback.</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>each(callback)</signature>
      <class>Cursor</class>
      <desc>Iterates over all the documents for this cursor. As with {cursor.toArray},not all of the elements will be iterated if this cursor had been previouly accessed.In that case, {cursor.rewind} can be used to reset the cursor. However, unlike{cursor.toArray}, the cursor will only hold a maximum of batch size elementsat any given time if batch size is specified. Otherwise, the caller is responsiblefor making sure that the entire result can fit the memory.</desc>
    </method>
    <method>
      <name>GridFSBucketWriteStream</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>GridFSBucket</type>
          <name>bucket</name>
          <desc>Handle for this stream's corresponding bucket</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>filename</name>
          <desc>The value of the 'filename' key in the files doc</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>string
|

number
|

object</type>
              <name>id</name>
              <desc>Custom file id for the GridFS file.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>chunkSizeBytes</name>
              <desc>The chunk size to use, in bytes</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>w</name>
              <desc>The write concern</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>wtimeout</name>
              <desc>The write concern timeout</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>j</name>
              <desc>The journal write concern</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketWriteStream</type>
        <desc>GridFSBucketWriteStream instance.</desc>
      </return>
      <signature>new GridFSBucketWriteStream(bucket, filename, options)</signature>
      <class>GridFSBucketWriteStream</class>
      <desc>A writable stream that enables you to write buffers to GridFS.
Do not instantiate this class directly. Use openUploadStream() instead.</desc>
    </method>
    <method>
      <name>GridFSBucketReadStream</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Collection</type>
          <name>chunks</name>
          <desc>Handle for chunks collection</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Collection</type>
          <name>files</name>
          <desc>Handle for files collection</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Object</type>
          <name>readPreference</name>
          <desc>The read preference to use</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Object</type>
          <name>filter</name>
          <desc>The query to use to find the file document</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>sort</name>
              <desc>Optional sort for the file find query</desc>
            </option>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>skip</name>
              <desc>Optional skip for the file find query</desc>
            </option>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>start</name>
              <desc>Optional 0-based offset in bytes to start streaming from</desc>
            </option>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>end</name>
              <desc>Optional 0-based offset in bytes to stop streaming before</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketReadStream</type>
        <desc>GridFSBucketReadStream instance.</desc>
      </return>
      <signature>new GridFSBucketReadStream(chunks, files, readPreference, filter, options)</signature>
      <class>GridFSBucketReadStream</class>
      <desc>A readable stream that enables you to read buffers from GridFS.
Do not instantiate this class directly. Use openDownloadStream() instead.</desc>
    </method>
    <method>
      <name>GridStore</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Db</type>
          <name>db</name>
          <desc>A database instance to interact with.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>id</name>
          <desc>optional
optional unique id for this file</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>filename</name>
          <desc>optional
optional filename for this file, no unique constrain on the field</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>mode</name>
          <desc>set the mode for this file.</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number
|

string</type>
              <name>w</name>
              <desc>The write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>wtimeout</name>
              <desc>The write concern timeout.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>j</name>
              <desc>Specify a journal write concern.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>fsync</name>
              <desc>Specify a file sync write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>string</type>
              <name>root</name>
              <desc>Root collection to use. Defaults to {GridStore.DEFAULT_ROOT_COLLECTION}.</desc>
            </option>
            <option>
              <default>null</default>
              <type>string</type>
              <name>content_type</name>
              <desc>MIME type of the file. Defaults to {GridStore.DEFAULT_CONTENT_TYPE}.</desc>
            </option>
            <option>
              <default>261120</default>
              <type>number</type>
              <name>chunk_size</name>
              <desc>Size for the chunk. Defaults to {Chunk.DEFAULT_CHUNK_SIZE}.</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>metadata</name>
              <desc>Arbitrary data the user wants to store.</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>promiseLibrary</name>
              <desc>A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible</desc>
            </option>
            <option>
              <default>null</default>
              <type>ReadPreference
|

string</type>
              <name>readPreference</name>
              <desc>The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridStore</type>
        <desc>GridStore instance.</desc>
      </return>
      <signature>new GridStore(db, id, filename, mode, options)</signature>
      <class>GridStore</class>
      <desc>Create a new GridStore instance
Modes

&quot;r&quot; - read only. This is the default mode.
&quot;w&quot; - write in truncate mode. Existing data will be overwriten.</desc>
    </method>
    <method>
      <name>updateOne</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>updateDocument</name>
          <desc>update operations</desc>
        </param>
      </parameters>
      <return>
        <type>FindOperatorsUnordered</type>
        <desc/>
</return>
      <signature>updateOne(updateDocument)</signature>
      <class>FindOperatorsUnordered</class>
      <desc>Add a single update one document to the bulk operation</desc>
    </method>
    <method>
      <name>openDownloadStream</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>ObjectId</type>
          <name>id</name>
          <desc>The id of the file doc</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>start</name>
              <desc>Optional 0-based offset in bytes to start streaming from</desc>
            </option>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>end</name>
              <desc>Optional 0-based offset in bytes to stop streaming before</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketReadStream</type>
        <desc/>
</return>
      <signature>openDownloadStream(id, options)</signature>
      <class>GridFSBucket</class>
      <desc>Returns a readable stream (GridFSBucketReadStream) for streaming filedata from GridFS.</desc>
    </method>
    <method>
      <name>openDownloadStreamByName</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>String</type>
          <name>filename</name>
          <desc>The name of the file to stream</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>-1</default>
              <type>number</type>
              <name>revision</name>
              <desc>The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.</desc>
            </option>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>start</name>
              <desc>Optional 0-based offset in bytes to start streaming from</desc>
            </option>
            <option>
              <default>null</default>
              <type>Number</type>
              <name>end</name>
              <desc>Optional 0-based offset in bytes to stop streaming before</desc>
            </option>
          </options>
          <type>Object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketReadStream</type>
        <desc/>
</return>
      <signature>openDownloadStreamByName(filename, options)</signature>
      <class>GridFSBucket</class>
      <desc>Returns a readable stream (GridFSBucketReadStream) for streaming thefile with the given name from GridFS. If there are multiple files withthe same name, this will stream the most recent file with the given name(as determined by the uploadDate field). You can set the revisionoption to change this behavior.</desc>
    </method>
    <method>
      <name>abort</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>GridFSBucket~errorCallback</type>
          <name>callback</name>
          <desc>called when chunks are successfully removed or error occurred</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>no callback specified</desc>
      </return>
      <signature>abort(callback)</signature>
      <class>GridFSBucketWriteStream</class>
      <desc>Places this write stream into an aborted state (all future writes fail)and deletes all chunks that have already been written.</desc>
    </method>
    <method>
      <name>end</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Buffer</type>
          <name>chunk</name>
          <desc>Buffer to write</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>String</type>
          <name>encoding</name>
          <desc>Optional encoding for the buffer</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>function</type>
          <name>callback</name>
          <desc>Function to call when all files and chunks have been persisted to MongoDB</desc>
        </param>
      </parameters>
      <return/>
      <signature>end(chunk, encoding, callback)</signature>
      <class>GridFSBucketWriteStream</class>
      <desc>Tells the stream that no more data will be coming in. The stream willpersist the remaining data to MongoDB, write the files document, andthen emit a 'finish' event.</desc>
    </method>
    <method>
      <name>abort</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>GridFSBucket~errorCallback</type>
          <name>callback</name>
          <desc>optional
called when the cursor is successfully closed or an error occurred.</desc>
        </param>
      </parameters>
      <return/>
      <signature>abort(callback)</signature>
      <class>GridFSBucketReadStream</class>
      <desc>Marks this stream as aborted (will never push another data event)and kills the underlying cursor. Will emit the 'end' event, and thenthe 'close' event once the cursor is successfully killed.</desc>
    </method>
    <method>
      <name>end</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Number</type>
          <name>end</name>
          <desc>Offset in bytes to stop reading at</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketReadStream</type>
        <desc/>
</return>
      <signature>end(end)</signature>
      <class>GridFSBucketReadStream</class>
      <desc>Sets the 0-based offset in bytes to start streaming from. Throwsan error if this stream has entered flowing mode(e.g. if you've already called on('data'))</desc>
    </method>
    <method>
      <name>start</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Number</type>
          <name>start</name>
          <desc>Offset in bytes to start reading at</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketReadStream</type>
        <desc/>
</return>
      <signature>start(start)</signature>
      <class>GridFSBucketReadStream</class>
      <desc>Sets the 0-based offset in bytes to start streaming from. Throwsan error if this stream has entered flowing mode(e.g. if you've already called on('data'))</desc>
    </method>
    <method>
      <name>openUploadStream</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>filename</name>
          <desc>The value of the 'filename' key in the files doc</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number</type>
              <name>chunkSizeBytes</name>
              <desc>Optional overwrite this bucket's chunkSizeBytes for this file</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>metadata</name>
              <desc>Optional object to store in the file document's metadata field</desc>
            </option>
            <option>
              <default>null</default>
              <type>string</type>
              <name>contentType</name>
              <desc>Optional string to store in the file document's contentType field</desc>
            </option>
            <option>
              <default>null</default>
              <type>array</type>
              <name>aliases</name>
              <desc>Optional array of strings to store in the file document's aliases field</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketWriteStream</type>
        <desc/>
</return>
      <signature>openUploadStream(filename, options)</signature>
      <class>GridFSBucket</class>
      <desc>Returns a writable stream (GridFSBucketWriteStream) for writingbuffers to GridFS. The stream's 'id' property contains the resultingfile's id.</desc>
    </method>
    <method>
      <name>Int32</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>the number we want to represent as an int32.</desc>
        </param>
      </parameters>
      <return>
        <type>Int32</type>
        <desc/>
</return>
      <signature>new Int32(value)</signature>
      <class>Int32</class>
      <desc>A class representation of a BSON Int32 type.</desc>
    </method>
    <method>
      <name>write</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Buffer</type>
          <name>chunk</name>
          <desc>Buffer to write</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>String</type>
          <name>encoding</name>
          <desc>Optional encoding for the buffer</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>function</type>
          <name>callback</name>
          <desc>Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.</desc>
        </param>
      </parameters>
      <return>
        <type>Boolean</type>
        <desc>if this write required flushing a chunk to MongoDB. True otherwise.</desc>
      </return>
      <signature>write(chunk, encoding, callback)</signature>
      <class>GridFSBucketWriteStream</class>
      <desc>Write a buffer to the stream.</desc>
    </method>
    <method>
      <name>openUploadStreamWithId</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string
|

number
|

object</type>
          <name>id</name>
          <desc>A custom id used to identify the file</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>filename</name>
          <desc>The value of the 'filename' key in the files doc</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number</type>
              <name>chunkSizeBytes</name>
              <desc>Optional overwrite this bucket's chunkSizeBytes for this file</desc>
            </option>
            <option>
              <default>null</default>
              <type>object</type>
              <name>metadata</name>
              <desc>Optional object to store in the file document's metadata field</desc>
            </option>
            <option>
              <default>null</default>
              <type>string</type>
              <name>contentType</name>
              <desc>Optional string to store in the file document's contentType field</desc>
            </option>
            <option>
              <default>null</default>
              <type>array</type>
              <name>aliases</name>
              <desc>Optional array of strings to store in the file document's aliases field</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>GridFSBucketWriteStream</type>
        <desc/>
</return>
      <signature>openUploadStreamWithId(id, filename, options)</signature>
      <class>GridFSBucket</class>
      <desc>Returns a writable stream (GridFSBucketWriteStream) for writingbuffers to GridFS for a custom file id. The stream's 'id' property contains the resultingfile's id.</desc>
    </method>
    <method>
      <name>rename</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>ObjectId</type>
          <name>id</name>
          <desc>the id of the file to rename</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>String</type>
          <name>filename</name>
          <desc>new name for the file</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>GridFSBucket~errorCallback</type>
          <name>callback</name>
          <desc>optional</desc>
        </param>
      </parameters>
      <return/>
      <signature>rename(id, filename, callback)</signature>
      <class>GridFSBucket</class>
      <desc>Renames the file with the given _id to the given string</desc>
    </method>
    <method>
      <name>~errorCallback</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>MongoError</type>
          <name>error</name>
          <desc>An error instance representing any errors that occurred</desc>
        </param>
      </parameters>
      <return/>
      <signature>errorCallback(error)</signature>
      <class>GridFSBucket</class>
      <desc>Callback format for all GridFSBucket methods that can accept a callback.</desc>
    </method>
    <method>
      <name>Logger</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>className</name>
          <desc>The Class name associated with the logging instance</desc>
        </param>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>function</type>
              <name>logger</name>
              <desc>Custom logger function;</desc>
            </option>
            <option>
              <default>error</default>
              <type>string</type>
              <name>loggerLevel</name>
              <desc>Override default global log level.</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
      </parameters>
      <return>
        <type>Logger</type>
        <desc>Logger instance.</desc>
      </return>
      <signature>new Logger(className, options)</signature>
      <class>Logger</class>
      <desc>Creates a new Logger instance</desc>
    </method>
    <method>
      <name>Long</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>low</name>
          <desc>the low (signed) 32 bits of the Long.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>high</name>
          <desc>the high (signed) 32 bits of the Long.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc/>
</return>
      <signature>new Long(low, high)</signature>
      <class>Long</class>
      <desc>Defines a Long class for representing a 64-bit two's-complementinteger value, which faithfully simulates the behavior of a Java &quot;Long&quot;. Thisimplementation is derived from LongLib in GWT.
Constructs a 64-bit two's-complement integer, given its low and high 32-bitvalues as signed integers.  See the from* functions below for moreconvenient ways of constructing Longs.
The internal representation of a Long is the two given signed, 32-bit values.We use 32-bit pieces because these are the size of integers on whichJavascript performs bit-operations.  For operations like addition andmultiplication, we split each number into 16-bit pieces, which can easily bemultiplied within Javascript's floating-point representation without overflowor change in sign.
In the algorithms below, we frequently reduce the negative case to thepositive case by negating the input(s) and then post-processing the result.Note that we must ALWAYS check specially whether those values are MIN_VALUE(-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented asa positive number, it overflows back into a negative).  Not handling thiscase would often result in infinite recursion.</desc>
    </method>
    <method>
      <name>Logger.filter</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>type</name>
          <desc>The type of filter (currently only class)</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>Array.&lt;string&gt;</type>
          <name>values</name>
          <desc>The filters to apply</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>Logger.filter(type, values)</signature>
      <class>Logger</class>
      <desc>Set what classes to log.</desc>
    </method>
    <method>
      <name>Logger.setCurrentLogger</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>function</type>
          <name>logger</name>
          <desc>Logger function.</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>Logger.setCurrentLogger(logger)</signature>
      <class>Logger</class>
      <desc>Set the current logger function</desc>
    </method>
    <method>
      <name>Logger.setLevel</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>level</name>
          <desc>Set current log level (debug, info, error)</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>Logger.setLevel(level)</signature>
      <class>Logger</class>
      <desc>Set the current log level</desc>
    </method>
    <method>
      <name>debug</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>message</name>
          <desc>The message to log</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>object</name>
          <desc>additional meta data to log</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>debug(message, object)</signature>
      <class>Logger</class>
      <desc>Log a message at the debug level</desc>
    </method>
    <method>
      <name>error</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>message</name>
          <desc>The message to log</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>object</name>
          <desc>additional meta data to log</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>error(message, object)</signature>
      <class>Logger</class>
      <desc>Log a message at the error level</desc>
    </method>
    <method>
      <name>Long.fromBits</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>lowBits</name>
          <desc>the low 32-bits.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>highBits</name>
          <desc>the high 32-bits.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>corresponding Long value.</desc>
      </return>
      <signature>Long.fromBits(lowBits, highBits)</signature>
      <class>Long</class>
      <desc>Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.</desc>
    </method>
    <method>
      <name>Long.fromInt</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>the 32-bit integer in question.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>corresponding Long value.</desc>
      </return>
      <signature>Long.fromInt(value)</signature>
      <class>Long</class>
      <desc>Returns a Long representing the given (32-bit) integer value.</desc>
    </method>
    <method>
      <name>Long.fromNumber</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>the number in question.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>corresponding Long value.</desc>
      </return>
      <signature>Long.fromNumber(value)</signature>
      <class>Long</class>
      <desc>Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.</desc>
    </method>
    <method>
      <name>Long.fromString</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>str</name>
          <desc>the textual representation of the Long.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>opt_radix</name>
          <desc>the radix in which the text is written.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>corresponding Long value.</desc>
      </return>
      <signature>Long.fromString(str, opt_radix)</signature>
      <class>Long</class>
      <desc>Returns a Long representation of the given string, written using the given radix.</desc>
    </method>
    <method>
      <name>info</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>message</name>
          <desc>The message to log</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>object</name>
          <desc>additional meta data to log</desc>
        </param>
      </parameters>
      <return>
        <type>null</type>
        <desc/>
</return>
      <signature>info(message, object)</signature>
      <class>Logger</class>
      <desc>Log a message at the info level</desc>
    </method>
    <method>
      <name>add</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to add to this one.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>sum of this and the given Long.</desc>
      </return>
      <signature>add(other)</signature>
      <class>Long</class>
      <desc>Returns the sum of this and the given Long.</desc>
    </method>
    <method>
      <name>and</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>the Long with which to AND.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>bitwise-AND of this and the other.</desc>
      </return>
      <signature>and(other)</signature>
      <class>Long</class>
      <desc>Returns the bitwise-AND of this Long and the given one.</desc>
    </method>
    <method>
      <name>compare</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>if they are the same, 1 if the this is greater, and -1 if the given one is greater.</desc>
      </return>
      <signature>compare(other)</signature>
      <class>Long</class>
      <desc>Compares this Long with the given one.</desc>
    </method>
    <method>
      <name>div</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long by which to divide.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>Long divided by the given one.</desc>
      </return>
      <signature>div(other)</signature>
      <class>Long</class>
      <desc>Returns this Long divided by the given one.</desc>
    </method>
    <method>
      <name>equals</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Long equals the other</desc>
      </return>
      <signature>equals(other)</signature>
      <class>Long</class>
      <desc>Return whether this Long equals the other</desc>
    </method>
    <method>
      <name>greaterThan</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Long is greater than the other.</desc>
      </return>
      <signature>greaterThan(other)</signature>
      <class>Long</class>
      <desc>Return whether this Long is greater than the other.</desc>
    </method>
    <method>
      <name>MongoError</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Error
|

string
|

object</type>
          <name>message</name>
          <desc>The error message</desc>
        </param>
      </parameters>
      <return>
        <type>MongoError</type>
        <desc>MongoError instance</desc>
      </return>
      <signature>new MongoError(message)</signature>
      <class>MongoError</class>
      <desc>Creates a new MongoError</desc>
    </method>
    <method>
      <name>greaterThanOrEqual</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Long is greater than or equal to the other.</desc>
      </return>
      <signature>greaterThanOrEqual(other)</signature>
      <class>Long</class>
      <desc>Return whether this Long is greater than or equal to the other.</desc>
    </method>
    <method>
      <name>lessThan</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Long is less than the other.</desc>
      </return>
      <signature>lessThan(other)</signature>
      <class>Long</class>
      <desc>Return whether this Long is less than the other.</desc>
    </method>
    <method>
      <name>lessThanOrEqual</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Long is less than or equal to the other.</desc>
      </return>
      <signature>lessThanOrEqual(other)</signature>
      <class>Long</class>
      <desc>Return whether this Long is less than or equal to the other.</desc>
    </method>
    <method>
      <name>modulo</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long by which to mod.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>Long modulo the given one.</desc>
      </return>
      <signature>modulo(other)</signature>
      <class>Long</class>
      <desc>Returns this Long modulo the given one.</desc>
    </method>
    <method>
      <name>multiply</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to multiply with this.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>product of this and the other.</desc>
      </return>
      <signature>multiply(other)</signature>
      <class>Long</class>
      <desc>Returns the product of this and the given Long.</desc>
    </method>
    <method>
      <name>notEquals</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Long does not equal the other.</desc>
      </return>
      <signature>notEquals(other)</signature>
      <class>Long</class>
      <desc>Return whether this Long does not equal the other.</desc>
    </method>
    <method>
      <name>or</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>the Long with which to OR.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>bitwise-OR of this and the other.</desc>
      </return>
      <signature>or(other)</signature>
      <class>Long</class>
      <desc>Returns the bitwise-OR of this Long and the given one.</desc>
    </method>
    <method>
      <name>MongoParseError</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Error
|

string
|

object</type>
          <name>message</name>
          <desc>The error message</desc>
        </param>
      </parameters>
      <return>
        <type>MongoParseError</type>
        <desc>MongoNetworkError instance</desc>
      </return>
      <signature>new MongoParseError(message)</signature>
      <class>MongoParseError</class>
      <desc>An error used when attempting to parse a value (like a connection string)</desc>
    </method>
    <method>
      <name>shiftLeft</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>numBits</name>
          <desc>the number of bits by which to shift.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>shifted to the left by the given amount.</desc>
      </return>
      <signature>shiftLeft(numBits)</signature>
      <class>Long</class>
      <desc>Returns this Long with bits shifted to the left by the given amount.</desc>
    </method>
    <method>
      <name>shiftRight</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>numBits</name>
          <desc>the number of bits by which to shift.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>shifted to the right by the given amount.</desc>
      </return>
      <signature>shiftRight(numBits)</signature>
      <class>Long</class>
      <desc>Returns this Long with bits shifted to the right by the given amount.</desc>
    </method>
    <method>
      <name>shiftRightUnsigned</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>numBits</name>
          <desc>the number of bits by which to shift.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>shifted to the right by the given amount, with zeros placed into the new leading bits.</desc>
      </return>
      <signature>shiftRightUnsigned(numBits)</signature>
      <class>Long</class>
      <desc>Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.</desc>
    </method>
    <method>
      <name>subtract</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>Long to subtract from this.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>difference of this and the given Long.</desc>
      </return>
      <signature>subtract(other)</signature>
      <class>Long</class>
      <desc>Returns the difference of this and the given Long.</desc>
    </method>
    <method>
      <name>toString</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>opt_radix</name>
          <desc>optional
the radix in which the text should be written.</desc>
        </param>
      </parameters>
      <return>
        <type>string</type>
        <desc>textual representation of this value.</desc>
      </return>
      <signature>toString(opt_radix)</signature>
      <class>Long</class>
      <desc>Return the String value.</desc>
    </method>
    <method>
      <name>xor</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Long</type>
          <name>other</name>
          <desc>the Long with which to XOR.</desc>
        </param>
      </parameters>
      <return>
        <type>Long</type>
        <desc>bitwise-XOR of this and the other.</desc>
      </return>
      <signature>xor(other)</signature>
      <class>Long</class>
      <desc>Returns the bitwise-XOR of this Long and the given one.</desc>
    </method>
    <method>
      <name>ObjectID</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string
|

number</type>
          <name>id</name>
          <desc>Can be a 24 byte hex string, 12 byte binary string or a Number.</desc>
        </param>
      </parameters>
      <return>
        <type>ObjectID</type>
        <desc>of ObjectID.</desc>
      </return>
      <signature>new ObjectID(id)</signature>
      <class>ObjectID</class>
      <desc>Create a new ObjectID instance</desc>
    </method>
    <method>
      <name>execute</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number
|

string</type>
              <name>w</name>
              <desc>The write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>wtimeout</name>
              <desc>The write concern timeout.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>j</name>
              <desc>Specify a journal write concern.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>fsync</name>
              <desc>Specify a file sync write concern.</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>OrderedBulkOperation~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>execute(options, callback)</signature>
      <class>OrderedBulkOperation</class>
      <desc>Execute the ordered bulk operation</desc>
    </method>
    <method>
      <name>ObjectID.createFromHexString</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>hexString</name>
          <desc>create a ObjectID from a passed in 24 byte hexstring.</desc>
        </param>
      </parameters>
      <return>
        <type>ObjectID</type>
        <desc>the created ObjectID</desc>
      </return>
      <signature>ObjectID.createFromHexString(hexString)</signature>
      <class>ObjectID</class>
      <desc>Creates an ObjectID from a hex string representation of an ObjectID.</desc>
    </method>
    <method>
      <name>ObjectID.createFromTime</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>time</name>
          <desc>an integer number representing a number of seconds.</desc>
        </param>
      </parameters>
      <return>
        <type>ObjectID</type>
        <desc>the created ObjectID</desc>
      </return>
      <signature>ObjectID.createFromTime(time)</signature>
      <class>ObjectID</class>
      <desc>Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.</desc>
    </method>
    <method>
      <name>equals</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>otherID</name>
          <desc>ObjectID instance to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>result of comparing two ObjectID's</desc>
      </return>
      <signature>equals(otherID)</signature>
      <class>ObjectID</class>
      <desc>Compares the equality of this ObjectID with otherID.</desc>
    </method>
    <method>
      <name>generate</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>time</name>
          <desc>optional
optional parameter allowing to pass in a second based timestamp.</desc>
        </param>
      </parameters>
      <return>
        <type>Buffer</type>
        <desc>the 12 byte id buffer string.</desc>
      </return>
      <signature>generate(time)</signature>
      <class>ObjectID</class>
      <desc>Generate a 12 byte id buffer used in ObjectID's</desc>
    </method>
    <method>
      <name>find</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>selector</name>
          <desc>The selector for the bulk operation.</desc>
        </param>
      </parameters>
      <return>
        <type>FindOperatorsOrdered</type>
        <desc/>
</return>
      <signature>find(selector)</signature>
      <class>OrderedBulkOperation</class>
      <desc>Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne</desc>
    </method>
    <method>
      <name>insert</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>doc</name>
          <desc>the document to insert</desc>
        </param>
      </parameters>
      <return>
        <type>OrderedBulkOperation</type>
        <desc/>
</return>
      <signature>insert(doc)</signature>
      <class>OrderedBulkOperation</class>
      <desc>Add a single insert document to the bulk operation</desc>
    </method>
    <method>
      <name>~resultCallback</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>MongoError</type>
          <name>error</name>
          <desc>An error instance representing the error during the execution.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>BulkWriteResult</type>
          <name>result</name>
          <desc>The bulk write result.</desc>
        </param>
      </parameters>
      <return/>
      <signature>resultCallback(error, result)</signature>
      <class>OrderedBulkOperation</class>
      <desc>The callback format for results</desc>
    </method>
    <method>
      <name>Symbol</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>value</name>
          <desc>the string representing the symbol.</desc>
        </param>
      </parameters>
      <return>
        <type>Symbol</type>
        <desc/>
</return>
      <signature>new Symbol(value)</signature>
      <class>Symbol</class>
      <desc>A class representation of the BSON Symbol type.</desc>
    </method>
    <method>
      <name>Timestamp</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>low</name>
          <desc>the low (signed) 32 bits of the Timestamp.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>high</name>
          <desc>the high (signed) 32 bits of the Timestamp.</desc>
        </param>
      </parameters>
      <return/>
      <signature>new Timestamp(low, high)</signature>
      <class>Timestamp</class>
      <desc>This type is for INTERNAL use in MongoDB only and should not be used in applications.The appropriate corresponding type is the JavaScript Date type.
Defines a Timestamp class for representing a 64-bit two's-complementinteger value, which faithfully simulates the behavior of a Java &quot;Timestamp&quot;. Thisimplementation is derived from TimestampLib in GWT.
Constructs a 64-bit two's-complement integer, given its low and high 32-bitvalues as signed integers.  See the from* functions below for moreconvenient ways of constructing Timestamps.
The internal representation of a Timestamp is the two given signed, 32-bit values.We use 32-bit pieces because these are the size of integers on whichJavascript performs bit-operations.  For operations like addition andmultiplication, we split each number into 16-bit pieces, which can easily bemultiplied within Javascript's floating-point representation without overflowor change in sign.
In the algorithms below, we frequently reduce the negative case to thepositive case by negating the input(s) and then post-processing the result.Note that we must ALWAYS check specially whether those values are MIN_VALUE(-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented asa positive number, it overflows back into a negative).  Not handling thiscase would often result in infinite recursion.</desc>
    </method>
    <method>
      <name>Timestamp.fromBits</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>lowBits</name>
          <desc>the low 32-bits.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>highBits</name>
          <desc>the high 32-bits.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>corresponding Timestamp value.</desc>
      </return>
      <signature>Timestamp.fromBits(lowBits, highBits)</signature>
      <class>Timestamp</class>
      <desc>Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.</desc>
    </method>
    <method>
      <name>Timestamp.fromInt</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>the 32-bit integer in question.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>corresponding Timestamp value.</desc>
      </return>
      <signature>Timestamp.fromInt(value)</signature>
      <class>Timestamp</class>
      <desc>Returns a Timestamp representing the given (32-bit) integer value.</desc>
    </method>
    <method>
      <name>Timestamp.fromNumber</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>value</name>
          <desc>the number in question.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>corresponding Timestamp value.</desc>
      </return>
      <signature>Timestamp.fromNumber(value)</signature>
      <class>Timestamp</class>
      <desc>Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.</desc>
    </method>
    <method>
      <name>execute</name>
      <parameters>
        <param>
          <optional>true</optional>
          <options>
            <option>
              <default>null</default>
              <type>number
|

string</type>
              <name>w</name>
              <desc>The write concern.</desc>
            </option>
            <option>
              <default>null</default>
              <type>number</type>
              <name>wtimeout</name>
              <desc>The write concern timeout.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>j</name>
              <desc>Specify a journal write concern.</desc>
            </option>
            <option>
              <default>false</default>
              <type>boolean</type>
              <name>fsync</name>
              <desc>Specify a file sync write concern.</desc>
            </option>
          </options>
          <type>object</type>
          <name>options</name>
          <desc>Optional settings</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>UnorderedBulkOperation~resultCallback</type>
          <name>callback</name>
          <desc>optional
The result callback</desc>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Promise if no callback passed</desc>
      </return>
      <signature>execute(options, callback)</signature>
      <class>UnorderedBulkOperation</class>
      <desc>Execute the ordered bulk operation</desc>
    </method>
    <method>
      <name>Timestamp.fromString</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>string</type>
          <name>str</name>
          <desc>the textual representation of the Timestamp.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>opt_radix</name>
          <desc>the radix in which the text is written.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>corresponding Timestamp value.</desc>
      </return>
      <signature>Timestamp.fromString(str, opt_radix)</signature>
      <class>Timestamp</class>
      <desc>Returns a Timestamp representation of the given string, written using the given radix.</desc>
    </method>
    <method>
      <name>add</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to add to this one.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>sum of this and the given Timestamp.</desc>
      </return>
      <signature>add(other)</signature>
      <class>Timestamp</class>
      <desc>Returns the sum of this and the given Timestamp.</desc>
    </method>
    <method>
      <name>and</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>the Timestamp with which to AND.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>bitwise-AND of this and the other.</desc>
      </return>
      <signature>and(other)</signature>
      <class>Timestamp</class>
      <desc>Returns the bitwise-AND of this Timestamp and the given one.</desc>
    </method>
    <method>
      <name>compare</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>if they are the same, 1 if the this is greater, and -1 if the given one is greater.</desc>
      </return>
      <signature>compare(other)</signature>
      <class>Timestamp</class>
      <desc>Compares this Timestamp with the given one.</desc>
    </method>
    <method>
      <name>div</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp by which to divide.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>Timestamp divided by the given one.</desc>
      </return>
      <signature>div(other)</signature>
      <class>Timestamp</class>
      <desc>Returns this Timestamp divided by the given one.</desc>
    </method>
    <method>
      <name>find</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>selector</name>
          <desc>The selector for the bulk operation.</desc>
        </param>
      </parameters>
      <return>
        <type>FindOperatorsUnordered</type>
        <desc/>
</return>
      <signature>find(selector)</signature>
      <class>UnorderedBulkOperation</class>
      <desc>Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne</desc>
    </method>
    <method>
      <name>insert</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>object</type>
          <name>document</name>
          <desc>the document to insert</desc>
        </param>
      </parameters>
      <return>
        <type>UnorderedBulkOperation</type>
        <desc/>
</return>
      <signature>insert(document)</signature>
      <class>UnorderedBulkOperation</class>
      <desc>Add a single insert document to the bulk operation</desc>
    </method>
    <method>
      <name>~resultCallback</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>MongoError</type>
          <name>error</name>
          <desc>An error instance representing the error during the execution.</desc>
        </param>
        <param>
          <optional>false</optional>
          <options/>
          <type>BulkWriteResult</type>
          <name>result</name>
          <desc>The bulk write result.</desc>
        </param>
      </parameters>
      <return/>
      <signature>resultCallback(error, result)</signature>
      <class>UnorderedBulkOperation</class>
      <desc>The callback format for results</desc>
    </method>
    <method>
      <name>equals</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Timestamp equals the other</desc>
      </return>
      <signature>equals(other)</signature>
      <class>Timestamp</class>
      <desc>Return whether this Timestamp equals the other</desc>
    </method>
    <method>
      <name>greaterThan</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Timestamp is greater than the other.</desc>
      </return>
      <signature>greaterThan(other)</signature>
      <class>Timestamp</class>
      <desc>Return whether this Timestamp is greater than the other.</desc>
    </method>
    <method>
      <name>greaterThanOrEqual</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Timestamp is greater than or equal to the other.</desc>
      </return>
      <signature>greaterThanOrEqual(other)</signature>
      <class>Timestamp</class>
      <desc>Return whether this Timestamp is greater than or equal to the other.</desc>
    </method>
    <method>
      <name>lessThan</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Timestamp is less than the other.</desc>
      </return>
      <signature>lessThan(other)</signature>
      <class>Timestamp</class>
      <desc>Return whether this Timestamp is less than the other.</desc>
    </method>
    <method>
      <name>lessThanOrEqual</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Timestamp is less than or equal to the other.</desc>
      </return>
      <signature>lessThanOrEqual(other)</signature>
      <class>Timestamp</class>
      <desc>Return whether this Timestamp is less than or equal to the other.</desc>
    </method>
    <method>
      <name>modulo</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp by which to mod.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>Timestamp modulo the given one.</desc>
      </return>
      <signature>modulo(other)</signature>
      <class>Timestamp</class>
      <desc>Returns this Timestamp modulo the given one.</desc>
    </method>
    <method>
      <name>multiply</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to multiply with this.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>product of this and the other.</desc>
      </return>
      <signature>multiply(other)</signature>
      <class>Timestamp</class>
      <desc>Returns the product of this and the given Timestamp.</desc>
    </method>
    <method>
      <name>notEquals</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to compare against.</desc>
        </param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>this Timestamp does not equal the other.</desc>
      </return>
      <signature>notEquals(other)</signature>
      <class>Timestamp</class>
      <desc>Return whether this Timestamp does not equal the other.</desc>
    </method>
    <method>
      <name>or</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>the Timestamp with which to OR.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>bitwise-OR of this and the other.</desc>
      </return>
      <signature>or(other)</signature>
      <class>Timestamp</class>
      <desc>Returns the bitwise-OR of this Timestamp and the given one.</desc>
    </method>
    <method>
      <name>shiftLeft</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>numBits</name>
          <desc>the number of bits by which to shift.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>shifted to the left by the given amount.</desc>
      </return>
      <signature>shiftLeft(numBits)</signature>
      <class>Timestamp</class>
      <desc>Returns this Timestamp with bits shifted to the left by the given amount.</desc>
    </method>
    <method>
      <name>shiftRight</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>numBits</name>
          <desc>the number of bits by which to shift.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>shifted to the right by the given amount.</desc>
      </return>
      <signature>shiftRight(numBits)</signature>
      <class>Timestamp</class>
      <desc>Returns this Timestamp with bits shifted to the right by the given amount.</desc>
    </method>
    <method>
      <name>shiftRightUnsigned</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>numBits</name>
          <desc>the number of bits by which to shift.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>shifted to the right by the given amount, with zeros placed into the new leading bits.</desc>
      </return>
      <signature>shiftRightUnsigned(numBits)</signature>
      <class>Timestamp</class>
      <desc>Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.</desc>
    </method>
    <method>
      <name>subtract</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>Timestamp to subtract from this.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>difference of this and the given Timestamp.</desc>
      </return>
      <signature>subtract(other)</signature>
      <class>Timestamp</class>
      <desc>Returns the difference of this and the given Timestamp.</desc>
    </method>
    <method>
      <name>toString</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>number</type>
          <name>opt_radix</name>
          <desc>optional
the radix in which the text should be written.</desc>
        </param>
      </parameters>
      <return>
        <type>string</type>
        <desc>textual representation of this value.</desc>
      </return>
      <signature>toString(opt_radix)</signature>
      <class>Timestamp</class>
      <desc>Return the String value.</desc>
    </method>
    <method>
      <name>xor</name>
      <parameters>
        <param>
          <optional>false</optional>
          <options/>
          <type>Timestamp</type>
          <name>other</name>
          <desc>the Timestamp with which to XOR.</desc>
        </param>
      </parameters>
      <return>
        <type>Timestamp</type>
        <desc>bitwise-XOR of this and the other.</desc>
      </return>
      <signature>xor(other)</signature>
      <class>Timestamp</class>
      <desc>Returns the bitwise-XOR of this Timestamp and the given one.</desc>
    </method>
  </methods>
</api>