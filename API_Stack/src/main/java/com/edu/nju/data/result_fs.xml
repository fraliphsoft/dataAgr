<?xml version="1.0" encoding="UTF-8"?>
<api xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="result_xs.xsd">
  <name>nodejs fs</name>
  <source>https://nodejs.org/api/fs.json</source>
  <methods>
    <method>
      <class>FileHandle</class>
      <name>appendFile</name>
      <signature>filehandle.appendFile(data, options)</signature>
      <desc>&lt;p&gt;Asynchronously append data to this file, creating the file if it does not yet
exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer.html#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; will be
resolved with no arguments upon success.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FileHandle&lt;/code&gt; must have been opened for appending.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>data</name>
          <type>string|Buffer</type>
          <desc>`data` {string|Buffer} </desc>
          <optional>false</optional>
          <options/>
        </param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'a'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>chmod</name>
      <signature>filehandle.chmod(mode)</signature>
      <desc>&lt;p&gt;Modifies the permissions on the file. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no
arguments upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>chown</name>
      <signature>filehandle.chown(uid, gid)</signature>
      <desc>&lt;p&gt;Changes the ownership of the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments
upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>close</name>
      <signature>filehandle.close()</signature>
      <desc>&lt;p&gt;Closes the file descriptor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fsPromises = require(&amp;#39;fs&amp;#39;).promises;
async function openAndClose() {
  let filehandle;
  try {
    filehandle = await fsPromises.open(&amp;#39;thefile.txt&amp;#39;, &amp;#39;r&amp;#39;);
  } finally {
    if (filehandle !== undefined)
      await filehandle.close();
  }
}
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters/>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} A `Promise` that will be resolved once the underlying file descriptor is closed, or will be rejected if an error occurs while closing. </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>datasync</name>
      <signature>filehandle.datasync()</signature>
      <desc>&lt;p&gt;Asynchronous fdatasync(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon
success.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>read</name>
      <signature>filehandle.read(buffer, offset, length, position)</signature>
      <desc>&lt;p&gt;Read data from the file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;buffer&lt;/code&gt; is the buffer that the data will be written to.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt; is the offset in the buffer to start writing at.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;length&lt;/code&gt; is an integer specifying the number of bytes to read.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; is an argument specifying where to begin reading from in the file.
If &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, data will be read from the current file position,
and the file position will be updated.
If &lt;code&gt;position&lt;/code&gt; is an integer, the file position will remain unchanged.&lt;/p&gt;
&lt;p&gt;Following successful read, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an object with a
&lt;code&gt;bytesRead&lt;/code&gt; property specifying the number of bytes read, and a &lt;code&gt;buffer&lt;/code&gt;
property that is a reference to the passed in &lt;code&gt;buffer&lt;/code&gt; argument.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>readFile</name>
      <signature>filehandle.readFile(options)</signature>
      <desc>&lt;p&gt;Asynchronously reads the entire contents of a file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; is resolved with the contents of the file. If no encoding is
specified (using &lt;code&gt;options.encoding&lt;/code&gt;), the data is returned as a &lt;code&gt;Buffer&lt;/code&gt;
object. Otherwise, the data will be a string.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;path&lt;/code&gt; is a directory, the behavior of &lt;code&gt;fsPromises.readFile()&lt;/code&gt; is
platform-specific. On macOS, Linux, and Windows, the promise will be rejected
with an error. On FreeBSD, a representation of the directory&amp;#39;s contents will be
returned.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FileHandle&lt;/code&gt; has to support reading.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`null`</default>
              <desc>`encoding` {string|null} **Default:** `null` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'r'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>stat</name>
      <signature>filehandle.stat()</signature>
      <desc>&lt;p&gt;Retrieves the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; for the file.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>sync</name>
      <signature>filehandle.sync()</signature>
      <desc>&lt;p&gt;Asynchronous fsync(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon
success.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>truncate</name>
      <signature>filehandle.truncate(len)</signature>
      <desc>&lt;p&gt;Truncates the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.&lt;/p&gt;
&lt;p&gt;If the file was larger than &lt;code&gt;len&lt;/code&gt; bytes, only the first &lt;code&gt;len&lt;/code&gt; bytes will be
retained in the file.&lt;/p&gt;
&lt;p&gt;For example, the following program retains only the first four bytes of the
file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);
const fsPromises = fs.promises;

console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
// Prints: Node.js

async function doTruncate() {
  const fd = await fsPromises.open(&amp;#39;temp.txt&amp;#39;, &amp;#39;r+&amp;#39;);
  await fsPromises.ftruncate(fd, 4);
  console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));  // Prints: Node
}

doTruncate().catch(console.error);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the file previously was shorter than &lt;code&gt;len&lt;/code&gt; bytes, it is extended, and the
extended part is filled with null bytes (&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;). For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);
const fsPromises = fs.promises;

console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
// Prints: Node.js

async function doTruncate() {
  const fd = await fsPromises.open(&amp;#39;temp.txt&amp;#39;, &amp;#39;r+&amp;#39;);
  await fsPromises.ftruncate(fd, 10);
  console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));  // Prints Node.js\0\0\0
}

doTruncate().catch(console.error);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last three bytes are null bytes (&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;), to compensate the over-truncation.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>utimes</name>
      <signature>filehandle.utimes(atime, mtime)</signature>
      <desc>&lt;p&gt;Change the file system timestamps of the object referenced by the &lt;code&gt;FileHandle&lt;/code&gt;
then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.&lt;/p&gt;
&lt;p&gt;This function does not work on AIX versions before 7.1, it will resolve the
&lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>atime</name>
          <type>number|string|Date</type>
          <desc>`atime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>number|string|Date</type>
          <desc>`mtime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>write</name>
      <signature>filehandle.write(buffer, offset, length, position)</signature>
      <desc>&lt;p&gt;Write &lt;code&gt;buffer&lt;/code&gt; to the file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property
identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing
a reference to the &lt;code&gt;buffer&lt;/code&gt; written.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt; determines the part of the buffer to be written, and &lt;code&gt;length&lt;/code&gt; is
an integer specifying the number of bytes to write.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; refers to the offset from the beginning of the file where this data
should be written. If &lt;code&gt;typeof position !== &amp;#39;number&amp;#39;&lt;/code&gt;, the data will be written
at the current position. See pwrite(2).&lt;/p&gt;
&lt;p&gt;It is unsafe to use &lt;code&gt;filehandle.write()&lt;/code&gt; multiple times on the same file
without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected). For this
scenario, &lt;code&gt;fs.createWriteStream&lt;/code&gt; is strongly recommended.&lt;/p&gt;
&lt;p&gt;On Linux, positional writes do not work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>FileHandle</class>
      <name>writeFile</name>
      <signature>filehandle.writeFile(data, options)</signature>
      <desc>&lt;p&gt;Asynchronously writes data to a file, replacing the file if it already exists.
&lt;code&gt;data&lt;/code&gt; can be a string or a buffer. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no
arguments upon success.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FileHandle&lt;/code&gt; has to support writing.&lt;/p&gt;
&lt;p&gt;It is unsafe to use &lt;code&gt;filehandle.writeFile()&lt;/code&gt; multiple times on the same file
without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>data</name>
          <type>string|Buffer|Uint8Array</type>
          <desc>`data` {string|Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'w'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>access</name>
      <signature>fsPromises.access(path[, mode])</signature>
      <desc>&lt;p&gt;Tests a user&amp;#39;s permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;.
The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility
checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values
of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of
two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If the accessibility check is successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with no
value. If any of the accessibility checks fail, the &lt;code&gt;Promise&lt;/code&gt; is rejected
with an &lt;code&gt;Error&lt;/code&gt; object. The following example checks if the file
&lt;code&gt;/etc/passwd&lt;/code&gt; can be read and written by the current process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);
const fsPromises = fs.promises;

fsPromises.access(&amp;#39;/etc/passwd&amp;#39;, fs.constants.R_OK | fs.constants.W_OK)
  .then(() =&amp;gt; console.log(&amp;#39;can access&amp;#39;))
  .catch(() =&amp;gt; console.error(&amp;#39;cannot access&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;fsPromises.access()&lt;/code&gt; to check for the accessibility of a file before
calling &lt;code&gt;fsPromises.open()&lt;/code&gt; is not recommended. Doing so introduces a race
condition, since other processes may change the file&amp;#39;s state between the two
calls. Instead, user code should open/read/write the file directly and handle
the error raised if the file is not accessible.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `fs.constants.F_OK` </desc>
          <default>`fs.constants.F_OK`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>appendFile</name>
      <signature>fsPromises.appendFile(path, data[, options])</signature>
      <desc>&lt;p&gt;Asynchronously append data to a file, creating the file if it does not yet
exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer.html#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Promise&lt;/code&gt; will be
resolved with no arguments upon success.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; may be specified as a &lt;code&gt;FileHandle&lt;/code&gt; that has been opened
for appending (using &lt;code&gt;fsPromises.open()&lt;/code&gt;).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL|FileHandle</type>
          <desc>`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>data</name>
          <type>string|Buffer</type>
          <desc>`data` {string|Buffer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'a'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>chmod</name>
      <signature>fsPromises.chmod(path, mode)</signature>
      <desc>&lt;p&gt;Changes the permissions of a file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no
arguments upon succces.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>chown</name>
      <signature>fsPromises.chown(path, uid, gid)</signature>
      <desc>&lt;p&gt;Changes the ownership of a file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments
upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>copyFile</name>
      <signature>fsPromises.copyFile(src, dest[, flags])</signature>
      <desc>&lt;p&gt;Asynchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it
already exists. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no arguments upon success.&lt;/p&gt;
&lt;p&gt;Node.js makes no guarantees about the atomicity of the copy operation. If an
error occurs after the destination file has been opened for writing, Node.js
will attempt to remove the destination.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flags&lt;/code&gt; is an optional integer that specifies the behavior
of the copy operation. It is possible to create a mask consisting of the bitwise
OR of two or more values (e.g.
&lt;code&gt;fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_EXCL&lt;/code&gt; - The copy operation will fail if &lt;code&gt;dest&lt;/code&gt; already
exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_FICLONE&lt;/code&gt; - The copy operation will attempt to create a
copy-on-write reflink. If the platform does not support copy-on-write, then a
fallback copy mechanism is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_FICLONE_FORCE&lt;/code&gt; - The copy operation will attempt to
create a copy-on-write reflink. If the platform does not support copy-on-write,
then the operation will fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fsPromises = require(&amp;#39;fs&amp;#39;).promises;

// destination.txt will be created or overwritten by default.
fsPromises.copyFile(&amp;#39;source.txt&amp;#39;, &amp;#39;destination.txt&amp;#39;)
  .then(() =&amp;gt; console.log(&amp;#39;source.txt was copied to destination.txt&amp;#39;))
  .catch(() =&amp;gt; console.log(&amp;#39;The file could not be copied&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the third argument is a number, then it specifies &lt;code&gt;flags&lt;/code&gt;, as shown in the
following example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);
const fsPromises = fs.promises;
const { COPYFILE_EXCL } = fs.constants;

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
fsPromises.copyFile(&amp;#39;source.txt&amp;#39;, &amp;#39;destination.txt&amp;#39;, COPYFILE_EXCL)
  .then(() =&amp;gt; console.log(&amp;#39;source.txt was copied to destination.txt&amp;#39;))
  .catch(() =&amp;gt; console.log(&amp;#39;The file could not be copied&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>src</name>
          <type>string|Buffer|URL</type>
          <desc>`src` {string|Buffer|URL} source filename to copy </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>dest</name>
          <type>string|Buffer|URL</type>
          <desc>`dest` {string|Buffer|URL} destination filename of the copy operation </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>flags</name>
          <type>number</type>
          <desc>`flags` {number} modifiers for copy operation. **Default:** `0`. </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>fchmod</name>
      <signature>fsPromises.fchmod(filehandle, mode)</signature>
      <desc>&lt;p&gt;Asynchronous fchmod(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon
success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>fchown</name>
      <signature>fsPromises.fchown(filehandle, uid, gid)</signature>
      <desc>&lt;p&gt;Changes the ownership of the file represented by &lt;code&gt;filehandle&lt;/code&gt; then resolves
the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>fdatasync</name>
      <signature>fsPromises.fdatasync(filehandle)</signature>
      <desc>&lt;p&gt;Asynchronous fdatasync(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon
success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>fstat</name>
      <signature>fsPromises.fstat(filehandle)</signature>
      <desc>&lt;p&gt;Retrieves the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; for the given &lt;code&gt;filehandle&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>fsync</name>
      <signature>fsPromises.fsync(filehandle)</signature>
      <desc>&lt;p&gt;Asynchronous fsync(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon
success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>ftruncate</name>
      <signature>fsPromises.ftruncate(filehandle[, len])</signature>
      <desc>&lt;p&gt;Truncates the file represented by &lt;code&gt;filehandle&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt;
with no arguments upon success.&lt;/p&gt;
&lt;p&gt;If the file referred to by the &lt;code&gt;FileHandle&lt;/code&gt; was larger than &lt;code&gt;len&lt;/code&gt; bytes, only
the first &lt;code&gt;len&lt;/code&gt; bytes will be retained in the file.&lt;/p&gt;
&lt;p&gt;For example, the following program retains only the first four bytes of the
file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
// Prints: Node.js

async function doTruncate() {
  const fd = await fsPromises.open(&amp;#39;temp.txt&amp;#39;, &amp;#39;r+&amp;#39;);
  await fsPromises.ftruncate(fd, 4);
  console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));  // Prints: Node
}

doTruncate().catch(console.error);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the file previously was shorter than &lt;code&gt;len&lt;/code&gt; bytes, it is extended, and the
extended part is filled with null bytes (&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;). For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
// Prints: Node.js

async function doTruncate() {
  const fd = await fsPromises.open(&amp;#39;temp.txt&amp;#39;, &amp;#39;r+&amp;#39;);
  await fsPromises.ftruncate(fd, 10);
  console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));  // Prints Node.js\0\0\0
}

doTruncate().catch(console.error);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last three bytes are null bytes (&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;), to compensate the over-truncation.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>futimes</name>
      <signature>fsPromises.futimes(filehandle, atime, mtime)</signature>
      <desc>&lt;p&gt;Change the file system timestamps of the object referenced by the supplied
&lt;code&gt;FileHandle&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.&lt;/p&gt;
&lt;p&gt;This function does not work on AIX versions before 7.1, it will resolve the
&lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>atime</name>
          <type>number|string|Date</type>
          <desc>`atime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>number|string|Date</type>
          <desc>`mtime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>lchmod</name>
      <signature>fsPromises.lchmod(path, mode)</signature>
      <desc>&lt;p&gt;Changes the permissions on a symbolic link then resolves the &lt;code&gt;Promise&lt;/code&gt; with
no arguments upon success. This method is only implemented on macOS.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>lchown</name>
      <signature>fsPromises.lchown(path, uid, gid)</signature>
      <desc>&lt;p&gt;Changes the ownership on a symbolic link then resolves the &lt;code&gt;Promise&lt;/code&gt; with
no arguments upon success. This method is only implemented on macOS.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>link</name>
      <signature>fsPromises.link(existingPath, newPath)</signature>
      <desc>&lt;p&gt;Asynchronous link(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>existingPath</name>
          <type>string|Buffer|URL</type>
          <desc>`existingPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>newPath</name>
          <type>string|Buffer|URL</type>
          <desc>`newPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>lstat</name>
      <signature>fsPromises.lstat(path)</signature>
      <desc>&lt;p&gt;Asynchronous lstat(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object
for the given symbolic link &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>mkdir</name>
      <signature>fsPromises.mkdir(path[, mode])</signature>
      <desc>&lt;p&gt;Asynchronously creates a directory then resolves the &lt;code&gt;Promise&lt;/code&gt; with no
arguments upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `0o777` </desc>
          <default>`0o777`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>mkdtemp</name>
      <signature>fsPromises.mkdtemp(prefix[, options])</signature>
      <desc>&lt;p&gt;Creates a unique temporary directory and resolves the &lt;code&gt;Promise&lt;/code&gt; with the created
folder path. A unique directory name is generated by appending six random
characters to the end of the provided &lt;code&gt;prefix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fsPromises.mkdtemp(path.join(os.tmpdir(), &amp;#39;foo-&amp;#39;))
  .catch(console.error);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; method will append the six randomly selected
characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory
&lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt; &lt;code&gt;/tmp&lt;/code&gt;, the
&lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator
(&lt;code&gt;require(&amp;#39;path&amp;#39;).sep&lt;/code&gt;).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>prefix</name>
          <type>string</type>
          <desc>`prefix` {string} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>open</name>
      <signature>fsPromises.open(path, flags[, mode])</signature>
      <desc>&lt;p&gt;Asynchronous file open that returns a &lt;code&gt;Promise&lt;/code&gt; that, when resolved, yields a
&lt;code&gt;FileHandle&lt;/code&gt; object. See open(2).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; sets the file mode (permission and sticky bits), but only if the file was
created.&lt;/p&gt;
&lt;p&gt;Some characters (&lt;code&gt;&amp;lt; &amp;gt; : &amp;quot; / \ | ? *&lt;/code&gt;) are reserved under Windows as documented
by &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx&quot;&gt;Naming Files, Paths, and Namespaces&lt;/a&gt;. Under NTFS, if the filename contains
a colon, Node.js will open a file system stream, as described by
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx&quot;&gt;this MSDN page&lt;/a&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>flags</name>
          <type>string|number</type>
          <desc>`flags` {string|number} See [support of file system `flags`][]. </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `0o666` (readable and writable) </desc>
          <default>`0o666` (readable and writable)</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>read</name>
      <signature>fsPromises.read(filehandle, buffer, offset, length, position)</signature>
      <desc>&lt;p&gt;Read data from the file specified by &lt;code&gt;filehandle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;buffer&lt;/code&gt; is the buffer that the data will be written to.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt; is the offset in the buffer to start writing at.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;length&lt;/code&gt; is an integer specifying the number of bytes to read.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; is an argument specifying where to begin reading from in the file.
If &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, data will be read from the current file position,
and the file position will be updated.
If &lt;code&gt;position&lt;/code&gt; is an integer, the file position will remain unchanged.&lt;/p&gt;
&lt;p&gt;Following successful read, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an object with a
&lt;code&gt;bytesRead&lt;/code&gt; property specifying the number of bytes read, and a &lt;code&gt;buffer&lt;/code&gt;
property that is a reference to the passed in &lt;code&gt;buffer&lt;/code&gt; argument.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>readdir</name>
      <signature>fsPromises.readdir(path[, options])</signature>
      <desc>&lt;p&gt;Reads the contents of a directory then resolves the &lt;code&gt;Promise&lt;/code&gt; with an array
of the names of the files in the directory excludiing &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;..&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the filenames. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;, the filenames returned
will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>readFile</name>
      <signature>fsPromises.readFile(path[, options])</signature>
      <desc>&lt;p&gt;Asynchronously reads the entire contents of a file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; is resolved with the contents of the file. If no encoding is
specified (using &lt;code&gt;options.encoding&lt;/code&gt;), the data is returned as a &lt;code&gt;Buffer&lt;/code&gt;
object. Otherwise, the data will be a string.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;path&lt;/code&gt; is a directory, the behavior of &lt;code&gt;fsPromises.readFile()&lt;/code&gt; is
platform-specific. On macOS, Linux, and Windows, the promise will be rejected
with an error. On FreeBSD, a representation of the directory&amp;#39;s contents will be
returned.&lt;/p&gt;
&lt;p&gt;Any specified &lt;code&gt;FileHandle&lt;/code&gt; has to support reading.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL|FileHandle</type>
          <desc>`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`null`</default>
              <desc>`encoding` {string|null} **Default:** `null` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'r'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>readlink</name>
      <signature>fsPromises.readlink(path[, options])</signature>
      <desc>&lt;p&gt;Asynchronous readlink(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;code&gt;linkString&lt;/code&gt; upon
success.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the link path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;, the link path
returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>realpath</name>
      <signature>fsPromises.realpath(path[, options])</signature>
      <desc>&lt;p&gt;Determines the actual location of &lt;code&gt;path&lt;/code&gt; using the same semantics as the
&lt;code&gt;fs.realpath.native()&lt;/code&gt; function then resolves the &lt;code&gt;Promise&lt;/code&gt; with the resolved
path.&lt;/p&gt;
&lt;p&gt;Only paths that can be converted to UTF8 strings are supported.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the path. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;, the path returned will be
passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;On Linux, when Node.js is linked against musl libc, the procfs file system must
be mounted on &lt;code&gt;/proc&lt;/code&gt; in order for this function to work. Glibc does not have
this restriction.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>rename</name>
      <signature>fsPromises.rename(oldPath, newPath)</signature>
      <desc>&lt;p&gt;Renames &lt;code&gt;oldPath&lt;/code&gt; to &lt;code&gt;newPath&lt;/code&gt; and resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments
upon success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>oldPath</name>
          <type>string|Buffer|URL</type>
          <desc>`oldPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>newPath</name>
          <type>string|Buffer|URL</type>
          <desc>`newPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>rmdir</name>
      <signature>fsPromises.rmdir(path)</signature>
      <desc>&lt;p&gt;Removes the directory identified by &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with
no arguments upon success.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; on a file (not a directory) results in the
&lt;code&gt;Promise&lt;/code&gt; being rejected with an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt;
error on POSIX.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>stat</name>
      <signature>fsPromises.stat(path)</signature>
      <desc>&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object for the given &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>symlink</name>
      <signature>fsPromises.symlink(target, path[, type])</signature>
      <desc>&lt;p&gt;Creates a symbolic link then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon
success.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; argument is only used on Windows platforms and can be one of &lt;code&gt;&amp;#39;dir&amp;#39;&lt;/code&gt;,
&lt;code&gt;&amp;#39;file&amp;#39;&lt;/code&gt;, or &lt;code&gt;&amp;#39;junction&amp;#39;&lt;/code&gt;. Note that Windows junction
points require the destination path to be absolute. When using &lt;code&gt;&amp;#39;junction&amp;#39;&lt;/code&gt;,
the &lt;code&gt;target&lt;/code&gt; argument will automatically be normalized to absolute path.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>target</name>
          <type>string|Buffer|URL</type>
          <desc>`target` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>type</name>
          <type>string</type>
          <desc>`type` {string} **Default:** `'file'` </desc>
          <default>`'file'`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>truncate</name>
      <signature>fsPromises.truncate(path[, len])</signature>
      <desc>&lt;p&gt;Truncates the &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon
success. The &lt;code&gt;path&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be a string or &lt;code&gt;Buffer&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>unlink</name>
      <signature>fsPromises.unlink(path)</signature>
      <desc>&lt;p&gt;Asynchronous unlink(2). The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon
success.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>utimes</name>
      <signature>fsPromises.utimes(path, atime, mtime)</signature>
      <desc>&lt;p&gt;Change the file system timestamps of the object referenced by &lt;code&gt;path&lt;/code&gt; then
resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt; arguments follow these rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values can be either numbers representing Unix epoch time, &lt;code&gt;Date&lt;/code&gt;s, or a
numeric string like &lt;code&gt;&amp;#39;123456789.0&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the value can not be converted to a number, or is &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or
&lt;code&gt;-Infinity&lt;/code&gt;, an &lt;code&gt;Error&lt;/code&gt; will be thrown.&lt;/li&gt;
&lt;/ul&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>atime</name>
          <type>number|string|Date</type>
          <desc>`atime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>number|string|Date</type>
          <desc>`mtime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>write</name>
      <signature>fsPromises.write(filehandle, buffer[, offset[, length[, position]]])</signature>
      <desc>&lt;p&gt;Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;filehandle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property
identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing
a reference to the &lt;code&gt;buffer&lt;/code&gt; written.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt; determines the part of the buffer to be written, and &lt;code&gt;length&lt;/code&gt; is
an integer specifying the number of bytes to write.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; refers to the offset from the beginning of the file where this data
should be written. If &lt;code&gt;typeof position !== &amp;#39;number&amp;#39;&lt;/code&gt;, the data will be written
at the current position. See pwrite(2).&lt;/p&gt;
&lt;p&gt;It is unsafe to use &lt;code&gt;fsPromises.write()&lt;/code&gt; multiple times on the same file
without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected). For this
scenario, &lt;code&gt;fs.createWriteStream&lt;/code&gt; is strongly recommended.&lt;/p&gt;
&lt;p&gt;On Linux, positional writes do not work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filehandle</name>
          <type>FileHandle</type>
          <desc>`filehandle` {FileHandle} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs_promises_api</class>
      <name>writeFile</name>
      <signature>fsPromises.writeFile(file, data[, options])</signature>
      <desc>&lt;p&gt;Asynchronously writes data to a file, replacing the file if it already exists.
&lt;code&gt;data&lt;/code&gt; can be a string or a buffer. The &lt;code&gt;Promise&lt;/code&gt; will be resolved with no
arguments upon success.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
&lt;p&gt;Any specified &lt;code&gt;FileHandle&lt;/code&gt; has to support writing.&lt;/p&gt;
&lt;p&gt;It is unsafe to use &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; multiple times on the same file
without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>file</name>
          <type>string|Buffer|URL|FileHandle</type>
          <desc>`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>data</name>
          <type>string|Buffer|Uint8Array</type>
          <desc>`data` {string|Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'w'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>Promise</type>
        <desc>Returns: {Promise} </desc>
      </return>
    </method>
    <method>
      <class>fs.FSWatcher</class>
      <name>close</name>
      <signature>watcher.close()</signature>
      <desc>&lt;p&gt;Stop watching for changes on the given &lt;code&gt;fs.FSWatcher&lt;/code&gt;. Once stopped, the
&lt;code&gt;fs.FSWatcher&lt;/code&gt; object is no longer usable.&lt;/p&gt;
      </desc>
      <parameters/>
      <return/>
</method>
    <method>
      <class>fs.Stats</class>
      <name>isBlockDevice</name>
      <signature>stats.isBlockDevice()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a block device.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs.Stats</class>
      <name>isCharacterDevice</name>
      <signature>stats.isCharacterDevice()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a character device.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs.Stats</class>
      <name>isDirectory</name>
      <signature>stats.isDirectory()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a file system directory.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs.Stats</class>
      <name>isFIFO</name>
      <signature>stats.isFIFO()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a first-in-first-out (FIFO)
pipe.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs.Stats</class>
      <name>isFile</name>
      <signature>stats.isFile()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a regular file.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs.Stats</class>
      <name>isSocket</name>
      <signature>stats.isSocket()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a socket.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs.Stats</class>
      <name>isSymbolicLink</name>
      <signature>stats.isSymbolicLink()</signature>
      <desc>&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;fs.Stats&lt;/code&gt; object describes a symbolic link.&lt;/p&gt;
&lt;p&gt;This method is only valid when using &lt;a href=&quot;#fs_fs_lstat_path_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
      </desc>
      <parameters/>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>access</name>
      <signature>fs.access(path[, mode], callback)</signature>
      <desc>&lt;p&gt;Tests a user&amp;#39;s permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;.
The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility
checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values
of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of
two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The final argument, &lt;code&gt;callback&lt;/code&gt;, is a callback function that is invoked with
a possible error argument. If any of the accessibility checks fail, the error
argument will be an &lt;code&gt;Error&lt;/code&gt; object. The following examples check if
&lt;code&gt;package.json&lt;/code&gt; exists, and if it is readable or writable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const file = &amp;#39;package.json&amp;#39;;

// Check if the file exists in the current directory.
fs.access(file, fs.constants.F_OK, (err) =&amp;gt; {
  console.log(`${file} ${err ? &amp;#39;does not exist&amp;#39; : &amp;#39;exists&amp;#39;}`);
});

// Check if the file is readable.
fs.access(file, fs.constants.R_OK, (err) =&amp;gt; {
  console.log(`${file} ${err ? &amp;#39;is not readable&amp;#39; : &amp;#39;is readable&amp;#39;}`);
});

// Check if the file is writable.
fs.access(file, fs.constants.W_OK, (err) =&amp;gt; {
  console.log(`${file} ${err ? &amp;#39;is not writable&amp;#39; : &amp;#39;is writable&amp;#39;}`);
});

// Check if the file exists in the current directory, and if it is writable.
fs.access(file, fs.constants.F_OK | fs.constants.W_OK, (err) =&amp;gt; {
  if (err) {
    console.error(
      `${file} ${err.code === &amp;#39;ENOENT&amp;#39; ? &amp;#39;does not exist&amp;#39; : &amp;#39;is read-only&amp;#39;}`);
  } else {
    console.log(`${file} exists, and it is writable`);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;fs.access()&lt;/code&gt; to check for the accessibility of a file before calling
&lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing
so introduces a race condition, since other processes may change the file&amp;#39;s
state between the two calls. Instead, user code should open/read/write the
file directly and handle the error raised if the file is not accessible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;write (NOT RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.access(&amp;#39;myfile&amp;#39;, (err) =&amp;gt; {
  if (!err) {
    console.error(&amp;#39;myfile already exists&amp;#39;);
    return;
  }

  fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;wx&amp;#39;, (err, fd) =&amp;gt; {
    if (err) throw err;
    writeMyData(fd);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;write (RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;wx&amp;#39;, (err, fd) =&amp;gt; {
  if (err) {
    if (err.code === &amp;#39;EEXIST&amp;#39;) {
      console.error(&amp;#39;myfile already exists&amp;#39;);
      return;
    }

    throw err;
  }

  writeMyData(fd);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;read (NOT RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.access(&amp;#39;myfile&amp;#39;, (err) =&amp;gt; {
  if (err) {
    if (err.code === &amp;#39;ENOENT&amp;#39;) {
      console.error(&amp;#39;myfile does not exist&amp;#39;);
      return;
    }

    throw err;
  }

  fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;r&amp;#39;, (err, fd) =&amp;gt; {
    if (err) throw err;
    readMyData(fd);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;read (RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;r&amp;#39;, (err, fd) =&amp;gt; {
  if (err) {
    if (err.code === &amp;#39;ENOENT&amp;#39;) {
      console.error(&amp;#39;myfile does not exist&amp;#39;);
      return;
    }

    throw err;
  }

  readMyData(fd);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &amp;quot;not recommended&amp;quot; examples above check for accessibility and then use the
file; the &amp;quot;recommended&amp;quot; examples are better because they use the file directly
and handle the error, if any.&lt;/p&gt;
&lt;p&gt;In general, check for the accessibility of a file only if the file will not be
used directly, for example when its accessibility is a signal from another
process.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `fs.constants.F_OK` </desc>
          <default>`fs.constants.F_OK`</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>accessSync</name>
      <signature>fs.accessSync(path[, mode])</signature>
      <desc>&lt;p&gt;Synchronously tests a user&amp;#39;s permissions for the file or directory specified
by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the
accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for
possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of
the bitwise OR of two or more values
(e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If any of the accessibility checks fail, an &lt;code&gt;Error&lt;/code&gt; will be thrown. Otherwise,
the method will return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;try {
  fs.accessSync(&amp;#39;etc/passwd&amp;#39;, fs.constants.R_OK | fs.constants.W_OK);
  console.log(&amp;#39;can read/write&amp;#39;);
} catch (err) {
  console.error(&amp;#39;no access!&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `fs.constants.F_OK` </desc>
          <default>`fs.constants.F_OK`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>appendFile</name>
      <signature>fs.appendFile(path, data[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronously append data to a file, creating the file if it does not yet
exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer.html#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.appendFile(&amp;#39;message.txt&amp;#39;, &amp;#39;data to append&amp;#39;, (err) =&amp;gt; {
  if (err) throw err;
  console.log(&amp;#39;The &amp;quot;data to append&amp;quot; was appended to file!&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.appendFile(&amp;#39;message.txt&amp;#39;, &amp;#39;data to append&amp;#39;, &amp;#39;utf8&amp;#39;, callback);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; may be specified as a numeric file descriptor that has been opened
for appending (using &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.openSync()&lt;/code&gt;). The file descriptor will
not be closed automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.open(&amp;#39;message.txt&amp;#39;, &amp;#39;a&amp;#39;, (err, fd) =&amp;gt; {
  if (err) throw err;
  fs.appendFile(fd, &amp;#39;data to append&amp;#39;, &amp;#39;utf8&amp;#39;, (err) =&amp;gt; {
    fs.close(fd, (err) =&amp;gt; {
      if (err) throw err;
    });
    if (err) throw err;
  });
});
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL|number</type>
          <desc>`path` {string|Buffer|URL|number} filename or file descriptor </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>data</name>
          <type>string|Buffer</type>
          <desc>`data` {string|Buffer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'a'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>appendFileSync</name>
      <signature>fs.appendFileSync(path, data[, options])</signature>
      <desc>&lt;p&gt;Synchronously append data to a file, creating the file if it does not yet
exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer.html#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;try {
  fs.appendFileSync(&amp;#39;message.txt&amp;#39;, &amp;#39;data to append&amp;#39;);
  console.log(&amp;#39;The &amp;quot;data to append&amp;quot; was appended to file!&amp;#39;);
} catch (err) {
  /* Handle the error */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.appendFileSync(&amp;#39;message.txt&amp;#39;, &amp;#39;data to append&amp;#39;, &amp;#39;utf8&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; may be specified as a numeric file descriptor that has been opened
for appending (using &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.openSync()&lt;/code&gt;). The file descriptor will
not be closed automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;let fd;

try {
  fd = fs.openSync(&amp;#39;message.txt&amp;#39;, &amp;#39;a&amp;#39;);
  fs.appendFileSync(fd, &amp;#39;data to append&amp;#39;, &amp;#39;utf8&amp;#39;);
} catch (err) {
  /* Handle the error */
} finally {
  if (fd !== undefined)
    fs.closeSync(fd);
}
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL|number</type>
          <desc>`path` {string|Buffer|URL|number} filename or file descriptor </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>data</name>
          <type>string|Buffer</type>
          <desc>`data` {string|Buffer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'a'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>chmod</name>
      <signature>fs.chmod(path, mode, callback)</signature>
      <desc>&lt;p&gt;Asynchronously changes the permissions of a file. No arguments other than a
possible exception are given to the completion callback.&lt;/p&gt;
&lt;p&gt;See also: chmod(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>chmodSync</name>
      <signature>fs.chmodSync(path, mode)</signature>
      <desc>&lt;p&gt;Synchronously changes the permissions of a file. Returns &lt;code&gt;undefined&lt;/code&gt;.
This is the synchronous version of &lt;a href=&quot;#fs_fs_chmod_path_mode_callback&quot;&gt;&lt;code&gt;fs.chmod()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also: chmod(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>chown</name>
      <signature>fs.chown(path, uid, gid, callback)</signature>
      <desc>&lt;p&gt;Asynchronously changes owner and group of a file. No arguments other than a
possible exception are given to the completion callback.&lt;/p&gt;
&lt;p&gt;See also: chown(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>chownSync</name>
      <signature>fs.chownSync(path, uid, gid)</signature>
      <desc>&lt;p&gt;Synchronously changes owner and group of a file. Returns &lt;code&gt;undefined&lt;/code&gt;.
This is the synchronous version of &lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.chown()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also: chown(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>close</name>
      <signature>fs.close(fd, callback)</signature>
      <desc>&lt;p&gt;Asynchronous close(2). No arguments other than a possible exception are given
to the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>closeSync</name>
      <signature>fs.closeSync(fd)</signature>
      <desc>&lt;p&gt;Synchronous close(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>copyFile</name>
      <signature>fs.copyFile(src, dest[, flags], callback)</signature>
      <desc>&lt;p&gt;Asynchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it
already exists. No arguments other than a possible exception are given to the
callback function. Node.js makes no guarantees about the atomicity of the copy
operation. If an error occurs after the destination file has been opened for
writing, Node.js will attempt to remove the destination.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flags&lt;/code&gt; is an optional integer that specifies the behavior
of the copy operation. It is possible to create a mask consisting of the bitwise
OR of two or more values (e.g.
&lt;code&gt;fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_EXCL&lt;/code&gt; - The copy operation will fail if &lt;code&gt;dest&lt;/code&gt; already
exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_FICLONE&lt;/code&gt; - The copy operation will attempt to create a
copy-on-write reflink. If the platform does not support copy-on-write, then a
fallback copy mechanism is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_FICLONE_FORCE&lt;/code&gt; - The copy operation will attempt to
create a copy-on-write reflink. If the platform does not support copy-on-write,
then the operation will fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);

// destination.txt will be created or overwritten by default.
fs.copyFile(&amp;#39;source.txt&amp;#39;, &amp;#39;destination.txt&amp;#39;, (err) =&amp;gt; {
  if (err) throw err;
  console.log(&amp;#39;source.txt was copied to destination.txt&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the third argument is a number, then it specifies &lt;code&gt;flags&lt;/code&gt;, as shown in the
following example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);
const { COPYFILE_EXCL } = fs.constants;

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
fs.copyFile(&amp;#39;source.txt&amp;#39;, &amp;#39;destination.txt&amp;#39;, COPYFILE_EXCL, callback);
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>src</name>
          <type>string|Buffer|URL</type>
          <desc>`src` {string|Buffer|URL} source filename to copy </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>dest</name>
          <type>string|Buffer|URL</type>
          <desc>`dest` {string|Buffer|URL} destination filename of the copy operation </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>flags</name>
          <type>number</type>
          <desc>`flags` {number} modifiers for copy operation. **Default:** `0`. </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>copyFileSync</name>
      <signature>fs.copyFileSync(src, dest[, flags])</signature>
      <desc>&lt;p&gt;Synchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it
already exists. Returns &lt;code&gt;undefined&lt;/code&gt;. Node.js makes no guarantees about the
atomicity of the copy operation. If an error occurs after the destination file
has been opened for writing, Node.js will attempt to remove the destination.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flags&lt;/code&gt; is an optional integer that specifies the behavior
of the copy operation. It is possible to create a mask consisting of the bitwise
OR of two or more values (e.g.
&lt;code&gt;fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_EXCL&lt;/code&gt; - The copy operation will fail if &lt;code&gt;dest&lt;/code&gt; already
exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_FICLONE&lt;/code&gt; - The copy operation will attempt to create a
copy-on-write reflink. If the platform does not support copy-on-write, then a
fallback copy mechanism is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.constants.COPYFILE_FICLONE_FORCE&lt;/code&gt; - The copy operation will attempt to
create a copy-on-write reflink. If the platform does not support copy-on-write,
then the operation will fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);

// destination.txt will be created or overwritten by default.
fs.copyFileSync(&amp;#39;source.txt&amp;#39;, &amp;#39;destination.txt&amp;#39;);
console.log(&amp;#39;source.txt was copied to destination.txt&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the third argument is a number, then it specifies &lt;code&gt;flags&lt;/code&gt;, as shown in the
following example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;const fs = require(&amp;#39;fs&amp;#39;);
const { COPYFILE_EXCL } = fs.constants;

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
fs.copyFileSync(&amp;#39;source.txt&amp;#39;, &amp;#39;destination.txt&amp;#39;, COPYFILE_EXCL);
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>src</name>
          <type>string|Buffer|URL</type>
          <desc>`src` {string|Buffer|URL} source filename to copy </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>dest</name>
          <type>string|Buffer|URL</type>
          <desc>`dest` {string|Buffer|URL} destination filename of the copy operation </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>flags</name>
          <type>number</type>
          <desc>`flags` {number} modifiers for copy operation. **Default:** `0`. </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>createReadStream</name>
      <signature>fs.createReadStream(path[, options])</signature>
      <desc>&lt;p&gt;Unlike the 16 kb default &lt;code&gt;highWaterMark&lt;/code&gt; for a readable stream, the stream
returned by this method has a default &lt;code&gt;highWaterMark&lt;/code&gt; of 64 kb.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; can include &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; values to read a range of bytes from
the file instead of the entire file. Both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are inclusive and
start counting at 0. If &lt;code&gt;fd&lt;/code&gt; is specified and &lt;code&gt;start&lt;/code&gt; is omitted or &lt;code&gt;undefined&lt;/code&gt;,
&lt;code&gt;fs.createReadStream()&lt;/code&gt; reads sequentially from the current file position.
The &lt;code&gt;encoding&lt;/code&gt; can be any one of those accepted by &lt;a href=&quot;buffer.html#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;fd&lt;/code&gt; is specified, &lt;code&gt;ReadStream&lt;/code&gt; will ignore the &lt;code&gt;path&lt;/code&gt; argument and will use
the specified file descriptor. This means that no &lt;code&gt;&amp;#39;open&amp;#39;&lt;/code&gt; event will be
emitted. Note that &lt;code&gt;fd&lt;/code&gt; should be blocking; non-blocking &lt;code&gt;fd&lt;/code&gt;s should be passed
to &lt;a href=&quot;net.html#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;autoClose&lt;/code&gt; is false, then the file descriptor won&amp;#39;t be closed, even if
there&amp;#39;s an error. It is the application&amp;#39;s responsibility to close it and make
sure there&amp;#39;s no file descriptor leak. If &lt;code&gt;autoClose&lt;/code&gt; is set to true (default
behavior), on &lt;code&gt;&amp;#39;error&amp;#39;&lt;/code&gt; or &lt;code&gt;&amp;#39;end&amp;#39;&lt;/code&gt; the file descriptor will be closed
automatically.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; sets the file mode (permission and sticky bits), but only if the
file was created.&lt;/p&gt;
&lt;p&gt;An example to read the last 10 bytes of a file which is 100 bytes long:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.createReadStream(&amp;#39;sample.txt&amp;#39;, { start: 90, end: 99 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>flags</name>
              <type>string</type>
              <default>`'r'`</default>
              <desc>`flags` {string} See [support of file system `flags`][]. **Default:** `'r'`. </desc>
            </option>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`null`</default>
              <desc>`encoding` {string} **Default:** `null` </desc>
            </option>
            <option>
              <name>fd</name>
              <type>integer</type>
              <default>`null`</default>
              <desc>`fd` {integer} **Default:** `null` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>autoClose</name>
              <type>boolean</type>
              <default>`true`</default>
              <desc>`autoClose` {boolean} **Default:** `true` </desc>
            </option>
            <option>
              <name>start</name>
              <type>integer</type>
              <desc>`start` {integer} </desc>
            </option>
            <option>
              <name>end</name>
              <type>integer</type>
              <default>`Infinity`</default>
              <desc>`end` {integer} **Default:** `Infinity` </desc>
            </option>
            <option>
              <name>highWaterMark</name>
              <type>integer</type>
              <default>`64 * 1024`</default>
              <desc>`highWaterMark` {integer} **Default:** `64 * 1024` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>fs.ReadStream</type>
        <desc>Returns: {fs.ReadStream} See [Readable Streams][]. </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>createWriteStream</name>
      <signature>fs.createWriteStream(path[, options])</signature>
      <desc>&lt;p&gt;&lt;code&gt;options&lt;/code&gt; may also include a &lt;code&gt;start&lt;/code&gt; option to allow writing data at
some position past the beginning of the file. Modifying a file rather
than replacing it may require a &lt;code&gt;flags&lt;/code&gt; mode of &lt;code&gt;r+&lt;/code&gt; rather than the
default mode &lt;code&gt;w&lt;/code&gt;. The &lt;code&gt;encoding&lt;/code&gt; can be any one of those accepted by
&lt;a href=&quot;buffer.html#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;autoClose&lt;/code&gt; is set to true (default behavior) on &lt;code&gt;&amp;#39;error&amp;#39;&lt;/code&gt; or &lt;code&gt;&amp;#39;finish&amp;#39;&lt;/code&gt;
the file descriptor will be closed automatically. If &lt;code&gt;autoClose&lt;/code&gt; is false,
then the file descriptor won&amp;#39;t be closed, even if there&amp;#39;s an error.
It is the application&amp;#39;s responsibility to close it and make sure there&amp;#39;s no
file descriptor leak.&lt;/p&gt;
&lt;p&gt;Like &lt;a href=&quot;#fs_class_fs_readstream&quot;&gt;&lt;code&gt;ReadStream&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;fd&lt;/code&gt; is specified, &lt;a href=&quot;#fs_class_fs_writestream&quot;&gt;&lt;code&gt;WriteStream&lt;/code&gt;&lt;/a&gt; will ignore the
&lt;code&gt;path&lt;/code&gt; argument and will use the specified file descriptor. This means that no
&lt;code&gt;&amp;#39;open&amp;#39;&lt;/code&gt; event will be emitted. Note that &lt;code&gt;fd&lt;/code&gt; should be blocking; non-blocking
&lt;code&gt;fd&lt;/code&gt;s should be passed to &lt;a href=&quot;net.html#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>flags</name>
              <type>string</type>
              <default>`'w'`</default>
              <desc>`flags` {string} See [support of file system `flags`][]. **Default:** `'w'`. </desc>
            </option>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>fd</name>
              <type>integer</type>
              <default>`null`</default>
              <desc>`fd` {integer} **Default:** `null` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>autoClose</name>
              <type>boolean</type>
              <default>`true`</default>
              <desc>`autoClose` {boolean} **Default:** `true` </desc>
            </option>
            <option>
              <name>start</name>
              <type>integer</type>
              <desc>`start` {integer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>fs.WriteStream</type>
        <desc>Returns: {fs.WriteStream} See [Writable Stream][]. </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>exists</name>
      <signature>fs.exists(path, callback)</signature>
      <desc>&lt;p&gt;Test whether or not the given path exists by checking with the file system.
Then call the &lt;code&gt;callback&lt;/code&gt; argument with either true or false. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.exists(&amp;#39;/etc/passwd&amp;#39;, (exists) =&amp;gt; {
  console.log(exists ? &amp;#39;it\&amp;#39;s there&amp;#39; : &amp;#39;no passwd!&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note that the parameter to this callback is not consistent with other
Node.js callbacks.&lt;/strong&gt; Normally, the first parameter to a Node.js callback is
an &lt;code&gt;err&lt;/code&gt; parameter, optionally followed by other parameters. The
&lt;code&gt;fs.exists()&lt;/code&gt; callback has only one boolean parameter. This is one reason
&lt;code&gt;fs.access()&lt;/code&gt; is recommended instead of &lt;code&gt;fs.exists()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;fs.exists()&lt;/code&gt; to check for the existence of a file before calling
&lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing
so introduces a race condition, since other processes may change the file&amp;#39;s
state between the two calls. Instead, user code should open/read/write the
file directly and handle the error raised if the file does not exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;write (NOT RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.exists(&amp;#39;myfile&amp;#39;, (exists) =&amp;gt; {
  if (exists) {
    console.error(&amp;#39;myfile already exists&amp;#39;);
  } else {
    fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;wx&amp;#39;, (err, fd) =&amp;gt; {
      if (err) throw err;
      writeMyData(fd);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;write (RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;wx&amp;#39;, (err, fd) =&amp;gt; {
  if (err) {
    if (err.code === &amp;#39;EEXIST&amp;#39;) {
      console.error(&amp;#39;myfile already exists&amp;#39;);
      return;
    }

    throw err;
  }

  writeMyData(fd);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;read (NOT RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.exists(&amp;#39;myfile&amp;#39;, (exists) =&amp;gt; {
  if (exists) {
    fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;r&amp;#39;, (err, fd) =&amp;gt; {
      if (err) throw err;
      readMyData(fd);
    });
  } else {
    console.error(&amp;#39;myfile does not exist&amp;#39;);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;read (RECOMMENDED)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.open(&amp;#39;myfile&amp;#39;, &amp;#39;r&amp;#39;, (err, fd) =&amp;gt; {
  if (err) {
    if (err.code === &amp;#39;ENOENT&amp;#39;) {
      console.error(&amp;#39;myfile does not exist&amp;#39;);
      return;
    }

    throw err;
  }

  readMyData(fd);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &amp;quot;not recommended&amp;quot; examples above check for existence and then use the
file; the &amp;quot;recommended&amp;quot; examples are better because they use the file directly
and handle the error, if any.&lt;/p&gt;
&lt;p&gt;In general, check for the existence of a file only if the file won’t be
used directly, for example when its existence is a signal from another
process.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>exists</name>
              <type>boolean</type>
              <desc>`exists` {boolean} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>existsSync</name>
      <signature>fs.existsSync(path)</signature>
      <desc>&lt;p&gt;Synchronous version of &lt;a href=&quot;fs.html#fs_fs_exists_path_callback&quot;&gt;&lt;code&gt;fs.exists()&lt;/code&gt;&lt;/a&gt;.
Returns &lt;code&gt;true&lt;/code&gt; if the path exists, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;fs.exists()&lt;/code&gt; is deprecated, but &lt;code&gt;fs.existsSync()&lt;/code&gt; is not.
(The &lt;code&gt;callback&lt;/code&gt; parameter to &lt;code&gt;fs.exists()&lt;/code&gt; accepts parameters that are
inconsistent with other Node.js callbacks. &lt;code&gt;fs.existsSync()&lt;/code&gt; does not use
a callback.)&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>boolean</type>
        <desc>Returns: {boolean} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>fchmod</name>
      <signature>fs.fchmod(fd, mode, callback)</signature>
      <desc>&lt;p&gt;Asynchronous fchmod(2). No arguments other than a possible exception
are given to the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fchmodSync</name>
      <signature>fs.fchmodSync(fd, mode)</signature>
      <desc>&lt;p&gt;Synchronous fchmod(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fchown</name>
      <signature>fs.fchown(fd, uid, gid, callback)</signature>
      <desc>&lt;p&gt;Asynchronous fchown(2). No arguments other than a possible exception are given
to the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fchownSync</name>
      <signature>fs.fchownSync(fd, uid, gid)</signature>
      <desc>&lt;p&gt;Synchronous fchown(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fdatasync</name>
      <signature>fs.fdatasync(fd, callback)</signature>
      <desc>&lt;p&gt;Asynchronous fdatasync(2). No arguments other than a possible exception are
given to the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fdatasyncSync</name>
      <signature>fs.fdatasyncSync(fd)</signature>
      <desc>&lt;p&gt;Synchronous fdatasync(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fstat</name>
      <signature>fs.fstat(fd, callback)</signature>
      <desc>&lt;p&gt;Asynchronous fstat(2). The callback gets two arguments &lt;code&gt;(err, stats)&lt;/code&gt; where
&lt;code&gt;stats&lt;/code&gt; is an &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object. &lt;code&gt;fstat()&lt;/code&gt; is identical to &lt;a href=&quot;fs.html#fs_fs_stat_path_callback&quot;&gt;&lt;code&gt;stat()&lt;/code&gt;&lt;/a&gt;,
except that the file to be stat-ed is specified by the file descriptor &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>stats</name>
              <type>fs.Stats</type>
              <desc>`stats` {fs.Stats} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fstatSync</name>
      <signature>fs.fstatSync(fd)</signature>
      <desc>&lt;p&gt;Synchronous fstat(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>fs.Stats</type>
        <desc>Returns: {fs.Stats} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>fsync</name>
      <signature>fs.fsync(fd, callback)</signature>
      <desc>&lt;p&gt;Asynchronous fsync(2). No arguments other than a possible exception are given
to the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>fsyncSync</name>
      <signature>fs.fsyncSync(fd)</signature>
      <desc>&lt;p&gt;Synchronous fsync(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>ftruncate</name>
      <signature>fs.ftruncate(fd[, len], callback)</signature>
      <desc>&lt;p&gt;Asynchronous ftruncate(2). No arguments other than a possible exception are
given to the completion callback.&lt;/p&gt;
&lt;p&gt;If the file referred to by the file descriptor was larger than &lt;code&gt;len&lt;/code&gt; bytes, only
the first &lt;code&gt;len&lt;/code&gt; bytes will be retained in the file.&lt;/p&gt;
&lt;p&gt;For example, the following program retains only the first four bytes of the
file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
// Prints: Node.js

// get the file descriptor of the file to be truncated
const fd = fs.openSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;r+&amp;#39;);

// truncate the file to first four bytes
fs.ftruncate(fd, 4, (err) =&amp;gt; {
  assert.ifError(err);
  console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
});
// Prints: Node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the file previously was shorter than &lt;code&gt;len&lt;/code&gt; bytes, it is extended, and the
extended part is filled with null bytes (&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;). For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;utf8&amp;#39;));
// Prints: Node.js

// get the file descriptor of the file to be truncated
const fd = fs.openSync(&amp;#39;temp.txt&amp;#39;, &amp;#39;r+&amp;#39;);

// truncate the file to 10 bytes, whereas the actual size is 7 bytes
fs.ftruncate(fd, 10, (err) =&amp;gt; {
  assert.ifError(err);
  console.log(fs.readFileSync(&amp;#39;temp.txt&amp;#39;));
});
// Prints: &amp;lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&amp;gt;
// (&amp;#39;Node.js\0\0\0&amp;#39; in UTF8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last three bytes are null bytes (&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;), to compensate the over-truncation.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>ftruncateSync</name>
      <signature>fs.ftruncateSync(fd[, len])</signature>
      <desc>&lt;p&gt;Synchronous ftruncate(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>futimes</name>
      <signature>fs.futimes(fd, atime, mtime, callback)</signature>
      <desc>&lt;p&gt;Change the file system timestamps of the object referenced by the supplied file
descriptor. See &lt;a href=&quot;#fs_fs_utimes_path_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.utimes()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This function does not work on AIX versions before 7.1, it will return the
error &lt;code&gt;UV_ENOSYS&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>atime</name>
          <type>number|string|Date</type>
          <desc>`atime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>number|string|Date</type>
          <desc>`mtime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>futimesSync</name>
      <signature>fs.futimesSync(fd, atime, mtime)</signature>
      <desc>&lt;p&gt;Synchronous version of &lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.futimes()&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>atime</name>
          <type>integer</type>
          <desc>`atime` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>integer</type>
          <desc>`mtime` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>lchmod</name>
      <signature>fs.lchmod(path, mode, callback)</signature>
      <desc>&lt;p&gt;Asynchronous lchmod(2). No arguments other than a possible exception
are given to the completion callback.&lt;/p&gt;
&lt;p&gt;Only available on macOS.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>lchmodSync</name>
      <signature>fs.lchmodSync(path, mode)</signature>
      <desc>&lt;p&gt;Synchronous lchmod(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>lchown</name>
      <signature>fs.lchown(path, uid, gid, callback)</signature>
      <desc>&lt;p&gt;Asynchronous lchown(2). No arguments other than a possible exception are given
to the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>lchownSync</name>
      <signature>fs.lchownSync(path, uid, gid)</signature>
      <desc>&lt;p&gt;Synchronous lchown(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>uid</name>
          <type>integer</type>
          <desc>`uid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>gid</name>
          <type>integer</type>
          <desc>`gid` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>link</name>
      <signature>fs.link(existingPath, newPath, callback)</signature>
      <desc>&lt;p&gt;Asynchronous link(2). No arguments other than a possible exception are given to
the completion callback.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>existingPath</name>
          <type>string|Buffer|URL</type>
          <desc>`existingPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>newPath</name>
          <type>string|Buffer|URL</type>
          <desc>`newPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>linkSync</name>
      <signature>fs.linkSync(existingPath, newPath)</signature>
      <desc>&lt;p&gt;Synchronous link(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>existingPath</name>
          <type>string|Buffer|URL</type>
          <desc>`existingPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>newPath</name>
          <type>string|Buffer|URL</type>
          <desc>`newPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>lstat</name>
      <signature>fs.lstat(path, callback)</signature>
      <desc>&lt;p&gt;Asynchronous lstat(2). The callback gets two arguments &lt;code&gt;(err, stats)&lt;/code&gt; where
&lt;code&gt;stats&lt;/code&gt; is a &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object. &lt;code&gt;lstat()&lt;/code&gt; is identical to &lt;code&gt;stat()&lt;/code&gt;,
except that if &lt;code&gt;path&lt;/code&gt; is a symbolic link, then the link itself is stat-ed,
not the file that it refers to.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>stats</name>
              <type>fs.Stats</type>
              <desc>`stats` {fs.Stats} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>lstatSync</name>
      <signature>fs.lstatSync(path)</signature>
      <desc>&lt;p&gt;Synchronous lstat(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>fs.Stats</type>
        <desc>Returns: {fs.Stats} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>mkdir</name>
      <signature>fs.mkdir(path[, mode], callback)</signature>
      <desc>&lt;p&gt;Asynchronously creates a directory. No arguments other than a possible exception
are given to the completion callback.&lt;/p&gt;
&lt;p&gt;See also: mkdir(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `0o777` </desc>
          <default>`0o777`</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>mkdirSync</name>
      <signature>fs.mkdirSync(path[, mode])</signature>
      <desc>&lt;p&gt;Synchronously creates a directory. Returns &lt;code&gt;undefined&lt;/code&gt;.
This is the synchronous version of &lt;a href=&quot;#fs_fs_mkdir_path_mode_callback&quot;&gt;&lt;code&gt;fs.mkdir()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also: mkdir(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `0o777` </desc>
          <default>`0o777`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>mkdtemp</name>
      <signature>fs.mkdtemp(prefix[, options], callback)</signature>
      <desc>&lt;p&gt;Creates a unique temporary directory.&lt;/p&gt;
&lt;p&gt;Generates six random characters to be appended behind a required
&lt;code&gt;prefix&lt;/code&gt; to create a unique temporary directory.&lt;/p&gt;
&lt;p&gt;The created folder path is passed as a string to the callback&amp;#39;s second
parameter.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.mkdtemp(path.join(os.tmpdir(), &amp;#39;foo-&amp;#39;), (err, folder) =&amp;gt; {
  if (err) throw err;
  console.log(folder);
  // Prints: /tmp/foo-itXde2 or C:\Users\...\AppData\Local\Temp\foo-itXde2
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;fs.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters
directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the
intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt; &lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt;
must end with a trailing platform-specific path separator
(&lt;code&gt;require(&amp;#39;path&amp;#39;).sep&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;// The parent directory for the new temporary directory
const tmpDir = os.tmpdir();

// This method is *INCORRECT*:
fs.mkdtemp(tmpDir, (err, folder) =&amp;gt; {
  if (err) throw err;
  console.log(folder);
  // Will print something similar to `/tmpabc123`.
  // Note that a new temporary directory is created
  // at the file system root rather than *within*
  // the /tmp directory.
});

// This method is *CORRECT*:
const { sep } = require(&amp;#39;path&amp;#39;);
fs.mkdtemp(`${tmpDir}${sep}`, (err, folder) =&amp;gt; {
  if (err) throw err;
  console.log(folder);
  // Will print something similar to `/tmp/abc123`.
  // A new temporary directory is created within
  // the /tmp directory.
});
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>prefix</name>
          <type>string</type>
          <desc>`prefix` {string} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>folder</name>
              <type>string</type>
              <desc>`folder` {string} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>mkdtempSync</name>
      <signature>fs.mkdtempSync(prefix[, options])</signature>
      <desc>&lt;p&gt;The synchronous version of &lt;a href=&quot;#fs_fs_mkdtemp_prefix_options_callback&quot;&gt;&lt;code&gt;fs.mkdtemp()&lt;/code&gt;&lt;/a&gt;. Returns the created
folder path.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>prefix</name>
          <type>string</type>
          <desc>`prefix` {string} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>string</type>
        <desc>Returns: {string} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>open</name>
      <signature>fs.open(path, flags[, mode], callback)</signature>
      <desc>&lt;p&gt;Asynchronous file open. See open(2).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; sets the file mode (permission and sticky bits), but only if the file was
created.&lt;/p&gt;
&lt;p&gt;The callback gets two arguments &lt;code&gt;(err, fd)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some characters (&lt;code&gt;&amp;lt; &amp;gt; : &amp;quot; / \ | ? *&lt;/code&gt;) are reserved under Windows as documented
by &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx&quot;&gt;Naming Files, Paths, and Namespaces&lt;/a&gt;. Under NTFS, if the filename contains
a colon, Node.js will open a file system stream, as described by
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx&quot;&gt;this MSDN page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Functions based on &lt;code&gt;fs.open()&lt;/code&gt; exhibit this behavior as well. eg.
&lt;code&gt;fs.writeFile()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt;, etc.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>flags</name>
          <type>string|number</type>
          <desc>`flags` {string|number} See [support of file system `flags`][]. </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `0o666` (readable and writable) </desc>
          <default>`0o666` (readable and writable)</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>fd</name>
              <type>integer</type>
              <desc>`fd` {integer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>openSync</name>
      <signature>fs.openSync(path, flags[, mode])</signature>
      <desc>&lt;p&gt;Synchronous version of &lt;a href=&quot;#fs_fs_open_path_flags_mode_callback&quot;&gt;&lt;code&gt;fs.open()&lt;/code&gt;&lt;/a&gt;. Returns an integer representing the file
descriptor.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>flags</name>
          <type>string|number</type>
          <desc>`flags` {string|number} See [support of file system `flags`][]. </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mode</name>
          <type>integer</type>
          <desc>`mode` {integer} **Default:** `0o666` </desc>
          <default>`0o666`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>number</type>
        <desc>Returns: {number} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>read</name>
      <signature>fs.read(fd, buffer, offset, length, position, callback)</signature>
      <desc>&lt;p&gt;Read data from the file specified by &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;buffer&lt;/code&gt; is the buffer that the data will be written to.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt; is the offset in the buffer to start writing at.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;length&lt;/code&gt; is an integer specifying the number of bytes to read.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; is an argument specifying where to begin reading from in the file.
If &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, data will be read from the current file position,
and the file position will be updated.
If &lt;code&gt;position&lt;/code&gt; is an integer, the file position will remain unchanged.&lt;/p&gt;
&lt;p&gt;The callback is given the three arguments, &lt;code&gt;(err, bytesRead, buffer)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If this method is invoked as its &lt;a href=&quot;util.html#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns
a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesRead&lt;/code&gt; and &lt;code&gt;buffer&lt;/code&gt; properties.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>bytesRead</name>
              <type>integer</type>
              <desc>`bytesRead` {integer} </desc>
            </option>
            <option>
              <name>buffer</name>
              <type>Buffer</type>
              <desc>`buffer` {Buffer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>readdir</name>
      <signature>fs.readdir(path[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronous readdir(3). Reads the contents of a directory.
The callback gets two arguments &lt;code&gt;(err, files)&lt;/code&gt; where &lt;code&gt;files&lt;/code&gt; is an array of
the names of the files in the directory excluding &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;..&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>files</name>
              <type>string[]|Buffer[]</type>
              <desc>`files` {string[]|Buffer[]} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>readdirSync</name>
      <signature>fs.readdirSync(path[, options])</signature>
      <desc>&lt;p&gt;Synchronous readdir(3).&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>string[]</type>
        <desc>Returns: {string[]} An array of filenames excluding `'.'` and `'..'`. </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>readFile</name>
      <signature>fs.readFile(path[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronously reads the entire contents of a file. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.readFile(&amp;#39;/etc/passwd&amp;#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The callback is passed two arguments &lt;code&gt;(err, data)&lt;/code&gt;, where &lt;code&gt;data&lt;/code&gt; is the
contents of the file.&lt;/p&gt;
&lt;p&gt;If no encoding is specified, then the raw buffer is returned.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.readFile(&amp;#39;/etc/passwd&amp;#39;, &amp;#39;utf8&amp;#39;, callback);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the path is a directory, the behavior of &lt;code&gt;fs.readFile()&lt;/code&gt; and
&lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync()&lt;/code&gt;&lt;/a&gt; is platform-specific. On macOS, Linux, and Windows, an
error will be returned. On FreeBSD, a representation of the directory&amp;#39;s contents
will be returned.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;// macOS, Linux, and Windows
fs.readFile(&amp;#39;&amp;lt;directory&amp;gt;&amp;#39;, (err, data) =&amp;gt; {
  // =&amp;gt; [Error: EISDIR: illegal operation on a directory, read &amp;lt;directory&amp;gt;]
});

//  FreeBSD
fs.readFile(&amp;#39;&amp;lt;directory&amp;gt;&amp;#39;, (err, data) =&amp;gt; {
  // =&amp;gt; null, &amp;lt;data&amp;gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any specified file descriptor has to support reading.&lt;/p&gt;
&lt;p&gt;If a file descriptor is specified as the &lt;code&gt;path&lt;/code&gt;, it will not be closed
automatically.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fs.readFile()&lt;/code&gt; function buffers the entire file. To minimize memory costs,
when possible prefer streaming via &lt;code&gt;fs.createReadStream()&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL|integer</type>
          <desc>`path` {string|Buffer|URL|integer} filename or file descriptor </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`null`</default>
              <desc>`encoding` {string|null} **Default:** `null` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'r'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>data</name>
              <type>string|Buffer</type>
              <desc>`data` {string|Buffer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>readFileSync</name>
      <signature>fs.readFileSync(path[, options])</signature>
      <desc>&lt;p&gt;Synchronous version of &lt;a href=&quot;#fs_fs_readfile_path_options_callback&quot;&gt;&lt;code&gt;fs.readFile()&lt;/code&gt;&lt;/a&gt;. Returns the contents of the &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;encoding&lt;/code&gt; option is specified then this function returns a
string. Otherwise it returns a buffer.&lt;/p&gt;
&lt;p&gt;Similar to &lt;a href=&quot;#fs_fs_readfile_path_options_callback&quot;&gt;&lt;code&gt;fs.readFile()&lt;/code&gt;&lt;/a&gt;, when the path is a directory, the behavior of
&lt;code&gt;fs.readFileSync()&lt;/code&gt; is platform-specific.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;// macOS, Linux, and Windows
fs.readFileSync(&amp;#39;&amp;lt;directory&amp;gt;&amp;#39;);
// =&amp;gt; [Error: EISDIR: illegal operation on a directory, read &amp;lt;directory&amp;gt;]

//  FreeBSD
fs.readFileSync(&amp;#39;&amp;lt;directory&amp;gt;&amp;#39;); // =&amp;gt; null, &amp;lt;data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL|integer</type>
          <desc>`path` {string|Buffer|URL|integer} filename or file descriptor </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`null`</default>
              <desc>`encoding` {string|null} **Default:** `null` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'r'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>string|Buffer</type>
        <desc>Returns: {string|Buffer} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>readlink</name>
      <signature>fs.readlink(path[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronous readlink(2). The callback gets two arguments &lt;code&gt;(err,
linkString)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>linkString</name>
              <type>string|Buffer</type>
              <desc>`linkString` {string|Buffer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>readlinkSync</name>
      <signature>fs.readlinkSync(path[, options])</signature>
      <desc>&lt;p&gt;Synchronous readlink(2). Returns the symbolic link&amp;#39;s string value.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>string|Buffer</type>
        <desc>Returns: {string|Buffer} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>readSync</name>
      <signature>fs.readSync(fd, buffer, offset, length, position)</signature>
      <desc>&lt;p&gt;Synchronous version of &lt;a href=&quot;#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt;&lt;code&gt;fs.read()&lt;/code&gt;&lt;/a&gt;. Returns the number of &lt;code&gt;bytesRead&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>number</type>
        <desc>Returns: {number} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>realpath</name>
      <signature>fs.realpath(path[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronously computes the canonical pathname by resolving &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt; and
symbolic links.&lt;/p&gt;
&lt;p&gt;Note that &amp;quot;canonical&amp;quot; does not mean &amp;quot;unique&amp;quot;: hard links and bind mounts can
expose a file system entity through many pathnames.&lt;/p&gt;
&lt;p&gt;This function behaves like realpath(3), with some exceptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;No case conversion is performed on case-insensitive file systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The maximum number of symbolic links is platform-independent and generally
(much) higher than what the native realpath(3) implementation supports.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;. May use &lt;code&gt;process.cwd&lt;/code&gt;
to resolve relative paths.&lt;/p&gt;
&lt;p&gt;Only paths that can be converted to UTF8 strings are supported.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; resolves to a socket or a pipe, the function will return a system
dependent name for that object.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>resolvedPath</name>
              <type>string|Buffer</type>
              <desc>`resolvedPath` {string|Buffer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>native</name>
      <signature>fs.realpath.native(path[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronous realpath(3).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Only paths that can be converted to UTF8 strings are supported.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;On Linux, when Node.js is linked against musl libc, the procfs file system must
be mounted on &lt;code&gt;/proc&lt;/code&gt; in order for this function to work. Glibc does not have
this restriction.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>resolvedPath</name>
              <type>string|Buffer</type>
              <desc>`resolvedPath` {string|Buffer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>realpathSync</name>
      <signature>fs.realpathSync(path[, options])</signature>
      <desc>&lt;p&gt;Synchronously computes the canonical pathname by resolving &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt; and
symbolic links.&lt;/p&gt;
&lt;p&gt;Note that &amp;quot;canonical&amp;quot; does not mean &amp;quot;unique&amp;quot;: hard links and bind mounts can
expose a file system entity through many pathnames.&lt;/p&gt;
&lt;p&gt;This function behaves like realpath(3), with some exceptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;No case conversion is performed on case-insensitive file systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The maximum number of symbolic links is platform-independent and generally
(much) higher than what the native realpath(3) implementation supports.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the returned value. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;, the path returned
will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; resolves to a socket or a pipe, the function will return a system
dependent name for that object.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>string|Buffer</type>
        <desc>Returns: {string|Buffer} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>native</name>
      <signature>fs.realpathSync.native(path[, options])</signature>
      <desc>&lt;p&gt;Synchronous realpath(3).&lt;/p&gt;
&lt;p&gt;Only paths that can be converted to UTF8 strings are supported.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an
object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for
the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;&amp;#39;buffer&amp;#39;&lt;/code&gt;,
the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;On Linux, when Node.js is linked against musl libc, the procfs file system must
be mounted on &lt;code&gt;/proc&lt;/code&gt; in order for this function to work. Glibc does not have
this restriction.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} **Default:** `'utf8'` </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>string|Buffer</type>
        <desc>Returns: {string|Buffer} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>rename</name>
      <signature>fs.rename(oldPath, newPath, callback)</signature>
      <desc>&lt;p&gt;Asynchronously rename file at &lt;code&gt;oldPath&lt;/code&gt; to the pathname provided
as &lt;code&gt;newPath&lt;/code&gt;. In the case that &lt;code&gt;newPath&lt;/code&gt; already exists, it will
be overwritten. No arguments other than a possible exception are
given to the completion callback.&lt;/p&gt;
&lt;p&gt;See also: rename(2).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.rename(&amp;#39;oldFile.txt&amp;#39;, &amp;#39;newFile.txt&amp;#39;, (err) =&amp;gt; {
  if (err) throw err;
  console.log(&amp;#39;Rename complete!&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;
      </desc>
      <parameters>
        <param>
          <name>oldPath</name>
          <type>string|Buffer|URL</type>
          <desc>`oldPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>newPath</name>
          <type>string|Buffer|URL</type>
          <desc>`newPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>renameSync</name>
      <signature>fs.renameSync(oldPath, newPath)</signature>
      <desc>&lt;p&gt;Synchronous rename(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>oldPath</name>
          <type>string|Buffer|URL</type>
          <desc>`oldPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>newPath</name>
          <type>string|Buffer|URL</type>
          <desc>`newPath` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>rmdir</name>
      <signature>fs.rmdir(path, callback)</signature>
      <desc>&lt;p&gt;Asynchronous rmdir(2). No arguments other than a possible exception are given
to the completion callback.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;fs.rmdir()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on
Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>rmdirSync</name>
      <signature>fs.rmdirSync(path)</signature>
      <desc>&lt;p&gt;Synchronous rmdir(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;fs.rmdirSync()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error
on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>stat</name>
      <signature>fs.stat(path, callback)</signature>
      <desc>&lt;p&gt;Asynchronous stat(2). The callback gets two arguments &lt;code&gt;(err, stats)&lt;/code&gt; where
&lt;code&gt;stats&lt;/code&gt; is an &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;
&lt;p&gt;In case of an error, the &lt;code&gt;err.code&lt;/code&gt; will be one of &lt;a href=&quot;errors.html#errors_common_system_errors&quot;&gt;Common System Errors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;fs.stat()&lt;/code&gt; to check for the existence of a file before calling
&lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended.
Instead, user code should open/read/write the file directly and handle the
error raised if the file is not available.&lt;/p&gt;
&lt;p&gt;To check if a file exists without manipulating it afterwards, &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt;
is recommended.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>stats</name>
              <type>fs.Stats</type>
              <desc>`stats` {fs.Stats} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>statSync</name>
      <signature>fs.statSync(path)</signature>
      <desc>&lt;p&gt;Synchronous stat(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>fs.Stats</type>
        <desc>Returns: {fs.Stats} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>symlink</name>
      <signature>fs.symlink(target, path[, type], callback)</signature>
      <desc>&lt;p&gt;Asynchronous symlink(2). No arguments other than a possible exception are given
to the completion callback. The &lt;code&gt;type&lt;/code&gt; argument can be set to &lt;code&gt;&amp;#39;dir&amp;#39;&lt;/code&gt;,
&lt;code&gt;&amp;#39;file&amp;#39;&lt;/code&gt;, or &lt;code&gt;&amp;#39;junction&amp;#39;&lt;/code&gt; and is only available on
Windows (ignored on other platforms). Note that Windows junction points require
the destination path to be absolute. When using &lt;code&gt;&amp;#39;junction&amp;#39;&lt;/code&gt;, the &lt;code&gt;target&lt;/code&gt;
argument will automatically be normalized to absolute path.&lt;/p&gt;
&lt;p&gt;Here is an example below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.symlink(&amp;#39;./foo&amp;#39;, &amp;#39;./new-port&amp;#39;, callback);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It creates a symbolic link named &amp;quot;new-port&amp;quot; that points to &amp;quot;foo&amp;quot;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>target</name>
          <type>string|Buffer|URL</type>
          <desc>`target` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>type</name>
          <type>string</type>
          <desc>`type` {string} **Default:** `'file'` </desc>
          <default>`'file'`</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>symlinkSync</name>
      <signature>fs.symlinkSync(target, path[, type])</signature>
      <desc>&lt;p&gt;Synchronous symlink(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>target</name>
          <type>string|Buffer|URL</type>
          <desc>`target` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>type</name>
          <type>string</type>
          <desc>`type` {string} **Default:** `'file'` </desc>
          <default>`'file'`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>truncate</name>
      <signature>fs.truncate(path[, len], callback)</signature>
      <desc>&lt;p&gt;Asynchronous truncate(2). No arguments other than a possible exception are
given to the completion callback. A file descriptor can also be passed as the
first argument. In this case, &lt;code&gt;fs.ftruncate()&lt;/code&gt; is called.&lt;/p&gt;
&lt;p&gt;Passing a file descriptor is deprecated and may result in an error being thrown
in the future.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>truncateSync</name>
      <signature>fs.truncateSync(path[, len])</signature>
      <desc>&lt;p&gt;Synchronous truncate(2). Returns &lt;code&gt;undefined&lt;/code&gt;. A file descriptor can also be
passed as the first argument. In this case, &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; is called.&lt;/p&gt;
&lt;p&gt;Passing a file descriptor is deprecated and may result in an error being thrown
in the future.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>len</name>
          <type>integer</type>
          <desc>`len` {integer} **Default:** `0` </desc>
          <default>`0`</default>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>unlink</name>
      <signature>fs.unlink(path, callback)</signature>
      <desc>&lt;p&gt;Asynchronously removes a file or symbolic link. No arguments other than a
possible exception are given to the completion callback.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;// Assuming that &amp;#39;path/file.txt&amp;#39; is a regular file.
fs.unlink(&amp;#39;path/file.txt&amp;#39;, (err) =&amp;gt; {
  if (err) throw err;
  console.log(&amp;#39;path/file.txt was deleted&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fs.unlink()&lt;/code&gt; will not work on a directory, empty or otherwise. To remove a
directory, use &lt;a href=&quot;#fs_fs_rmdir_path_callback&quot;&gt;&lt;code&gt;fs.rmdir()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also: unlink(2).&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>unlinkSync</name>
      <signature>fs.unlinkSync(path)</signature>
      <desc>&lt;p&gt;Synchronous unlink(2). Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>unwatchFile</name>
      <signature>fs.unwatchFile(filename[, listener])</signature>
      <desc>&lt;p&gt;Stop watching for changes on &lt;code&gt;filename&lt;/code&gt;. If &lt;code&gt;listener&lt;/code&gt; is specified, only that
particular listener is removed. Otherwise, &lt;em&gt;all&lt;/em&gt; listeners are removed,
effectively stopping watching of &lt;code&gt;filename&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;fs.unwatchFile()&lt;/code&gt; with a filename that is not being watched is a
no-op, not an error.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile()&lt;/code&gt; and
&lt;code&gt;fs.unwatchFile()&lt;/code&gt;. &lt;code&gt;fs.watch()&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile()&lt;/code&gt;
and &lt;code&gt;fs.unwatchFile()&lt;/code&gt; when possible.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filename</name>
          <type>string|Buffer|URL</type>
          <desc>`filename` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>listener</name>
          <type>Function</type>
          <desc>`listener` {Function} Optional, a listener previously attached using `fs.watchFile()` </desc>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>utimes</name>
      <signature>fs.utimes(path, atime, mtime, callback)</signature>
      <desc>&lt;p&gt;Change the file system timestamps of the object referenced by &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt; arguments follow these rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values can be either numbers representing Unix epoch time, &lt;code&gt;Date&lt;/code&gt;s, or a
numeric string like &lt;code&gt;&amp;#39;123456789.0&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the value can not be converted to a number, or is &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or
&lt;code&gt;-Infinity&lt;/code&gt;, an &lt;code&gt;Error&lt;/code&gt; will be thrown.&lt;/li&gt;
&lt;/ul&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>atime</name>
          <type>number|string|Date</type>
          <desc>`atime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>number|string|Date</type>
          <desc>`mtime` {number|string|Date} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>utimesSync</name>
      <signature>fs.utimesSync(path, atime, mtime)</signature>
      <desc>&lt;p&gt;Synchronous version of &lt;a href=&quot;#fs_fs_utimes_path_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.utimes()&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>path</name>
          <type>string|Buffer|URL</type>
          <desc>`path` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>atime</name>
          <type>integer</type>
          <desc>`atime` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>mtime</name>
          <type>integer</type>
          <desc>`mtime` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>watch</name>
      <signature>fs.watch(filename[, options][, listener])</signature>
      <desc>&lt;p&gt;Watch for changes on &lt;code&gt;filename&lt;/code&gt;, where &lt;code&gt;filename&lt;/code&gt; is either a file or a
directory.&lt;/p&gt;
&lt;p&gt;The second argument is optional. If &lt;code&gt;options&lt;/code&gt; is provided as a string, it
specifies the &lt;code&gt;encoding&lt;/code&gt;. Otherwise &lt;code&gt;options&lt;/code&gt; should be passed as an object.&lt;/p&gt;
&lt;p&gt;The listener callback gets two arguments &lt;code&gt;(eventType, filename)&lt;/code&gt;. &lt;code&gt;eventType&lt;/code&gt;
is either &lt;code&gt;&amp;#39;rename&amp;#39;&lt;/code&gt; or &lt;code&gt;&amp;#39;change&amp;#39;&lt;/code&gt;, and &lt;code&gt;filename&lt;/code&gt; is the name of the file
which triggered the event.&lt;/p&gt;
&lt;p&gt;Note that on most platforms, &lt;code&gt;&amp;#39;rename&amp;#39;&lt;/code&gt; is emitted whenever a filename appears
or disappears in the directory.&lt;/p&gt;
&lt;p&gt;Also note the listener callback is attached to the &lt;code&gt;&amp;#39;change&amp;#39;&lt;/code&gt; event fired by
&lt;a href=&quot;#fs_class_fs_fswatcher&quot;&gt;&lt;code&gt;fs.FSWatcher&lt;/code&gt;&lt;/a&gt;, but it is not the same thing as the &lt;code&gt;&amp;#39;change&amp;#39;&lt;/code&gt; value of
&lt;code&gt;eventType&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>filename</name>
          <type>string|Buffer|URL</type>
          <desc>`filename` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>string|Object</type>
          <desc>`options` {string|Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>persistent</name>
              <type>boolean</type>
              <default>`true`</default>
              <desc>`persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. </desc>
            </option>
            <option>
              <name>recursive</name>
              <type>boolean</type>
              <default>`false`</default>
              <desc>`recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [Caveats][]). **Default:** `false`. </desc>
            </option>
            <option>
              <name>encoding</name>
              <type>string</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string} Specifies the character encoding to be used for the  filename passed to the listener. **Default:** `'utf8'`. </desc>
            </option>
          </options>
        </param>
        <param>
          <name>listener</name>
          <type>Function|undefined</type>
          <desc>`listener` {Function|undefined} **Default:** `undefined` </desc>
          <default>`undefined`</default>
          <optional>true</optional>
          <options>
            <option>
              <name>eventType</name>
              <type>string</type>
              <desc>`eventType` {string} </desc>
            </option>
            <option>
              <name>filename</name>
              <type>string|Buffer</type>
              <desc>`filename` {string|Buffer} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return>
        <type>fs.FSWatcher</type>
        <desc>Returns: {fs.FSWatcher} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>watchFile</name>
      <signature>fs.watchFile(filename[, options], listener)</signature>
      <desc>&lt;p&gt;Watch for changes on &lt;code&gt;filename&lt;/code&gt;. The callback &lt;code&gt;listener&lt;/code&gt; will be called each
time the file is accessed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; argument may be omitted. If provided, it should be an object. The
&lt;code&gt;options&lt;/code&gt; object may contain a boolean named &lt;code&gt;persistent&lt;/code&gt; that indicates
whether the process should continue to run as long as files are being watched.
The &lt;code&gt;options&lt;/code&gt; object may specify an &lt;code&gt;interval&lt;/code&gt; property indicating how often the
target should be polled in milliseconds.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;listener&lt;/code&gt; gets two arguments the current stat object and the previous
stat object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.watchFile(&amp;#39;message.text&amp;#39;, (curr, prev) =&amp;gt; {
  console.log(`the current mtime is: ${curr.mtime}`);
  console.log(`the previous mtime was: ${prev.mtime}`);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be notified when the file was modified, not just accessed, it is necessary
to compare &lt;code&gt;curr.mtime&lt;/code&gt; and &lt;code&gt;prev.mtime&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When an &lt;code&gt;fs.watchFile&lt;/code&gt; operation results in an &lt;code&gt;ENOENT&lt;/code&gt; error, it
will invoke the listener once, with all the fields zeroed (or, for dates, the
Unix Epoch). In Windows, &lt;code&gt;blksize&lt;/code&gt; and &lt;code&gt;blocks&lt;/code&gt; fields will be &lt;code&gt;undefined&lt;/code&gt;,
instead of zero. If the file is created later on, the listener will be called
again, with the latest stat objects. This is a change in functionality since
v0.10.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile&lt;/code&gt; and
&lt;code&gt;fs.unwatchFile&lt;/code&gt;. &lt;code&gt;fs.watch&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile&lt;/code&gt; and
&lt;code&gt;fs.unwatchFile&lt;/code&gt; when possible.&lt;/p&gt;
&lt;p&gt;When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears,
then the &lt;code&gt;previousStat&lt;/code&gt; reported in the second callback event (the file&amp;#39;s
reappearance) will be the same as the &lt;code&gt;previousStat&lt;/code&gt; of the first callback
event (its disappearance).&lt;/p&gt;
&lt;p&gt;This happens when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the file is deleted, followed by a restore&lt;/li&gt;
&lt;li&gt;the file is renamed twice - the second time back to its original name&lt;/li&gt;
&lt;/ul&gt;
      </desc>
      <parameters>
        <param>
          <name>filename</name>
          <type>string|Buffer|URL</type>
          <desc>`filename` {string|Buffer|URL} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object</type>
          <desc>`options` {Object} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>persistent</name>
              <type>boolean</type>
              <default>`true`</default>
              <desc>`persistent` {boolean} **Default:** `true` </desc>
            </option>
            <option>
              <name>interval</name>
              <type>integer</type>
              <default>`5007`</default>
              <desc>`interval` {integer} **Default:** `5007` </desc>
            </option>
          </options>
        </param>
        <param>
          <name>listener</name>
          <type>Function</type>
          <desc>`listener` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>current</name>
              <type>fs.Stats</type>
              <desc>`current` {fs.Stats} </desc>
            </option>
            <option>
              <name>previous</name>
              <type>fs.Stats</type>
              <desc>`previous` {fs.Stats} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>write</name>
      <signature>fs.write(fd, buffer[, offset[, length[, position]]], callback)</signature>
      <desc>&lt;p&gt;Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt; determines the part of the buffer to be written, and &lt;code&gt;length&lt;/code&gt; is
an integer specifying the number of bytes to write.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; refers to the offset from the beginning of the file where this data
should be written. If &lt;code&gt;typeof position !== &amp;#39;number&amp;#39;&lt;/code&gt;, the data will be written
at the current position. See pwrite(2).&lt;/p&gt;
&lt;p&gt;The callback will be given three arguments &lt;code&gt;(err, bytesWritten, buffer)&lt;/code&gt; where
&lt;code&gt;bytesWritten&lt;/code&gt; specifies how many &lt;em&gt;bytes&lt;/em&gt; were written from &lt;code&gt;buffer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If this method is invoked as its &lt;a href=&quot;util.html#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns
a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesWritten&lt;/code&gt; and &lt;code&gt;buffer&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;Note that it is unsafe to use &lt;code&gt;fs.write&lt;/code&gt; multiple times on the same file
without waiting for the callback. For this scenario,
&lt;code&gt;fs.createWriteStream&lt;/code&gt; is strongly recommended.&lt;/p&gt;
&lt;p&gt;On Linux, positional writes don&amp;#39;t work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>bytesWritten</name>
              <type>integer</type>
              <desc>`bytesWritten` {integer} </desc>
            </option>
            <option>
              <name>buffer</name>
              <type>Buffer|Uint8Array</type>
              <desc>`buffer` {Buffer|Uint8Array} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>write</name>
      <signature>fs.write(fd, string[, position[, encoding]], callback)</signature>
      <desc>&lt;p&gt;Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, then
the value will be coerced to one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; refers to the offset from the beginning of the file where this data
should be written. If &lt;code&gt;typeof position !== &amp;#39;number&amp;#39;&lt;/code&gt; the data will be written at
the current position. See pwrite(2).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;encoding&lt;/code&gt; is the expected string encoding.&lt;/p&gt;
&lt;p&gt;The callback will receive the arguments &lt;code&gt;(err, written, string)&lt;/code&gt; where &lt;code&gt;written&lt;/code&gt;
specifies how many &lt;em&gt;bytes&lt;/em&gt; the passed string required to be written. Note that
bytes written is not the same as string characters. See &lt;a href=&quot;buffer.html#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;&lt;code&gt;Buffer.byteLength&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that it is unsafe to use &lt;code&gt;fs.write&lt;/code&gt; multiple times on the same file
without waiting for the callback. For this scenario,
&lt;code&gt;fs.createWriteStream&lt;/code&gt; is strongly recommended.&lt;/p&gt;
&lt;p&gt;On Linux, positional writes don&amp;#39;t work when the file is opened in append mode.
The kernel ignores the position argument and always appends the data to
the end of the file.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>string</name>
          <type>string</type>
          <desc>`string` {string} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>encoding</name>
          <type>string</type>
          <desc>`encoding` {string} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
            <option>
              <name>written</name>
              <type>integer</type>
              <desc>`written` {integer} </desc>
            </option>
            <option>
              <name>string</name>
              <type>string</type>
              <desc>`string` {string} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>writeFile</name>
      <signature>fs.writeFile(file, data[, options], callback)</signature>
      <desc>&lt;p&gt;Asynchronously writes data to a file, replacing the file if it already exists.
&lt;code&gt;data&lt;/code&gt; can be a string or a buffer.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.writeFile(&amp;#39;message.txt&amp;#39;, &amp;#39;Hello Node.js&amp;#39;, (err) =&amp;gt; {
  if (err) throw err;
  console.log(&amp;#39;The file has been saved!&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;options&lt;/code&gt; is a string, then it specifies the encoding. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;fs.writeFile(&amp;#39;message.txt&amp;#39;, &amp;#39;Hello Node.js&amp;#39;, &amp;#39;utf8&amp;#39;, callback);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any specified file descriptor has to support writing.&lt;/p&gt;
&lt;p&gt;Note that it is unsafe to use &lt;code&gt;fs.writeFile&lt;/code&gt; multiple times on the same file
without waiting for the callback. For this scenario,
&lt;code&gt;fs.createWriteStream&lt;/code&gt; is strongly recommended.&lt;/p&gt;
&lt;p&gt;If a file descriptor is specified as the &lt;code&gt;file&lt;/code&gt;, it will not be closed
automatically.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>file</name>
          <type>string|Buffer|URL|integer</type>
          <desc>`file` {string|Buffer|URL|integer} filename or file descriptor </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>data</name>
          <type>string|Buffer|Uint8Array</type>
          <desc>`data` {string|Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'w'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. </desc>
            </option>
          </options>
        </param>
        <param>
          <name>callback</name>
          <type>Function</type>
          <desc>`callback` {Function} </desc>
          <optional>false</optional>
          <options>
            <option>
              <name>err</name>
              <type>Error</type>
              <desc>`err` {Error} </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>writeFileSync</name>
      <signature>fs.writeFileSync(file, data[, options])</signature>
      <desc>&lt;p&gt;The synchronous version of &lt;a href=&quot;#fs_fs_writefile_file_data_options_callback&quot;&gt;&lt;code&gt;fs.writeFile()&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>file</name>
          <type>string|Buffer|URL|integer</type>
          <desc>`file` {string|Buffer|URL|integer} filename or file descriptor </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>data</name>
          <type>string|Buffer|Uint8Array</type>
          <desc>`data` {string|Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>options</name>
          <type>Object|string</type>
          <desc>`options` {Object|string} </desc>
          <optional>true</optional>
          <options>
            <option>
              <name>encoding</name>
              <type>string|null</type>
              <default>`'utf8'`</default>
              <desc>`encoding` {string|null} **Default:** `'utf8'` </desc>
            </option>
            <option>
              <name>mode</name>
              <type>integer</type>
              <default>`0o666`</default>
              <desc>`mode` {integer} **Default:** `0o666` </desc>
            </option>
            <option>
              <name>flag</name>
              <type>string</type>
              <default>`'w'`</default>
              <desc>`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. </desc>
            </option>
          </options>
        </param>
      </parameters>
      <return/>
</method>
    <method>
      <class>fs</class>
      <name>writeSync</name>
      <signature>fs.writeSync(fd, buffer[, offset[, length[, position]]])</signature>
      <desc>&lt;p&gt;Synchronous versions of &lt;a href=&quot;#fs_fs_write_fd_buffer_offset_length_position_callback&quot;&gt;&lt;code&gt;fs.write()&lt;/code&gt;&lt;/a&gt;. Returns the number of bytes written.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>buffer</name>
          <type>Buffer|Uint8Array</type>
          <desc>`buffer` {Buffer|Uint8Array} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>offset</name>
          <type>integer</type>
          <desc>`offset` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>length</name>
          <type>integer</type>
          <desc>`length` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>number</type>
        <desc>Returns: {number} </desc>
      </return>
    </method>
    <method>
      <class>fs</class>
      <name>writeSync</name>
      <signature>fs.writeSync(fd, string[, position[, encoding]])</signature>
      <desc>&lt;p&gt;Synchronous versions of &lt;a href=&quot;#fs_fs_write_fd_buffer_offset_length_position_callback&quot;&gt;&lt;code&gt;fs.write()&lt;/code&gt;&lt;/a&gt;. Returns the number of bytes written.&lt;/p&gt;
      </desc>
      <parameters>
        <param>
          <name>fd</name>
          <type>integer</type>
          <desc>`fd` {integer} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>string</name>
          <type>string</type>
          <desc>`string` {string} </desc>
          <optional>false</optional>
          <options/>
</param>
        <param>
          <name>position</name>
          <type>integer</type>
          <desc>`position` {integer} </desc>
          <optional>true</optional>
          <options/>
</param>
        <param>
          <name>encoding</name>
          <type>string</type>
          <desc>`encoding` {string} </desc>
          <optional>true</optional>
          <options/>
</param>
      </parameters>
      <return>
        <type>number</type>
        <desc>Returns: {number} </desc>
      </return>
    </method>
  </methods>
</api>