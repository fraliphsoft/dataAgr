/*
 Navicat MySQL Data Transfer

 Source Server         : mysql
 Source Server Type    : MySQL
 Source Server Version : 80011
 Source Host           : localhost:3306
 Source Schema         : jsdoc

 Target Server Type    : MySQL
 Target Server Version : 80011
 File Encoding         : 65001

 Date: 31/05/2018 18:00:46
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for methods
-- ----------------------------
DROP TABLE IF EXISTS `methods`;
CREATE TABLE `methods`  (
  `mid` int(11) NOT NULL AUTO_INCREMENT,
  `class` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `signature` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `desc` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `return_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `return_desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `lib_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`mid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 415 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of methods
-- ----------------------------
INSERT INTO `methods` VALUES (1, '_', 'dropRightWhile', '_.dropRightWhile(array, [predicate=_.identity])', 'Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (2, '_', 'difference', '_.difference(array, [values])', 'Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.\nNote: Unlike _.pullAll, this method returns a new array.', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (3, '_', 'chunk', '_.chunk(array, [size=1])', 'Creates an array of elements split into groups the length of size. If array can\'t be split evenly, the final chunk will be the remaining elements.', 'Array', 'Returns the new array of chunks.', 'lodash');
INSERT INTO `methods` VALUES (4, '_', 'concat', '_.concat(array, [values])', 'Creates a new array concatenating array with any additional arrays and/or values.', 'Array', 'Returns the new concatenated array.', 'lodash');
INSERT INTO `methods` VALUES (5, '_', 'drop', '_.drop(array, [n=1])', 'Creates a slice of array with n elements dropped from the beginning.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (6, '_', 'dropWhile', '_.dropWhile(array, [predicate=_.identity])', 'Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (7, '_', 'differenceWith', '_.differenceWith(array, [values], [comparator])', 'This method is like _.difference except that it accepts comparator which is invoked to compare elements of array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).\nNote: Unlike _.pullAllWith, this method returns a new array.', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (8, '_', 'dropRight', '_.dropRight(array, [n=1])', 'Creates a slice of array with n elements dropped from the end.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (9, '_', 'differenceBy', '_.differenceBy(array, [values], [iteratee=_.identity])', 'This method is like _.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they\'re compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:\n(value).\nNote: Unlike _.pullAllBy, this method returns a new array.', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (10, '_', 'compact', '_.compact(array)', 'Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey.', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (11, '_', 'findIndex', '_.findIndex(array, [predicate=_.identity], [fromIndex=0])', 'This method is like _.find except that it returns the index of the first element predicate returns truthy for instead of the element itself.', 'number', 'Returns the index of the found element, else -1.', 'lodash');
INSERT INTO `methods` VALUES (12, '_', 'flattenDepth', '_.flattenDepth(array, [depth=1])', 'Recursively flatten array up to depth times.', 'Array', 'Returns the new flattened array.', 'lodash');
INSERT INTO `methods` VALUES (13, '_', 'fromPairs', '_.fromPairs(pairs)', 'The inverse of _.toPairs; this method returns an object composed from key-value pairs.', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (14, '_', 'head', '_.head(array)', 'Gets the first element of array.', '.firs', NULL, 'lodash');
INSERT INTO `methods` VALUES (15, '_', 'indexOf', '_.indexOf(array, value, [fromIndex=0])', 'Gets the index at which the first occurrence of value is found in array using SameValueZero for equality comparisons. If fromIndex is negative, it\'s used as the offset from the end of array.', 'number', 'Returns the index of the matched value, else -1.', 'lodash');
INSERT INTO `methods` VALUES (16, '_', 'initial', '_.initial(array)', 'Gets all but the last element of array.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (17, '_', 'fill', '_.fill(array, value, [start=0], [end=array.length])', 'Fills elements of array with value from start up to, but not including, end.\nNote: This method mutates array.', 'Array', 'Returns array.', 'lodash');
INSERT INTO `methods` VALUES (18, '_', 'findLastIndex', '_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])', 'This method is like _.findIndex except that it iterates over elements of collection from right to left.', 'number', 'Returns the index of the found element, else -1.', 'lodash');
INSERT INTO `methods` VALUES (19, '_', 'flatten', '_.flatten(array)', 'Flattens array a single level deep.', 'Array', 'Returns the new flattened array.', 'lodash');
INSERT INTO `methods` VALUES (20, '_', 'flattenDeep', '_.flattenDeep(array)', 'Recursively flattens array.', 'Array', 'Returns the new flattened array.', 'lodash');
INSERT INTO `methods` VALUES (21, '_', 'intersection', '_.intersection([arrays])', 'Creates an array of unique values that are included in all given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.', 'Array', 'Returns the new array of intersecting values.', 'lodash');
INSERT INTO `methods` VALUES (22, '_', 'last', '_.last(array)', 'Gets the last element of array.', '*', 'Returns the last element of array.', 'lodash');
INSERT INTO `methods` VALUES (23, '_', 'pull', '_.pull(array, [values])', 'Removes all given values from array using SameValueZero for equality comparisons.\nNote: Unlike _.without, this method mutates array. Use _.remove to remove elements from an array by predicate.', 'Array', 'Returns array.', 'lodash');
INSERT INTO `methods` VALUES (24, '_', 'intersectionBy', '_.intersectionBy([arrays], [iteratee=_.identity])', 'This method is like _.intersection except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which they\'re compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:\n(value).', 'Array', 'Returns the new array of intersecting values.', 'lodash');
INSERT INTO `methods` VALUES (25, '_', 'intersectionWith', '_.intersectionWith([arrays], [comparator])', 'This method is like _.intersection except that it accepts comparator which is invoked to compare elements of arrays. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).', 'Array', 'Returns the new array of intersecting values.', 'lodash');
INSERT INTO `methods` VALUES (26, '_', 'join', '_.join(array, [separator=\',\'])', 'Converts all elements in array into a string separated by separator.', 'string', 'Returns the joined string.', 'lodash');
INSERT INTO `methods` VALUES (27, '_', 'lastIndexOf', '_.lastIndexOf(array, value, [fromIndex=array.length-1])', 'This method is like _.indexOf except that it iterates over elements of array from right to left.', 'number', 'Returns the index of the matched value, else -1.', 'lodash');
INSERT INTO `methods` VALUES (28, '_', 'nth', '_.nth(array, [n=0])', 'Gets the element at index n of array. If n is negative, the nth element from the end is returned.', '*', 'Returns the nth element of array.', 'lodash');
INSERT INTO `methods` VALUES (29, '_', 'pullAll', '_.pullAll(array, values)', 'This method is like _.pull except that it accepts an array of values to remove.\nNote: Unlike _.difference, this method mutates array.', 'Array', 'Returns array.', 'lodash');
INSERT INTO `methods` VALUES (30, '_', 'pullAllBy', '_.pullAllBy(array, values, [iteratee=_.identity])', 'This method is like _.pullAll except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they\'re compared. The iteratee is invoked with one argument: (value).\nNote: Unlike _.differenceBy, this method mutates array.', 'Array', 'Returns array.', 'lodash');
INSERT INTO `methods` VALUES (31, '_', 'pullAllWith', '_.pullAllWith(array, values, [comparator])', 'This method is like _.pullAll except that it accepts comparator which is invoked to compare elements of array to values. The comparator is invoked with two arguments: (arrVal, othVal).\nNote: Unlike _.differenceWith, this method mutates array.', 'Array', 'Returns array.', 'lodash');
INSERT INTO `methods` VALUES (32, '_', 'pullAt', '_.pullAt(array, [indexes])', 'Removes elements from array corresponding to indexes and returns an array of removed elements.\nNote: Unlike _.at, this method mutates array.', 'Array', 'Returns the new array of removed elements.', 'lodash');
INSERT INTO `methods` VALUES (33, '_', 'remove', '_.remove(array, [predicate=_.identity])', 'Removes all elements from array that predicate returns truthy for and returns an array of the removed elements. The predicate is invoked with three arguments: (value, index, array).\nNote: Unlike _.filter, this method mutates array. Use _.pull to pull elements from an array by value.', 'Array', 'Returns the new array of removed elements.', 'lodash');
INSERT INTO `methods` VALUES (34, '_', 'reverse', '_.reverse(array)', 'Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on.\nNote: This method mutates array and is based on Array#reverse.', 'Array', 'Returns array.', 'lodash');
INSERT INTO `methods` VALUES (35, '_', 'slice', '_.slice(array, [start=0], [end=array.length])', 'Creates a slice of array from start up to, but not including, end.\nNote: This method is used instead of Array#slice to ensure dense arrays are returned.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (36, '_', 'sortedIndex', '_.sortedIndex(array, value)', 'Uses a binary search to determine the lowest index at which value should be inserted into array in order to maintain its sort order.', 'number', 'Returns the index at which value should be inserted into array.', 'lodash');
INSERT INTO `methods` VALUES (37, '_', 'sortedIndexOf', '_.sortedIndexOf(array, value)', 'This method is like _.indexOf except that it performs a binary search on a sorted array.', 'number', 'Returns the index of the matched value, else -1.', 'lodash');
INSERT INTO `methods` VALUES (38, '_', 'sortedLastIndex', '_.sortedLastIndex(array, value)', 'This method is like _.sortedIndex except that it returns the highest index at which value should be inserted into array in order to maintain its sort order.', 'number', 'Returns the index at which value should be inserted into array.', 'lodash');
INSERT INTO `methods` VALUES (39, '_', 'sortedLastIndexBy', '_.sortedLastIndexBy(array, value, [iteratee=_.identity])', 'This method is like _.sortedLastIndex except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking. The iteratee is invoked with one argument: (value).', 'number', 'Returns the index at which value should be inserted into array.', 'lodash');
INSERT INTO `methods` VALUES (40, '_', 'sortedLastIndexOf', '_.sortedLastIndexOf(array, value)', 'This method is like _.lastIndexOf except that it performs a binary search on a sorted array.', 'number', 'Returns the index of the matched value, else -1.', 'lodash');
INSERT INTO `methods` VALUES (41, '_', 'sortedIndexBy', '_.sortedIndexBy(array, value, [iteratee=_.identity])', 'This method is like _.sortedIndex except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking. The iteratee is invoked with one argument: (value).', 'number', 'Returns the index at which value should be inserted into array.', 'lodash');
INSERT INTO `methods` VALUES (42, '_', 'sortedUniq', '_.sortedUniq(array)', 'This method is like _.uniq except that it\'s designed and optimized for sorted arrays.', 'Array', 'Returns the new duplicate free array.', 'lodash');
INSERT INTO `methods` VALUES (43, '_', 'sortedUniqBy', '_.sortedUniqBy(array, [iteratee])', 'This method is like _.uniqBy except that it\'s designed and optimized for sorted arrays.', 'Array', 'Returns the new duplicate free array.', 'lodash');
INSERT INTO `methods` VALUES (44, '_', 'take', '_.take(array, [n=1])', 'Creates a slice of array with n elements taken from the beginning.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (45, '_', 'takeWhile', '_.takeWhile(array, [predicate=_.identity])', 'Creates a slice of array with elements taken from the beginning. Elements are taken until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (46, '_', 'tail', '_.tail(array)', 'Gets all but the first element of array.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (47, '_', 'takeRight', '_.takeRight(array, [n=1])', 'Creates a slice of array with n elements taken from the end.', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (48, '_', 'takeRightWhile', '_.takeRightWhile(array, [predicate=_.identity])', 'Creates a slice of array with elements taken from the end. Elements are taken until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).', 'Array', 'Returns the slice of array.', 'lodash');
INSERT INTO `methods` VALUES (49, '_', 'union', '_.union([arrays])', 'Creates an array of unique values, in order, from all given arrays using SameValueZero for equality comparisons.', 'Array', 'Returns the new array of combined values.', 'lodash');
INSERT INTO `methods` VALUES (50, '_', 'unionBy', '_.unionBy([arrays], [iteratee=_.identity])', 'This method is like _.union except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which uniqueness is computed. Result values are chosen from the first array in which the value occurs. The iteratee is invoked with one argument:\n(value).', 'Array', 'Returns the new array of combined values.', 'lodash');
INSERT INTO `methods` VALUES (51, '_', 'unionWith', '_.unionWith([arrays], [comparator])', 'This method is like _.union except that it accepts comparator which is invoked to compare elements of arrays. Result values are chosen from the first array in which the value occurs. The comparator is invoked with two arguments: (arrVal, othVal).', 'Array', 'Returns the new array of combined values.', 'lodash');
INSERT INTO `methods` VALUES (52, '_', 'uniqBy', '_.uniqBy(array, [iteratee=_.identity])', 'This method is like _.uniq except that it accepts iteratee which is invoked for each element in array to generate the criterion by which uniqueness is computed. The order of result values is determined by the order they occur in the array. The iteratee is invoked with one argument:\n(value).', 'Array', 'Returns the new duplicate free array.', 'lodash');
INSERT INTO `methods` VALUES (53, '_', 'uniq', '_.uniq(array)', 'Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.', 'Array', 'Returns the new duplicate free array.', 'lodash');
INSERT INTO `methods` VALUES (54, '_', 'uniqWith', '_.uniqWith(array, [comparator])', 'This method is like _.uniq except that it accepts comparator which is invoked to compare elements of array. The order of result values is determined by the order they occur in the array.The comparator is invoked with two arguments: (arrVal, othVal).', 'Array', 'Returns the new duplicate free array.', 'lodash');
INSERT INTO `methods` VALUES (55, '_', 'unzip', '_.unzip(array)', 'This method is like _.zip except that it accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration.', 'Array', 'Returns the new array of regrouped elements.', 'lodash');
INSERT INTO `methods` VALUES (56, '_', 'unzipWith', '_.unzipWith(array, [iteratee=_.identity])', 'This method is like _.unzip except that it accepts iteratee to specify how regrouped values should be combined. The iteratee is invoked with the elements of each group: (...group).', 'Array', 'Returns the new array of regrouped elements.', 'lodash');
INSERT INTO `methods` VALUES (57, '_', 'without', '_.without(array, [values])', 'Creates an array excluding all given values using SameValueZero for equality comparisons.\nNote: Unlike _.pull, this method returns a new array.', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (58, '_', 'xor', '_.xor([arrays])', 'Creates an array of unique values that is the symmetric difference of the given arrays. The order of result values is determined by the order they occur in the arrays.', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (59, '_', 'xorBy', '_.xorBy([arrays], [iteratee=_.identity])', 'This method is like _.xor except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which by which they\'re compared. The order of result values is determined by the order they occur in the arrays. The iteratee is invoked with one argument: (value).', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (60, '_', 'zipObjectDeep', '_.zipObjectDeep([props=[]], [values=[]])', 'This method is like _.zipObject except that it supports property paths.', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (61, '_', 'zipWith', '_.zipWith([arrays], [iteratee=_.identity])', 'This method is like _.zip except that it accepts iteratee to specify how grouped values should be combined. The iteratee is invoked with the elements of each group: (...group).', 'Array', 'Returns the new array of grouped elements.', 'lodash');
INSERT INTO `methods` VALUES (62, '_', 'countBy', '_.countBy(collection, [iteratee=_.identity])', 'Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The corresponding value of each key is the number of times the key was returned by iteratee. The iteratee is invoked with one argument: (value).', 'Object', 'Returns the composed aggregate object.', 'lodash');
INSERT INTO `methods` VALUES (63, '_', 'every', '_.every(collection, [predicate=_.identity])', 'Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate returns falsey. The predicate is invoked with three arguments: (value, index|key, collection).\nNote: This method returns true for empty collections because everything is true of elements of empty collections.', 'boolean', 'Returns true if all elements pass the predicate check, else false.', 'lodash');
INSERT INTO `methods` VALUES (64, '_', 'filter', '_.filter(collection, [predicate=_.identity])', 'Iterates over elements of collection, returning an array of all elements predicate returns truthy for. The predicate is invoked with three arguments: (value, index|key, collection).\nNote: Unlike _.remove, this method returns a new array.', 'Array', 'Returns the new filtered array.', 'lodash');
INSERT INTO `methods` VALUES (65, '_', 'xorWith', '_.xorWith([arrays], [comparator])', 'This method is like _.xor except that it accepts comparator which is invoked to compare elements of arrays. The order of result values is determined by the order they occur in the arrays. The comparator is invoked with two arguments: (arrVal, othVal).', 'Array', 'Returns the new array of filtered values.', 'lodash');
INSERT INTO `methods` VALUES (66, '_', 'zip', '_.zip([arrays])', 'Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.', 'Array', 'Returns the new array of grouped elements.', 'lodash');
INSERT INTO `methods` VALUES (67, '_', 'zipObject', '_.zipObject([props=[]], [values=[]])', 'This method is like _.fromPairs except that it accepts two arrays, one of property identifiers and one of corresponding values.', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (68, '_', 'find', '_.find(collection, [predicate=_.identity], [fromIndex=0])', 'Iterates over elements of collection, returning the first element predicate returns truthy for. The predicate is invoked with three arguments: (value, index|key, collection).', '*', 'Returns the matched element, else undefined.', 'lodash');
INSERT INTO `methods` VALUES (69, '_', 'findLast', '_.findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])', 'This method is like _.find except that it iterates over elements of collection from right to left.', '*', 'Returns the matched element, else undefined.', 'lodash');
INSERT INTO `methods` VALUES (70, '_', 'flatMap', '_.flatMap(collection, [iteratee=_.identity])', 'Creates a flattened array of values by running each element in collection thru iteratee and flattening the mapped results. The iteratee is invoked with three arguments: (value, index|key, collection).', 'Array', 'Returns the new flattened array.', 'lodash');
INSERT INTO `methods` VALUES (71, '_', 'flatMapDeep', '_.flatMapDeep(collection, [iteratee=_.identity])', 'This method is like _.flatMap except that it recursively flattens the mapped results.', 'Array', 'Returns the new flattened array.', 'lodash');
INSERT INTO `methods` VALUES (72, '_', 'flatMapDepth', '_.flatMapDepth(collection, [iteratee=_.identity], [depth=1])', 'This method is like _.flatMap except that it recursively flattens the mapped results up to depth times.', 'Array', 'Returns the new flattened array.', 'lodash');
INSERT INTO `methods` VALUES (73, '_', 'forEach', '_.forEach(collection, [iteratee=_.identity])', 'Iterates over elements of collection and invokes iteratee for each element. The iteratee is invoked with three arguments: (value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false.\nNote: As with other \"Collections\" methods, objects with a \"length\" property are iterated like arrays. To avoid this behavior use _.forIn or _.forOwn for object iteration.', '.eac', NULL, 'lodash');
INSERT INTO `methods` VALUES (74, '_', 'forEachRight', '_.forEachRight(collection, [iteratee=_.identity])', 'This method is like _.forEach except that it iterates over elements of collection from right to left.', '.eachRigh', NULL, 'lodash');
INSERT INTO `methods` VALUES (75, '_', 'groupBy', '_.groupBy(collection, [iteratee=_.identity])', 'Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The order of grouped values is determined by the order they occur in collection. The corresponding value of each key is an array of elements responsible for generating the key. The iteratee is invoked with one argument: (value).', 'Object', 'Returns the composed aggregate object.', 'lodash');
INSERT INTO `methods` VALUES (76, '_', 'includes', '_.includes(collection, value, [fromIndex=0])', 'Checks if value is in collection. If collection is a string, it\'s checked for a substring of value, otherwise SameValueZero is used for equality comparisons. If fromIndex is negative, it\'s used as the offset from the end of collection.', 'boolean', 'Returns true if value is found, else false.', 'lodash');
INSERT INTO `methods` VALUES (77, '_', 'invokeMap', '_.invokeMap(collection, path, [args])', 'Invokes the method at path of each element in collection, returning an array of the results of each invoked method. Any additional arguments are provided to each invoked method. If path is a function, it\'s invoked for, and this bound to, each element in collection.', 'Array', 'Returns the array of results.', 'lodash');
INSERT INTO `methods` VALUES (78, '_', 'keyBy', '_.keyBy(collection, [iteratee=_.identity])', 'Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The corresponding value of each key is the last element responsible for generating the key. The iteratee is invoked with one argument: (value).', 'Object', 'Returns the composed aggregate object.', 'lodash');
INSERT INTO `methods` VALUES (79, '_', 'map', '_.map(collection, [iteratee=_.identity])', 'Creates an array of values by running each element in collection thru iteratee. The iteratee is invoked with three arguments:\n(value, index|key, collection).\nMany lodash methods are guarded to work as iteratees for methods like _.every, _.filter, _.map, _.mapValues, _.reject, and _.some.\nThe guarded methods are:\nary, chunk, curry, curryRight, drop, dropRight, every, fill, invert, parseInt, random, range, rangeRight, repeat, sampleSize, slice, some, sortBy, split, take, takeRight, template, trim, trimEnd, trimStart, and words', 'Array', 'Returns the new mapped array.', 'lodash');
INSERT INTO `methods` VALUES (80, '_', 'orderBy', '_.orderBy(collection, [iteratees=[_.identity]], [orders])', 'This method is like _.sortBy except that it allows specifying the sort orders of the iteratees to sort by. If orders is unspecified, all values are sorted in ascending order. Otherwise, specify an order of \"desc\" for descending or \"asc\" for ascending sort order of corresponding values.', 'Array', 'Returns the new sorted array.', 'lodash');
INSERT INTO `methods` VALUES (81, '_', 'partition', '_.partition(collection, [predicate=_.identity])', 'Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for, the second of which contains elements predicate returns falsey for. The predicate is invoked with one argument: (value).', 'Array', 'Returns the array of grouped elements.', 'lodash');
INSERT INTO `methods` VALUES (82, '_', 'reduce', '_.reduce(collection, [iteratee=_.identity], [accumulator])', 'Reduces collection to a value which is the accumulated result of running each element in collection thru iteratee, where each successive invocation is supplied the return value of the previous. If accumulator is not given, the first element of collection is used as the initial value. The iteratee is invoked with four arguments:\n(accumulator, value, index|key, collection).\nMany lodash methods are guarded to work as iteratees for methods like _.reduce, _.reduceRight, and _.transform.\nThe guarded methods are:\nassign, defaults, defaultsDeep, includes, merge, orderBy, and sortBy', '*', 'Returns the accumulated value.', 'lodash');
INSERT INTO `methods` VALUES (83, '_', 'reduceRight', '_.reduceRight(collection, [iteratee=_.identity], [accumulator])', 'This method is like _.reduce except that it iterates over elements of collection from right to left.', '*', 'Returns the accumulated value.', 'lodash');
INSERT INTO `methods` VALUES (84, '_', 'reject', '_.reject(collection, [predicate=_.identity])', 'The opposite of _.filter; this method returns the elements of collection that predicate does not return truthy for.', 'Array', 'Returns the new filtered array.', 'lodash');
INSERT INTO `methods` VALUES (85, '_', 'sample', '_.sample(collection)', 'Gets a random element from collection.', '*', 'Returns the random element.', 'lodash');
INSERT INTO `methods` VALUES (86, '_', 'sampleSize', '_.sampleSize(collection, [n=1])', 'Gets n random elements at unique keys from collection up to the size of collection.', 'Array', 'Returns the random elements.', 'lodash');
INSERT INTO `methods` VALUES (87, '_', 'shuffle', '_.shuffle(collection)', 'Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.', 'Array', 'Returns the new shuffled array.', 'lodash');
INSERT INTO `methods` VALUES (88, '_', 'size', '_.size(collection)', 'Gets the size of collection by returning its length for array-like values or the number of own enumerable string keyed properties for objects.', 'number', 'Returns the collection size.', 'lodash');
INSERT INTO `methods` VALUES (89, '_', 'some', '_.some(collection, [predicate=_.identity])', 'Checks if predicate returns truthy for any element of collection. Iteration is stopped once predicate returns truthy. The predicate is invoked with three arguments: (value, index|key, collection).', 'boolean', 'Returns true if any element passes the predicate check, else false.', 'lodash');
INSERT INTO `methods` VALUES (90, '_', 'sortBy', '_.sortBy(collection, [iteratees=[_.identity]])', 'Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee. This method performs a stable sort, that is, it preserves the original sort order of equal elements. The iteratees are invoked with one argument: (value).', 'Array', 'Returns the new sorted array.', 'lodash');
INSERT INTO `methods` VALUES (91, '_', 'now', '_.now()', 'Gets the timestamp of the number of milliseconds that have elapsed since the Unix epoch (1 January 1970 00:00:00 UTC).', 'number', 'Returns the timestamp.', 'lodash');
INSERT INTO `methods` VALUES (92, '_', 'after', '_.after(n, func)', 'The opposite of _.before; this method creates a function that invokes func once it\'s called n or more times.', 'Function', 'Returns the new restricted function.', 'lodash');
INSERT INTO `methods` VALUES (93, '_', 'ary', '_.ary(func, [n=func.length])', 'Creates a function that invokes func, with up to n arguments, ignoring any additional arguments.', 'Function', 'Returns the new capped function.', 'lodash');
INSERT INTO `methods` VALUES (94, '_', 'before', '_.before(n, func)', 'Creates a function that invokes func, with the this binding and arguments of the created function, while it\'s called less than n times. Subsequent calls to the created function return the result of the last func invocation.', 'Function', 'Returns the new restricted function.', 'lodash');
INSERT INTO `methods` VALUES (95, '_', 'bind', '_.bind(func, thisArg, [partials])', 'Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.\nThe _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\nNote: Unlike native Function#bind, this method doesn\'t set the \"length\" property of bound functions.', 'Function', 'Returns the new bound function.', 'lodash');
INSERT INTO `methods` VALUES (96, '_', 'bindKey', '_.bindKey(object, key, [partials])', 'Creates a function that invokes the method at object[key] with partials prepended to the arguments it receives.\nThis method differs from _.bind by allowing bound functions to reference methods that may be redefined or don\'t yet exist. See Peter Michaux\'s article for more details.\nThe _.bindKey.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.', 'Function', 'Returns the new bound function.', 'lodash');
INSERT INTO `methods` VALUES (97, '_', 'curry', '_.curry(func, [arity=func.length])', 'Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on. The arity of func may be specified if func.length is not sufficient.\nThe _.curry.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.\nNote: This method doesn\'t set the \"length\" property of curried functions.', 'Function', 'Returns the new curried function.', 'lodash');
INSERT INTO `methods` VALUES (98, '_', 'curryRight', '_.curryRight(func, [arity=func.length])', 'This method is like _.curry except that arguments are applied to func in the manner of _.partialRight instead of _.partial.\nThe _.curryRight.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.\nNote: This method doesn\'t set the \"length\" property of curried functions.', 'Function', 'Returns the new curried function.', 'lodash');
INSERT INTO `methods` VALUES (99, '_', 'debounce', '_.debounce(func, [wait=0], [options={}])', 'Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last func invocation.\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the wait timeout.\nIf wait is 0 and leading is false, func invocation is deferred until to the next tick, similar to setTimeout with a timeout of 0.\nSee David Corbacho\'s article for details over the differences between _.debounce and _.throttle.', 'Function', 'Returns the new debounced function.', 'lodash');
INSERT INTO `methods` VALUES (100, '_', 'defer', '_.defer(func, [args])', 'Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to func when it\'s invoked.', 'number', 'Returns the timer id.', 'lodash');
INSERT INTO `methods` VALUES (101, '_', 'delay', '_.delay(func, wait, [args])', 'Invokes func after wait milliseconds. Any additional arguments are provided to func when it\'s invoked.', 'number', 'Returns the timer id.', 'lodash');
INSERT INTO `methods` VALUES (102, '_', 'flip', '_.flip(func)', 'Creates a function that invokes func with arguments reversed.', 'Function', 'Returns the new flipped function.', 'lodash');
INSERT INTO `methods` VALUES (103, '_', 'memoize', '_.memoize(func, [resolver])', 'Creates a function that memoizes the result of func. If resolver is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The func is invoked with the this binding of the memoized function.\nNote: The cache is exposed as the cache property on the memoized function. Its creation may be customized by replacing the _.memoize.Cache constructor with one whose instances implement the Map method interface of clear, delete, get, has, and set.', 'Function', 'Returns the new memoized function.', 'lodash');
INSERT INTO `methods` VALUES (104, '_', 'negate', '_.negate(predicate)', 'Creates a function that negates the result of the predicate func. The func predicate is invoked with the this binding and arguments of the created function.', 'Function', 'Returns the new negated function.', 'lodash');
INSERT INTO `methods` VALUES (105, '_', 'once', '_.once(func)', 'Creates a function that is restricted to invoking func once. Repeat calls to the function return the value of the first invocation. The func is invoked with the this binding and arguments of the created function.', 'Function', 'Returns the new restricted function.', 'lodash');
INSERT INTO `methods` VALUES (106, '_', 'overArgs', '_.overArgs(func, [transforms=[_.identity]])', 'Creates a function that invokes func with its arguments transformed.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (107, '_', 'partial', '_.partial(func, [partials])', 'Creates a function that invokes func with partials prepended to the arguments it receives. This method is like _.bind except it does not alter the this binding.\nThe _.partial.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\nNote: This method doesn\'t set the \"length\" property of partially applied functions.', 'Function', 'Returns the new partially applied function.', 'lodash');
INSERT INTO `methods` VALUES (108, '_', 'partialRight', '_.partialRight(func, [partials])', 'This method is like _.partial except that partially applied arguments are appended to the arguments it receives.\nThe _.partialRight.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\nNote: This method doesn\'t set the \"length\" property of partially applied functions.', 'Function', 'Returns the new partially applied function.', 'lodash');
INSERT INTO `methods` VALUES (109, '_', 'rearg', '_.rearg(func, indexes)', 'Creates a function that invokes func with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (110, '_', 'rest', '_.rest(func, [start=func.length-1])', 'Creates a function that invokes func with the this binding of the created function and arguments from start and beyond provided as an array.\nNote: This method is based on the rest parameter.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (111, '_', 'spread', '_.spread(func, [start=0])', 'Creates a function that invokes func with the this binding of the create function and an array of arguments much like Function#apply.\nNote: This method is based on the spread operator.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (112, '_', 'unary', '_.unary(func)', 'Creates a function that accepts up to one argument, ignoring any additional arguments.', 'Function', 'Returns the new capped function.', 'lodash');
INSERT INTO `methods` VALUES (113, '_', 'wrap', '_.wrap(value, [wrapper=identity])', 'Creates a function that provides value to wrapper as its first argument. Any additional arguments provided to the function are appended to those provided to the wrapper. The wrapper is invoked with the this binding of the created function.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (114, '_', 'castArray', '_.castArray(value)', 'Casts value as an array if it\'s not one.', 'Array', 'Returns the cast array.', 'lodash');
INSERT INTO `methods` VALUES (115, '_', 'throttle', '_.throttle(func, [wait=0], [options={}])', 'Creates a throttled function that only invokes func at most once per every wait milliseconds. The throttled function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last func invocation.\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the throttled function is invoked more than once during the wait timeout.\nIf wait is 0 and leading is false, func invocation is deferred until to the next tick, similar to setTimeout with a timeout of 0.\nSee David Corbacho\'s article for details over the differences between _.throttle and _.debounce.', 'Function', 'Returns the new throttled function.', 'lodash');
INSERT INTO `methods` VALUES (116, '_', 'clone', '_.clone(value)', 'Creates a shallow clone of value.\nNote: This method is loosely based on the structured clone algorithm and supports cloning arrays, array buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols, and typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.', '*', 'Returns the cloned value.', 'lodash');
INSERT INTO `methods` VALUES (117, '_', 'cloneDeep', '_.cloneDeep(value)', 'This method is like _.clone except that it recursively clones value.', '*', 'Returns the deep cloned value.', 'lodash');
INSERT INTO `methods` VALUES (118, '_', 'cloneDeepWith', '_.cloneDeepWith(value, [customizer])', 'This method is like _.cloneWith except that it recursively clones value.', '*', 'Returns the deep cloned value.', 'lodash');
INSERT INTO `methods` VALUES (119, '_', 'cloneWith', '_.cloneWith(value, [customizer])', 'This method is like _.clone except that it accepts customizer which is invoked to produce the cloned value. If customizer returns undefined, cloning is handled by the method instead. The customizer is invoked with up to four arguments; (value [, index|key, object, stack]).', '*', 'Returns the cloned value.', 'lodash');
INSERT INTO `methods` VALUES (120, '_', 'conformsTo', '_.conformsTo(object, source)', 'Checks if object conforms to source by invoking the predicate properties of source with the corresponding property values of object.\nNote: This method is equivalent to _.conforms when source is partially applied.', 'boolean', 'Returns true if object conforms, else false.', 'lodash');
INSERT INTO `methods` VALUES (121, '_', 'eq', '_.eq(value, other)', 'Performs a SameValueZero comparison between two values to determine if they are equivalent.', 'boolean', 'Returns true if the values are equivalent, else false.', 'lodash');
INSERT INTO `methods` VALUES (122, '_', 'gt', '_.gt(value, other)', 'Checks if value is greater than other.', 'boolean', 'Returns true if value is greater than other, else false.', 'lodash');
INSERT INTO `methods` VALUES (123, '_', 'gte', '_.gte(value, other)', 'Checks if value is greater than or equal to other.', 'boolean', 'Returns true if value is greater than or equal to other, else false.', 'lodash');
INSERT INTO `methods` VALUES (124, '_', 'isArguments', '_.isArguments(value)', 'Checks if value is likely an arguments object.', 'boolean', 'Returns true if value is an arguments object, else false.', 'lodash');
INSERT INTO `methods` VALUES (125, '_', 'isArray', '_.isArray(value)', 'Checks if value is classified as an Array object.', 'boolean', 'Returns true if value is an array, else false.', 'lodash');
INSERT INTO `methods` VALUES (126, '_', 'isArrayBuffer', '_.isArrayBuffer(value)', 'Checks if value is classified as an ArrayBuffer object.', 'boolean', 'Returns true if value is an array buffer, else false.', 'lodash');
INSERT INTO `methods` VALUES (127, '_', 'isArrayLike', '_.isArrayLike(value)', 'Checks if value is array-like. A value is considered array-like if it\'s not a function and has a value.length that\'s an integer greater than or equal to 0 and less than or equal to Number.MAX_SAFE_INTEGER.', 'boolean', 'Returns true if value is array-like, else false.', 'lodash');
INSERT INTO `methods` VALUES (128, '_', 'isArrayLikeObject', '_.isArrayLikeObject(value)', 'This method is like _.isArrayLike except that it also checks if value is an object.', 'boolean', 'Returns true if value is an array-like object, else false.', 'lodash');
INSERT INTO `methods` VALUES (129, '_', 'isBuffer', '_.isBuffer(value)', 'Checks if value is a buffer.', 'boolean', 'Returns true if value is a buffer, else false.', 'lodash');
INSERT INTO `methods` VALUES (130, '_', 'isBoolean', '_.isBoolean(value)', 'Checks if value is classified as a boolean primitive or object.', 'boolean', 'Returns true if value is a boolean, else false.', 'lodash');
INSERT INTO `methods` VALUES (131, '_', 'isDate', '_.isDate(value)', 'Checks if value is classified as a Date object.', 'boolean', 'Returns true if value is a date object, else false.', 'lodash');
INSERT INTO `methods` VALUES (132, '_', 'isElement', '_.isElement(value)', 'Checks if value is likely a DOM element.', 'boolean', 'Returns true if value is a DOM element, else false.', 'lodash');
INSERT INTO `methods` VALUES (133, '_', 'isEmpty', '_.isEmpty(value)', 'Checks if value is an empty object, collection, map, or set.\nObjects are considered empty if they have no own enumerable string keyed properties.\nArray-like values such as arguments objects, arrays, buffers, strings, or jQuery-like collections are considered empty if they have a length of 0. Similarly, maps and sets are considered empty if they have a size of 0.', 'boolean', 'Returns true if value is empty, else false.', 'lodash');
INSERT INTO `methods` VALUES (134, '_', 'isEqual', '_.isEqual(value, other)', 'Performs a deep comparison between two values to determine if they are equivalent.\nNote: This method supports comparing arrays, array buffers, booleans, date objects, error objects, maps, numbers, Object objects, regexes, sets, strings, symbols, and typed arrays. Object objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are compared by strict equality, i.e. ===.', 'boolean', 'Returns true if the values are equivalent, else false.', 'lodash');
INSERT INTO `methods` VALUES (135, '_', 'isEqualWith', '_.isEqualWith(value, other, [customizer])', 'This method is like _.isEqual except that it accepts customizer which is invoked to compare values. If customizer returns undefined, comparisons are handled by the method instead. The customizer is invoked with up to six arguments: (objValue, othValue [, index|key, object, other, stack]).', 'boolean', 'Returns true if the values are equivalent, else false.', 'lodash');
INSERT INTO `methods` VALUES (136, '_', 'isError', '_.isError(value)', 'Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object.', 'boolean', 'Returns true if value is an error object, else false.', 'lodash');
INSERT INTO `methods` VALUES (137, '_', 'isFinite', '_.isFinite(value)', 'Checks if value is a finite primitive number.\nNote: This method is based on Number.isFinite.', 'boolean', 'Returns true if value is a finite number, else false.', 'lodash');
INSERT INTO `methods` VALUES (138, '_', 'isFunction', '_.isFunction(value)', 'Checks if value is classified as a Function object.', 'boolean', 'Returns true if value is a function, else false.', 'lodash');
INSERT INTO `methods` VALUES (139, '_', 'isInteger', '_.isInteger(value)', 'Checks if value is an integer.\nNote: This method is based on Number.isInteger.', 'boolean', 'Returns true if value is an integer, else false.', 'lodash');
INSERT INTO `methods` VALUES (140, '_', 'isLength', '_.isLength(value)', 'Checks if value is a valid array-like length.\nNote: This method is loosely based on ToLength.', 'boolean', 'Returns true if value is a valid length, else false.', 'lodash');
INSERT INTO `methods` VALUES (141, '_', 'isMap', '_.isMap(value)', 'Checks if value is classified as a Map object.', 'boolean', 'Returns true if value is a map, else false.', 'lodash');
INSERT INTO `methods` VALUES (142, '_', 'isMatch', '_.isMatch(object, source)', 'Performs a partial deep comparison between object and source to determine if object contains equivalent property values.\nNote: This method is equivalent to _.matches when source is partially applied.\nPartial comparisons will match empty array and empty object source values against any array or object value, respectively. See _.isEqual for a list of supported value comparisons.', 'boolean', 'Returns true if object is a match, else false.', 'lodash');
INSERT INTO `methods` VALUES (143, '_', 'isMatchWith', '_.isMatchWith(object, source, [customizer])', 'This method is like _.isMatch except that it accepts customizer which is invoked to compare values. If customizer returns undefined, comparisons are handled by the method instead. The customizer is invoked with five arguments: (objValue, srcValue, index|key, object, source).', 'boolean', 'Returns true if object is a match, else false.', 'lodash');
INSERT INTO `methods` VALUES (144, '_', 'isNaN', '_.isNaN(value)', 'Checks if value is NaN.\nNote: This method is based on Number.isNaN and is not the same as global isNaN which returns true for undefined and other non-number values.', 'boolean', 'Returns true if value is NaN, else false.', 'lodash');
INSERT INTO `methods` VALUES (145, '_', 'isNative', '_.isNative(value)', 'Checks if value is a pristine native function.\nNote: This method can\'t reliably detect native functions in the presence of the core-js package because core-js circumvents this kind of detection. Despite multiple requests, the core-js maintainer has made it clear: any attempt to fix the detection will be obstructed. As a result, we\'re left with little choice but to throw an error. Unfortunately, this also affects packages, like babel-polyfill, which rely on core-js.', 'boolean', 'Returns true if value is a native function, else false.', 'lodash');
INSERT INTO `methods` VALUES (146, '_', 'isNil', '_.isNil(value)', 'Checks if value is null or undefined.', 'boolean', 'Returns true if value is nullish, else false.', 'lodash');
INSERT INTO `methods` VALUES (147, '_', 'isNull', '_.isNull(value)', 'Checks if value is null.', 'boolean', 'Returns true if value is null, else false.', 'lodash');
INSERT INTO `methods` VALUES (148, '_', 'isNumber', '_.isNumber(value)', 'Checks if value is classified as a Number primitive or object.\nNote: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.', 'boolean', 'Returns true if value is a number, else false.', 'lodash');
INSERT INTO `methods` VALUES (149, '_', 'isObject', '_.isObject(value)', 'Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes, new Number(0), and new String(\'\'))', 'boolean', 'Returns true if value is an object, else false.', 'lodash');
INSERT INTO `methods` VALUES (150, '_', 'isObjectLike', '_.isObjectLike(value)', 'Checks if value is object-like. A value is object-like if it\'s not null and has a typeof result of \"object\".', 'boolean', 'Returns true if value is object-like, else false.', 'lodash');
INSERT INTO `methods` VALUES (151, '_', 'isPlainObject', '_.isPlainObject(value)', 'Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null.', 'boolean', 'Returns true if value is a plain object, else false.', 'lodash');
INSERT INTO `methods` VALUES (152, '_', 'isRegExp', '_.isRegExp(value)', 'Checks if value is classified as a RegExp object.', 'boolean', 'Returns true if value is a regexp, else false.', 'lodash');
INSERT INTO `methods` VALUES (153, '_', 'isSafeInteger', '_.isSafeInteger(value)', 'Checks if value is a safe integer. An integer is safe if it\'s an IEEE-754 double precision number which isn\'t the result of a rounded unsafe integer.\nNote: This method is based on Number.isSafeInteger.', 'boolean', 'Returns true if value is a safe integer, else false.', 'lodash');
INSERT INTO `methods` VALUES (154, '_', 'isSet', '_.isSet(value)', 'Checks if value is classified as a Set object.', 'boolean', 'Returns true if value is a set, else false.', 'lodash');
INSERT INTO `methods` VALUES (155, '_', 'isString', '_.isString(value)', 'Checks if value is classified as a String primitive or object.', 'boolean', 'Returns true if value is a string, else false.', 'lodash');
INSERT INTO `methods` VALUES (156, '_', 'isSymbol', '_.isSymbol(value)', 'Checks if value is classified as a Symbol primitive or object.', 'boolean', 'Returns true if value is a symbol, else false.', 'lodash');
INSERT INTO `methods` VALUES (157, '_', 'isTypedArray', '_.isTypedArray(value)', 'Checks if value is classified as a typed array.', 'boolean', 'Returns true if value is a typed array, else false.', 'lodash');
INSERT INTO `methods` VALUES (158, '_', 'isUndefined', '_.isUndefined(value)', 'Checks if value is undefined.', 'boolean', 'Returns true if value is undefined, else false.', 'lodash');
INSERT INTO `methods` VALUES (159, '_', 'isWeakMap', '_.isWeakMap(value)', 'Checks if value is classified as a WeakMap object.', 'boolean', 'Returns true if value is a weak map, else false.', 'lodash');
INSERT INTO `methods` VALUES (160, '_', 'isWeakSet', '_.isWeakSet(value)', 'Checks if value is classified as a WeakSet object.', 'boolean', 'Returns true if value is a weak set, else false.', 'lodash');
INSERT INTO `methods` VALUES (161, '_', 'lt', '_.lt(value, other)', 'Checks if value is less than other.', 'boolean', 'Returns true if value is less than other, else false.', 'lodash');
INSERT INTO `methods` VALUES (162, '_', 'lte', '_.lte(value, other)', 'Checks if value is less than or equal to other.', 'boolean', 'Returns true if value is less than or equal to other, else false.', 'lodash');
INSERT INTO `methods` VALUES (163, '_', 'toArray', '_.toArray(value)', 'Converts value to an array.', 'Array', 'Returns the converted array.', 'lodash');
INSERT INTO `methods` VALUES (164, '_', 'toFinite', '_.toFinite(value)', 'Converts value to a finite number.', 'number', 'Returns the converted number.', 'lodash');
INSERT INTO `methods` VALUES (165, '_', 'toInteger', '_.toInteger(value)', 'Converts value to an integer.\nNote: This method is loosely based on ToInteger.', 'number', 'Returns the converted integer.', 'lodash');
INSERT INTO `methods` VALUES (166, '_', 'toLength', '_.toLength(value)', 'Converts value to an integer suitable for use as the length of an array-like object.\nNote: This method is based on ToLength.', 'number', 'Returns the converted integer.', 'lodash');
INSERT INTO `methods` VALUES (167, '_', 'toNumber', '_.toNumber(value)', 'Converts value to a number.', 'number', 'Returns the number.', 'lodash');
INSERT INTO `methods` VALUES (168, '_', 'toPlainObject', '_.toPlainObject(value)', 'Converts value to a plain object flattening inherited enumerable string keyed properties of value to own properties of the plain object.', 'Object', 'Returns the converted plain object.', 'lodash');
INSERT INTO `methods` VALUES (169, '_', 'toSafeInteger', '_.toSafeInteger(value)', 'Converts value to a safe integer. A safe integer can be compared and represented correctly.', 'number', 'Returns the converted integer.', 'lodash');
INSERT INTO `methods` VALUES (170, '_', 'toString', '_.toString(value)', 'Converts value to a string. An empty string is returned for null and undefined values. The sign of -0 is preserved.', 'string', 'Returns the converted string.', 'lodash');
INSERT INTO `methods` VALUES (171, '_', 'add', '_.add(augend, addend)', 'Adds two numbers.', 'number', 'Returns the total.', 'lodash');
INSERT INTO `methods` VALUES (172, '_', 'divide', '_.divide(dividend, divisor)', 'Divide two numbers.', 'number', 'Returns the quotient.', 'lodash');
INSERT INTO `methods` VALUES (173, '_', 'floor', '_.floor(number, [precision=0])', 'Computes number rounded down to precision.', 'number', 'Returns the rounded down number.', 'lodash');
INSERT INTO `methods` VALUES (174, '_', 'max', '_.max(array)', 'Computes the maximum value of array. If array is empty or falsey, undefined is returned.', '*', 'Returns the maximum value.', 'lodash');
INSERT INTO `methods` VALUES (175, '_', 'ceil', '_.ceil(number, [precision=0])', 'Computes number rounded up to precision.', 'number', 'Returns the rounded up number.', 'lodash');
INSERT INTO `methods` VALUES (176, '_', 'maxBy', '_.maxBy(array, [iteratee=_.identity])', 'This method is like _.max except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: (value).', '*', 'Returns the maximum value.', 'lodash');
INSERT INTO `methods` VALUES (177, '_', 'mean', '_.mean(array)', 'Computes the mean of the values in array.', 'number', 'Returns the mean.', 'lodash');
INSERT INTO `methods` VALUES (178, '_', 'meanBy', '_.meanBy(array, [iteratee=_.identity])', 'This method is like _.mean except that it accepts iteratee which is invoked for each element in array to generate the value to be averaged. The iteratee is invoked with one argument: (value).', 'number', 'Returns the mean.', 'lodash');
INSERT INTO `methods` VALUES (179, '_', 'min', '_.min(array)', 'Computes the minimum value of array. If array is empty or falsey, undefined is returned.', '*', 'Returns the minimum value.', 'lodash');
INSERT INTO `methods` VALUES (180, '_', 'minBy', '_.minBy(array, [iteratee=_.identity])', 'This method is like _.min except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: (value).', '*', 'Returns the minimum value.', 'lodash');
INSERT INTO `methods` VALUES (181, '_', 'multiply', '_.multiply(multiplier, multiplicand)', 'Multiply two numbers.', 'number', 'Returns the product.', 'lodash');
INSERT INTO `methods` VALUES (182, '_', 'round', '_.round(number, [precision=0])', 'Computes number rounded to precision.', 'number', 'Returns the rounded number.', 'lodash');
INSERT INTO `methods` VALUES (183, '_', 'subtract', '_.subtract(minuend, subtrahend)', 'Subtract two numbers.', 'number', 'Returns the difference.', 'lodash');
INSERT INTO `methods` VALUES (184, '_', 'sum', '_.sum(array)', 'Computes the sum of the values in array.', 'number', 'Returns the sum.', 'lodash');
INSERT INTO `methods` VALUES (185, '_', 'sumBy', '_.sumBy(array, [iteratee=_.identity])', 'This method is like _.sum except that it accepts iteratee which is invoked for each element in array to generate the value to be summed. The iteratee is invoked with one argument: (value).', 'number', 'Returns the sum.', 'lodash');
INSERT INTO `methods` VALUES (186, '_', 'clamp', '_.clamp(number, [lower], upper)', 'Clamps number within the inclusive lower and upper bounds.', 'number', 'Returns the clamped number.', 'lodash');
INSERT INTO `methods` VALUES (187, '_', 'inRange', '_.inRange(number, [start=0], end)', 'Checks if n is between start and up to, but not including, end. If end is not specified, it\'s set to start with start then set to 0. If start is greater than end the params are swapped to support negative ranges.', 'boolean', 'Returns true if number is in the range, else false.', 'lodash');
INSERT INTO `methods` VALUES (188, '_', 'random', '_.random([lower=0], [upper=1], [floating])', 'Produces a random number between the inclusive lower and upper bounds. If only one argument is provided a number between 0 and the given number is returned. If floating is true, or either lower or upper are floats, a floating-point number is returned instead of an integer.\nNote: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.', 'number', 'Returns the random number.', 'lodash');
INSERT INTO `methods` VALUES (189, '_', 'assign', '_.assign(object, [sources])', 'Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.\nNote: This method mutates object and is loosely based on Object.assign.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (190, '_', 'assignIn', '_.assignIn(object, [sources])', 'This method is like _.assign except that it iterates over own and inherited source properties.\nNote: This method mutates object.', '.exten', NULL, 'lodash');
INSERT INTO `methods` VALUES (191, '_', 'assignInWith', '_.assignInWith(object, sources, [customizer])', 'This method is like _.assignIn except that it accepts customizer which is invoked to produce the assigned values. If customizer returns undefined, assignment is handled by the method instead. The customizer is invoked with five arguments: (objValue, srcValue, key, object, source).\nNote: This method mutates object.', '.extendWit', NULL, 'lodash');
INSERT INTO `methods` VALUES (192, '_', 'assignWith', '_.assignWith(object, sources, [customizer])', 'This method is like _.assign except that it accepts customizer which is invoked to produce the assigned values. If customizer returns undefined, assignment is handled by the method instead. The customizer is invoked with five arguments: (objValue, srcValue, key, object, source).\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (193, '_', 'at', '_.at(object, [paths])', 'Creates an array of values corresponding to paths of object.', 'Array', 'Returns the picked values.', 'lodash');
INSERT INTO `methods` VALUES (194, '_', 'create', '_.create(prototype, [properties])', 'Creates an object that inherits from the prototype object. If a properties object is given, its own enumerable string keyed properties are assigned to the created object.', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (195, '_', 'defaults', '_.defaults(object, [sources])', 'Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (196, '_', 'defaultsDeep', '_.defaultsDeep(object, [sources])', 'This method is like _.defaults except that it recursively assigns default properties.\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (197, '_', 'findKey', '_.findKey(object, [predicate=_.identity])', 'This method is like _.find except that it returns the key of the first element predicate returns truthy for instead of the element itself.', '*', 'Returns the key of the matched element, else undefined.', 'lodash');
INSERT INTO `methods` VALUES (198, '_', 'findLastKey', '_.findLastKey(object, [predicate=_.identity])', 'This method is like _.findKey except that it iterates over elements of a collection in the opposite order.', '*', 'Returns the key of the matched element, else undefined.', 'lodash');
INSERT INTO `methods` VALUES (199, '_', 'forIn', '_.forIn(object, [iteratee=_.identity])', 'Iterates over own and inherited enumerable string keyed properties of an object and invokes iteratee for each property. The iteratee is invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (200, '_', 'forInRight', '_.forInRight(object, [iteratee=_.identity])', 'This method is like _.forIn except that it iterates over properties of object in the opposite order.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (201, '_', 'forOwn', '_.forOwn(object, [iteratee=_.identity])', 'Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property. The iteratee is invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (202, '_', 'forOwnRight', '_.forOwnRight(object, [iteratee=_.identity])', 'This method is like _.forOwn except that it iterates over properties of object in the opposite order.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (203, '_', 'functions', '_.functions(object)', 'Creates an array of function property names from own enumerable properties of object.', 'Array', 'Returns the function names.', 'lodash');
INSERT INTO `methods` VALUES (204, '_', 'functionsIn', '_.functionsIn(object)', 'Creates an array of function property names from own and inherited enumerable properties of object.', 'Array', 'Returns the function names.', 'lodash');
INSERT INTO `methods` VALUES (205, '_', 'get', '_.get(object, path, [defaultValue])', 'Gets the value at path of object. If the resolved value is undefined, the defaultValue is returned in its place.', '*', 'Returns the resolved value.', 'lodash');
INSERT INTO `methods` VALUES (206, '_', 'has', '_.has(object, path)', 'Checks if path is a direct property of object.', 'boolean', 'Returns true if path exists, else false.', 'lodash');
INSERT INTO `methods` VALUES (207, '_', 'hasIn', '_.hasIn(object, path)', 'Checks if path is a direct or inherited property of object.', 'boolean', 'Returns true if path exists, else false.', 'lodash');
INSERT INTO `methods` VALUES (208, '_', 'invert', '_.invert(object)', 'Creates an object composed of the inverted keys and values of object. If object contains duplicate values, subsequent values overwrite property assignments of previous values.', 'Object', 'Returns the new inverted object.', 'lodash');
INSERT INTO `methods` VALUES (209, '_', 'invertBy', '_.invertBy(object, [iteratee=_.identity])', 'This method is like _.invert except that the inverted object is generated from the results of running each element of object thru iteratee. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. The iteratee is invoked with one argument: (value).', 'Object', 'Returns the new inverted object.', 'lodash');
INSERT INTO `methods` VALUES (210, '_', 'invoke', '_.invoke(object, path, [args])', 'Invokes the method at path of object.', '*', 'Returns the result of the invoked method.', 'lodash');
INSERT INTO `methods` VALUES (211, '_', 'keys', '_.keys(object)', 'Creates an array of the own enumerable property names of object.\nNote: Non-object values are coerced to objects. See the ES spec for more details.', 'Array', 'Returns the array of property names.', 'lodash');
INSERT INTO `methods` VALUES (212, '_', 'keysIn', '_.keysIn(object)', 'Creates an array of the own and inherited enumerable property names of object.\nNote: Non-object values are coerced to objects.', 'Array', 'Returns the array of property names.', 'lodash');
INSERT INTO `methods` VALUES (213, '_', 'mapKeys', '_.mapKeys(object, [iteratee=_.identity])', 'The opposite of _.mapValues; this method creates an object with the same values as object and keys generated by running each own enumerable string keyed property of object thru iteratee. The iteratee is invoked with three arguments: (value, key, object).', 'Object', 'Returns the new mapped object.', 'lodash');
INSERT INTO `methods` VALUES (214, '_', 'mapValues', '_.mapValues(object, [iteratee=_.identity])', 'Creates an object with the same keys as object and values generated by running each own enumerable string keyed property of object thru iteratee. The iteratee is invoked with three arguments:\n(value, key, object).', 'Object', 'Returns the new mapped object.', 'lodash');
INSERT INTO `methods` VALUES (215, '_', 'merge', '_.merge(object, [sources])', 'This method is like _.assign except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to undefined are skipped if a destination value exists. Array and plain object properties are merged recursively. Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (216, '_', 'mergeWith', '_.mergeWith(object, sources, customizer)', 'This method is like _.merge except that it accepts customizer which is invoked to produce the merged values of the destination and source properties. If customizer returns undefined, merging is handled by the method instead. The customizer is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (217, '_', 'omit', '_.omit(object, [paths])', 'The opposite of _.pick; this method creates an object composed of the own and inherited enumerable property paths of object that are not omitted.\nNote: This method is considerably slower than _.pick.', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (218, '_', 'omitBy', '_.omitBy(object, [predicate=_.identity])', 'The opposite of _.pickBy; this method creates an object composed of the own and inherited enumerable string keyed properties of object that predicate doesn\'t return truthy for. The predicate is invoked with two arguments: (value, key).', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (219, '_', 'pick', '_.pick(object, [paths])', 'Creates an object composed of the picked object properties.', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (220, '_', 'pickBy', '_.pickBy(object, [predicate=_.identity])', 'Creates an object composed of the object properties predicate returns truthy for. The predicate is invoked with two arguments: (value, key).', 'Object', 'Returns the new object.', 'lodash');
INSERT INTO `methods` VALUES (221, '_', 'result', '_.result(object, path, [defaultValue])', 'This method is like _.get except that if the resolved value is a function it\'s invoked with the this binding of its parent object and its result is returned.', '*', 'Returns the resolved value.', 'lodash');
INSERT INTO `methods` VALUES (222, '_', 'set', '_.set(object, path, value)', 'Sets the value at path of object. If a portion of path doesn\'t exist, it\'s created. Arrays are created for missing index properties while objects are created for all other missing properties. Use _.setWith to customize path creation.\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (223, '_', 'setWith', '_.setWith(object, path, value, [customizer])', 'This method is like _.set except that it accepts customizer which is invoked to produce the objects of path. If customizer returns undefined path creation is handled by the method instead. The customizer is invoked with three arguments: (nsValue, key, nsObject).\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (224, '_', 'toPairs', '_.toPairs(object)', 'Creates an array of own enumerable string keyed-value pairs for object which can be consumed by _.fromPairs. If object is a map or set, its entries are returned.', '.entrie', NULL, 'lodash');
INSERT INTO `methods` VALUES (225, '_', 'toPairsIn', '_.toPairsIn(object)', 'Creates an array of own and inherited enumerable string keyed-value pairs for object which can be consumed by _.fromPairs. If object is a map or set, its entries are returned.', '.entriesI', NULL, 'lodash');
INSERT INTO `methods` VALUES (226, '_', 'transform', '_.transform(object, [iteratee=_.identity], [accumulator])', 'An alternative to _.reduce; this method transforms object to a new accumulator object which is the result of running each of its own enumerable string keyed properties thru iteratee, with each invocation potentially mutating the accumulator object. If accumulator is not provided, a new object with the same [[Prototype]] will be used. The iteratee is invoked with four arguments: (accumulator, value, key, object). Iteratee functions may exit iteration early by explicitly returning false.', '*', 'Returns the accumulated value.', 'lodash');
INSERT INTO `methods` VALUES (227, '_', 'unset', '_.unset(object, path)', 'Removes the property at path of object.\nNote: This method mutates object.', 'boolean', 'Returns true if the property is deleted, else false.', 'lodash');
INSERT INTO `methods` VALUES (228, '_', 'update', '_.update(object, path, updater)', 'This method is like _.set except that accepts updater to produce the value to set. Use _.updateWith to customize path creation. The updater is invoked with one argument: (value).\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (229, '_', 'updateWith', '_.updateWith(object, path, updater, [customizer])', 'This method is like _.update except that it accepts customizer which is invoked to produce the objects of path. If customizer returns undefined path creation is handled by the method instead. The customizer is invoked with three arguments: (nsValue, key, nsObject).\nNote: This method mutates object.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (230, '_', 'values', '_.values(object)', 'Creates an array of the own enumerable string keyed property values of object.\nNote: Non-object values are coerced to objects.', 'Array', 'Returns the array of property values.', 'lodash');
INSERT INTO `methods` VALUES (231, '_', 'valuesIn', '_.valuesIn(object)', 'Creates an array of the own and inherited enumerable string keyed property values of object.\nNote: Non-object values are coerced to objects.', 'Array', 'Returns the array of property values.', 'lodash');
INSERT INTO `methods` VALUES (232, '_', '_', '_(value)', 'Creates a lodash object which wraps value to enable implicit method chain sequences. Methods that operate on and return arrays, collections, and functions can be chained together. Methods that retrieve a single value or may return a primitive value will automatically end the chain sequence and return the unwrapped value. Otherwise, the value must be unwrapped with _#value.\nExplicit chain sequences, which must be unwrapped with _#value, may be enabled using _.chain.\nThe execution of chained methods is lazy, that is, it\'s deferred until _#value is implicitly or explicitly called.\nLazy evaluation allows several methods to support shortcut fusion. Shortcut fusion is an optimization to merge iteratee calls; this avoids the creation of intermediate arrays and can greatly reduce the number of iteratee executions. Sections of a chain sequence qualify for shortcut fusion if the section is applied to an array and iteratees accept only one argument. The heuristic for whether a section qualifies for shortcut fusion is subject to change.\nChaining is supported in custom builds as long as the _#value method is directly or indirectly included in the build.\nIn addition to lodash methods, wrappers have Array and String methods.\nThe wrapper Array methods are:\nconcat, join, pop, push, shift, sort, splice, and unshift\nThe wrapper String methods are:\nreplace and split\nThe wrapper methods that support shortcut fusion are:\nat, compact, drop, dropRight, dropWhile, filter, find, findLast, head, initial, last, map, reject, reverse, slice, tail, take, takeRight, takeRightWhile, takeWhile, and toArray\nThe chainable wrapper methods are:\nafter, ary, assign, assignIn, assignInWith, assignWith, at, before, bind, bindAll, bindKey, castArray, chain, chunk, commit, compact, concat, conforms, constant, countBy, create, curry, debounce, defaults, defaultsDeep, defer, delay, difference, differenceBy, differenceWith, drop, dropRight, dropRightWhile, dropWhile, extend, extendWith, fill, filter, flatMap, flatMapDeep, flatMapDepth, flatten, flattenDeep, flattenDepth, flip, flow, flowRight, fromPairs, functions, functionsIn, groupBy, initial, intersection, intersectionBy, intersectionWith, invert, invertBy, invokeMap, iteratee, keyBy, keys, keysIn, map, mapKeys, mapValues, matches, matchesProperty, memoize, merge, mergeWith, method, methodOf, mixin, negate, nthArg, omit, omitBy, once, orderBy, over, overArgs, overEvery, overSome, partial, partialRight, partition, pick, pickBy, plant, property, propertyOf, pull, pullAll, pullAllBy, pullAllWith, pullAt, push, range, rangeRight, rearg, reject, remove, rest, reverse, sampleSize, set, setWith, shuffle, slice, sort, sortBy, splice, spread, tail, take, takeRight, takeRightWhile, takeWhile, tap, throttle, thru, toArray, toPairs, toPairsIn, toPath, toPlainObject, transform, unary, union, unionBy, unionWith, uniq, uniqBy, uniqWith, unset, unshift, unzip, unzipWith, update, updateWith, values, valuesIn, without, wrap, xor, xorBy, xorWith, zip, zipObject, zipObjectDeep, and zipWith\nThe wrapper methods that are not chainable by default are:\nadd, attempt, camelCase, capitalize, ceil, clamp, clone, cloneDeep, cloneDeepWith, cloneWith, conformsTo, deburr, defaultTo, divide, each, eachRight, endsWith, eq, escape, escapeRegExp, every, find, findIndex, findKey, findLast, findLastIndex, findLastKey, first, floor, forEach, forEachRight, forIn, forInRight, forOwn, forOwnRight, get, gt, gte, has, hasIn, head, identity, includes, indexOf, inRange, invoke, isArguments, isArray, isArrayBuffer, isArrayLike, isArrayLikeObject, isBoolean, isBuffer, isDate, isElement, isEmpty, isEqual, isEqualWith, isError, isFinite, isFunction, isInteger, isLength, isMap, isMatch, isMatchWith, isNaN, isNative, isNil, isNull, isNumber, isObject, isObjectLike, isPlainObject, isRegExp, isSafeInteger, isSet, isString, isUndefined, isTypedArray, isWeakMap, isWeakSet, join, kebabCase, last, lastIndexOf, lowerCase, lowerFirst, lt, lte, max, maxBy, mean, meanBy, min, minBy, multiply, noConflict, noop, now, nth, pad, padEnd, padStart, parseInt, pop, random, reduce, reduceRight, repeat, result, round, runInContext, sample, shift, size, snakeCase, some, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy, startCase, startsWith, stubArray, stubFalse, stubObject, stubString, stubTrue, subtract, sum, sumBy, template, times, toFinite, toInteger, toJSON, toLength, toLower, toNumber, toSafeInteger, toString, toUpper, trim, trimEnd, trimStart, truncate, unescape, uniqueId, upperCase, upperFirst, value, and words', NULL, NULL, 'lodash');
INSERT INTO `methods` VALUES (233, '_', 'chain', '_.chain(value)', 'Creates a lodash wrapper instance that wraps value with explicit method chain sequences enabled. The result of such sequences must be unwrapped with _#value.', 'Object', 'Returns the new lodash wrapper instance.', 'lodash');
INSERT INTO `methods` VALUES (234, '_', 'tap', '_.tap(value, interceptor)', 'This method invokes interceptor and returns value. The interceptor is invoked with one argument; (value). The purpose of this method is to \"tap into\" a method chain sequence in order to modify intermediate results.', '*', 'Returns value.', 'lodash');
INSERT INTO `methods` VALUES (235, '_', 'thru', '_.thru(value, interceptor)', 'This method is like _.tap except that it returns the result of interceptor. The purpose of this method is to \"pass thru\" values replacing intermediate results in a method chain sequence.', '*', 'Returns the result of interceptor.', 'lodash');
INSERT INTO `methods` VALUES (236, '_', 'prototype[Symbol.iterator]', '_.prototype[Symbol.iterator]()', 'Enables the wrapper to be iterable.', 'Object', 'Returns the wrapper object.', 'lodash');
INSERT INTO `methods` VALUES (237, '_', 'prototype.at', '_.prototype.at([paths])', 'This method is the wrapper version of _.at.', 'Object', 'Returns the new lodash wrapper instance.', 'lodash');
INSERT INTO `methods` VALUES (238, '_', 'prototype.chain', '_.prototype.chain()', 'Creates a lodash wrapper instance with explicit method chain sequences enabled.', 'Object', 'Returns the new lodash wrapper instance.', 'lodash');
INSERT INTO `methods` VALUES (239, '_', 'prototype.commit', '_.prototype.commit()', 'Executes the chain sequence and returns the wrapped result.', 'Object', 'Returns the new lodash wrapper instance.', 'lodash');
INSERT INTO `methods` VALUES (240, '_', 'prototype.next', '_.prototype.next()', 'Gets the next value on a wrapped object following the iterator protocol.', 'Object', 'Returns the next iterator value.', 'lodash');
INSERT INTO `methods` VALUES (241, '_', 'prototype.plant', '_.prototype.plant(value)', 'Creates a clone of the chain sequence planting value as the wrapped value.', 'Object', 'Returns the new lodash wrapper instance.', 'lodash');
INSERT INTO `methods` VALUES (242, '_', 'prototype.reverse', '_.prototype.reverse()', 'This method is the wrapper version of _.reverse.\nNote: This method mutates the wrapped array.', 'Object', 'Returns the new lodash wrapper instance.', 'lodash');
INSERT INTO `methods` VALUES (243, '_', 'prototype.value', '_.prototype.value()', 'Executes the chain sequence to resolve the unwrapped value.', '.prototype.toJSON, _.prototype.valueO', NULL, 'lodash');
INSERT INTO `methods` VALUES (244, '_', 'camelCase', '_.camelCase([string=\'\'])', 'Converts string to camel case.', 'string', 'Returns the camel cased string.', 'lodash');
INSERT INTO `methods` VALUES (245, '_', 'capitalize', '_.capitalize([string=\'\'])', 'Converts the first character of string to upper case and the remaining to lower case.', 'string', 'Returns the capitalized string.', 'lodash');
INSERT INTO `methods` VALUES (246, '_', 'deburr', '_.deburr([string=\'\'])', 'Deburrs string by converting Latin-1 Supplement and Latin Extended-A letters to basic Latin letters and removing combining diacritical marks.', 'string', 'Returns the deburred string.', 'lodash');
INSERT INTO `methods` VALUES (247, '_', 'endsWith', '_.endsWith([string=\'\'], [target], [position=string.length])', 'Checks if string ends with the given target string.', 'boolean', 'Returns true if string ends with target, else false.', 'lodash');
INSERT INTO `methods` VALUES (248, '_', 'escape', '_.escape([string=\'\'])', 'Converts the characters \"&\", \"<\", \">\", \'\"\', and \"\'\" in string to their corresponding HTML entities.\nNote: No other characters are escaped. To escape additional characters use a third-party library like he.\nThough the \">\" character is escaped for symmetry, characters like \">\" and \"/\" don\'t need escaping in HTML and have no special meaning unless they\'re part of a tag or unquoted attribute value. See Mathias Bynens\'s article (under \"semi-related fun fact\") for more details.\nWhen working with HTML you should always quote attribute values to reduce XSS vectors.', 'string', 'Returns the escaped string.', 'lodash');
INSERT INTO `methods` VALUES (249, '_', 'escapeRegExp', '_.escapeRegExp([string=\'\'])', 'Escapes the RegExp special characters \"^\", \"$\", \"\", \".\", \"*\", \"+\", \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in string.', 'string', 'Returns the escaped string.', 'lodash');
INSERT INTO `methods` VALUES (250, '_', 'kebabCase', '_.kebabCase([string=\'\'])', 'Converts string to kebab case.', 'string', 'Returns the kebab cased string.', 'lodash');
INSERT INTO `methods` VALUES (251, '_', 'lowerCase', '_.lowerCase([string=\'\'])', 'Converts string, as space separated words, to lower case.', 'string', 'Returns the lower cased string.', 'lodash');
INSERT INTO `methods` VALUES (252, '_', 'lowerFirst', '_.lowerFirst([string=\'\'])', 'Converts the first character of string to lower case.', 'string', 'Returns the converted string.', 'lodash');
INSERT INTO `methods` VALUES (253, '_', 'pad', '_.pad([string=\'\'], [length=0], [chars=\' \'])', 'Pads string on the left and right sides if it\'s shorter than length. Padding characters are truncated if they can\'t be evenly divided by length.', 'string', 'Returns the padded string.', 'lodash');
INSERT INTO `methods` VALUES (254, '_', 'padEnd', '_.padEnd([string=\'\'], [length=0], [chars=\' \'])', 'Pads string on the right side if it\'s shorter than length. Padding characters are truncated if they exceed length.', 'string', 'Returns the padded string.', 'lodash');
INSERT INTO `methods` VALUES (255, '_', 'padStart', '_.padStart([string=\'\'], [length=0], [chars=\' \'])', 'Pads string on the left side if it\'s shorter than length. Padding characters are truncated if they exceed length.', 'string', 'Returns the padded string.', 'lodash');
INSERT INTO `methods` VALUES (256, '_', 'parseInt', '_.parseInt(string, [radix=10])', 'Converts string to an integer of the specified radix. If radix is undefined or 0, a radix of 10 is used unless value is a hexadecimal, in which case a radix of 16 is used.\nNote: This method aligns with the ES5 implementation of parseInt.', 'number', 'Returns the converted integer.', 'lodash');
INSERT INTO `methods` VALUES (257, '_', 'repeat', '_.repeat([string=\'\'], [n=1])', 'Repeats the given string n times.', 'string', 'Returns the repeated string.', 'lodash');
INSERT INTO `methods` VALUES (258, '_', 'replace', '_.replace([string=\'\'], pattern, replacement)', 'Replaces matches for pattern in string with replacement.\nNote: This method is based on String#replace.', 'string', 'Returns the modified string.', 'lodash');
INSERT INTO `methods` VALUES (259, '_', 'snakeCase', '_.snakeCase([string=\'\'])', 'Converts string to snake case.', 'string', 'Returns the snake cased string.', 'lodash');
INSERT INTO `methods` VALUES (260, '_', 'split', '_.split([string=\'\'], separator, [limit])', 'Splits string by separator.\nNote: This method is based on String#split.', 'Array', 'Returns the string segments.', 'lodash');
INSERT INTO `methods` VALUES (261, '_', 'startCase', '_.startCase([string=\'\'])', 'Converts string to start case.', 'string', 'Returns the start cased string.', 'lodash');
INSERT INTO `methods` VALUES (262, '_', 'startsWith', '_.startsWith([string=\'\'], [target], [position=0])', 'Checks if string starts with the given target string.', 'boolean', 'Returns true if string starts with target, else false.', 'lodash');
INSERT INTO `methods` VALUES (263, '_', 'template', '_.template([string=\'\'], [options={}])', 'Creates a compiled template function that can interpolate data properties in \"interpolate\" delimiters, HTML-escape interpolated data properties in \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data properties may be accessed as free variables in the template. If a setting object is given, it takes precedence over _.templateSettings values.\nNote: In the development build _.template utilizes sourceURLs for easier debugging.\nFor more information on precompiling templates see lodash\'s custom builds documentation.\nFor more information on Chrome extension sandboxes see Chrome\'s extensions documentation.', 'Function', 'Returns the compiled template function.', 'lodash');
INSERT INTO `methods` VALUES (264, '_', 'toLower', '_.toLower([string=\'\'])', 'Converts string, as a whole, to lower case just like String#toLowerCase.', 'string', 'Returns the lower cased string.', 'lodash');
INSERT INTO `methods` VALUES (265, '_', 'toUpper', '_.toUpper([string=\'\'])', 'Converts string, as a whole, to upper case just like String#toUpperCase.', 'string', 'Returns the upper cased string.', 'lodash');
INSERT INTO `methods` VALUES (266, '_', 'trim', '_.trim([string=\'\'], [chars=whitespace])', 'Removes leading and trailing whitespace or specified characters from string.', 'string', 'Returns the trimmed string.', 'lodash');
INSERT INTO `methods` VALUES (267, '_', 'trimEnd', '_.trimEnd([string=\'\'], [chars=whitespace])', 'Removes trailing whitespace or specified characters from string.', 'string', 'Returns the trimmed string.', 'lodash');
INSERT INTO `methods` VALUES (268, '_', 'trimStart', '_.trimStart([string=\'\'], [chars=whitespace])', 'Removes leading whitespace or specified characters from string.', 'string', 'Returns the trimmed string.', 'lodash');
INSERT INTO `methods` VALUES (269, '_', 'truncate', '_.truncate([string=\'\'], [options={}])', 'Truncates string if it\'s longer than the given maximum string length. The last characters of the truncated string are replaced with the omission string which defaults to \"...\".', 'string', 'Returns the truncated string.', 'lodash');
INSERT INTO `methods` VALUES (270, '_', 'unescape', '_.unescape([string=\'\'])', 'The inverse of _.escape; this method converts the HTML entities &amp;, &lt;, &gt;, &quot;, and &#39; in string to their corresponding characters.\nNote: No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library like he.', 'string', 'Returns the unescaped string.', 'lodash');
INSERT INTO `methods` VALUES (271, '_', 'upperCase', '_.upperCase([string=\'\'])', 'Converts string, as space separated words, to upper case.', 'string', 'Returns the upper cased string.', 'lodash');
INSERT INTO `methods` VALUES (272, '_', 'upperFirst', '_.upperFirst([string=\'\'])', 'Converts the first character of string to upper case.', 'string', 'Returns the converted string.', 'lodash');
INSERT INTO `methods` VALUES (273, '_', 'words', '_.words([string=\'\'], [pattern])', 'Splits string into an array of its words.', 'Array', 'Returns the words of string.', 'lodash');
INSERT INTO `methods` VALUES (274, '_', 'attempt', '_.attempt(func, [args])', 'Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it\'s invoked.', '*', 'Returns the func result or error object.', 'lodash');
INSERT INTO `methods` VALUES (275, '_', 'bindAll', '_.bindAll(object, methodNames)', 'Binds methods of an object to the object itself, overwriting the existing method.\nNote: This method doesn\'t set the \"length\" property of bound functions.', 'Object', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (276, '_', 'cond', '_.cond(pairs)', 'Creates a function that iterates over pairs and invokes the corresponding function of the first predicate to return truthy. The predicate-function pairs are invoked with the this binding and arguments of the created function.', 'Function', 'Returns the new composite function.', 'lodash');
INSERT INTO `methods` VALUES (277, '_', 'conforms', '_.conforms(source)', 'Creates a function that invokes the predicate properties of source with the corresponding property values of a given object, returning true if all predicates return truthy, else false.\nNote: The created function is equivalent to _.conformsTo with source partially applied.', 'Function', 'Returns the new spec function.', 'lodash');
INSERT INTO `methods` VALUES (278, '_', 'constant', '_.constant(value)', 'Creates a function that returns value.', 'Function', 'Returns the new constant function.', 'lodash');
INSERT INTO `methods` VALUES (279, '_', 'defaultTo', '_.defaultTo(value, defaultValue)', 'Checks value to determine whether a default value should be returned in its place. The defaultValue is returned if value is NaN, null, or undefined.', '*', 'Returns the resolved value.', 'lodash');
INSERT INTO `methods` VALUES (280, '_', 'flow', '_.flow([funcs])', 'Creates a function that returns the result of invoking the given functions with the this binding of the created function, where each successive invocation is supplied the return value of the previous.', 'Function', 'Returns the new composite function.', 'lodash');
INSERT INTO `methods` VALUES (281, '_', 'flowRight', '_.flowRight([funcs])', 'This method is like _.flow except that it creates a function that invokes the given functions from right to left.', 'Function', 'Returns the new composite function.', 'lodash');
INSERT INTO `methods` VALUES (282, '_', 'identity', '_.identity(value)', 'This method returns the first argument it receives.', '*', 'Returns value.', 'lodash');
INSERT INTO `methods` VALUES (283, '_', 'iteratee', '_.iteratee([func=_.identity])', 'Creates a function that invokes func with the arguments of the created function. If func is a property name, the created function returns the property value for a given element. If func is an array or object, the created function returns true for elements that contain the equivalent source properties, otherwise it returns false.', 'Function', 'Returns the callback.', 'lodash');
INSERT INTO `methods` VALUES (284, '_', 'matches', '_.matches(source)', 'Creates a function that performs a partial deep comparison between a given object and source, returning true if the given object has equivalent property values, else false.\nNote: The created function is equivalent to _.isMatch with source partially applied.\nPartial comparisons will match empty array and empty object source values against any array or object value, respectively. See _.isEqual for a list of supported value comparisons.', 'Function', 'Returns the new spec function.', 'lodash');
INSERT INTO `methods` VALUES (285, '_', 'method', '_.method(path, [args])', 'Creates a function that invokes the method at path of a given object. Any additional arguments are provided to the invoked method.', 'Function', 'Returns the new invoker function.', 'lodash');
INSERT INTO `methods` VALUES (286, '_', 'matchesProperty', '_.matchesProperty(path, srcValue)', 'Creates a function that performs a partial deep comparison between the value at path of a given object to srcValue, returning true if the object value is equivalent, else false.\nNote: Partial comparisons will match empty array and empty object srcValue values against any array or object value, respectively. See _.isEqual for a list of supported value comparisons.', 'Function', 'Returns the new spec function.', 'lodash');
INSERT INTO `methods` VALUES (287, '_', 'methodOf', '_.methodOf(object, [args])', 'The opposite of _.method; this method creates a function that invokes the method at a given path of object. Any additional arguments are provided to the invoked method.', 'Function', 'Returns the new invoker function.', 'lodash');
INSERT INTO `methods` VALUES (288, '_', 'mixin', '_.mixin([object=lodash], source, [options={}])', 'Adds all own enumerable string keyed function properties of a source object to the destination object. If object is a function, then methods are added to its prototype as well.\nNote: Use _.runInContext to create a pristine lodash function to avoid conflicts caused by modifying the original.', '*', 'Returns object.', 'lodash');
INSERT INTO `methods` VALUES (289, '_', 'noConflict', '_.noConflict()', 'Reverts the _ variable to its previous value and returns a reference to the lodash function.', 'Function', 'Returns the lodash function.', 'lodash');
INSERT INTO `methods` VALUES (290, '_', 'noop', '_.noop()', 'This method returns undefined.', NULL, NULL, 'lodash');
INSERT INTO `methods` VALUES (291, '_', 'nthArg', '_.nthArg([n=0])', 'Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.', 'Function', 'Returns the new pass-thru function.', 'lodash');
INSERT INTO `methods` VALUES (292, '_', 'over', '_.over([iteratees=[_.identity]])', 'Creates a function that invokes iteratees with the arguments it receives and returns their results.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (293, '_', 'overEvery', '_.overEvery([predicates=[_.identity]])', 'Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (294, '_', 'overSome', '_.overSome([predicates=[_.identity]])', 'Creates a function that checks if any of the predicates return truthy when invoked with the arguments it receives.', 'Function', 'Returns the new function.', 'lodash');
INSERT INTO `methods` VALUES (295, '_', 'property', '_.property(path)', 'Creates a function that returns the value at path of a given object.', 'Function', 'Returns the new accessor function.', 'lodash');
INSERT INTO `methods` VALUES (296, '_', 'propertyOf', '_.propertyOf(object)', 'The opposite of _.property; this method creates a function that returns the value at a given path of object.', 'Function', 'Returns the new accessor function.', 'lodash');
INSERT INTO `methods` VALUES (297, '_', 'range', '_.range([start=0], end, [step=1])', 'Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end. A step of -1 is used if a negative start is specified without an end or step. If end is not specified, it\'s set to start with start then set to 0.\nNote: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.', 'Array', 'Returns the range of numbers.', 'lodash');
INSERT INTO `methods` VALUES (298, '_', 'rangeRight', '_.rangeRight([start=0], end, [step=1])', 'This method is like _.range except that it populates values in descending order.', 'Array', 'Returns the range of numbers.', 'lodash');
INSERT INTO `methods` VALUES (299, '_', 'runInContext', '_.runInContext([context=root])', 'Create a new pristine lodash function using the context object.', 'Function', 'Returns a new lodash function.', 'lodash');
INSERT INTO `methods` VALUES (300, '_', 'stubArray', '_.stubArray()', 'This method returns a new empty array.', 'Array', 'Returns the new empty array.', 'lodash');
INSERT INTO `methods` VALUES (301, '_', 'stubFalse', '_.stubFalse()', 'This method returns false.', 'boolean', 'Returns false.', 'lodash');
INSERT INTO `methods` VALUES (302, '_', 'stubObject', '_.stubObject()', 'This method returns a new empty object.', 'Object', 'Returns the new empty object.', 'lodash');
INSERT INTO `methods` VALUES (303, '_', 'stubString', '_.stubString()', 'This method returns an empty string.', 'string', 'Returns the empty string.', 'lodash');
INSERT INTO `methods` VALUES (304, '_', 'stubTrue', '_.stubTrue()', 'This method returns true.', 'boolean', 'Returns true.', 'lodash');
INSERT INTO `methods` VALUES (305, '_', 'times', '_.times(n, [iteratee=_.identity])', 'Invokes the iteratee n times, returning an array of the results of each invocation. The iteratee is invoked with one argument; (index).', 'Array', 'Returns the array of results.', 'lodash');
INSERT INTO `methods` VALUES (306, '_', 'toPath', '_.toPath(value)', 'Converts value to a property path array.', 'Array', 'Returns the new property path array.', 'lodash');
INSERT INTO `methods` VALUES (307, '_', 'uniqueId', '_.uniqueId([prefix=\'\'])', 'Generates a unique ID. If prefix is given, the ID is appended to it.', 'string', 'Returns the unique ID.', 'lodash');
INSERT INTO `methods` VALUES (308, 'FileHandle', 'appendFile', 'filehandle.appendFile(data, options)', '<p>Asynchronously append data to this file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. The <code>Promise</code> will be\nresolved with no arguments upon success.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>FileHandle</code> must have been opened for appending.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (309, 'FileHandle', 'chmod', 'filehandle.chmod(mode)', '<p>Modifies the permissions on the file. The <code>Promise</code> is resolved with no\narguments upon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (310, 'FileHandle', 'chown', 'filehandle.chown(uid, gid)', '<p>Changes the ownership of the file then resolves the <code>Promise</code> with no arguments\nupon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (311, 'FileHandle', 'close', 'filehandle.close()', '<p>Closes the file descriptor.</p>\n<pre><code class=\"lang-js\">const fsPromises = require(&#39;fs&#39;).promises;\nasync function openAndClose() {\n  let filehandle;\n  try {\n    filehandle = await fsPromises.open(&#39;thefile.txt&#39;, &#39;r&#39;);\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n</code></pre>\n', 'Promise', 'Returns: {Promise} A `Promise` that will be resolved once the underlying file descriptor is closed, or will be rejected if an error occurs while closing. ', 'nodejs fs');
INSERT INTO `methods` VALUES (312, 'FileHandle', 'datasync', 'filehandle.datasync()', '<p>Asynchronous fdatasync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (313, 'FileHandle', 'read', 'filehandle.read(buffer, offset, length, position)', '<p>Read data from the file.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>Following successful read, the <code>Promise</code> is resolved with an object with a\n<code>bytesRead</code> property specifying the number of bytes read, and a <code>buffer</code>\nproperty that is a reference to the passed in <code>buffer</code> argument.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (314, 'FileHandle', 'sync', 'filehandle.sync()', '<p>Asynchronous fsync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (315, 'FileHandle', 'stat', 'filehandle.stat()', '<p>Retrieves the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> for the file.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (316, 'FileHandle', 'readFile', 'filehandle.readFile(options)', '<p>Asynchronously reads the entire contents of a file.</p>\n<p>The <code>Promise</code> is resolved with the contents of the file. If no encoding is\nspecified (using <code>options.encoding</code>), the data is returned as a <code>Buffer</code>\nobject. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory&#39;s contents will be\nreturned.</p>\n<p>The <code>FileHandle</code> has to support reading.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (317, 'FileHandle', 'truncate', 'filehandle.truncate(len)', '<p>Truncates the file then resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>If the file was larger than <code>len</code> bytes, only the first <code>len</code> bytes will be\nretained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\n\nconsole.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 4);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints: Node\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\n\nconsole.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 10);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints Node.js\\0\\0\\0\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (318, 'FileHandle', 'utimes', 'filehandle.utimes(atime, mtime)', '<p>Change the file system timestamps of the object referenced by the <code>FileHandle</code>\nthen resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>This function does not work on AIX versions before 7.1, it will resolve the\n<code>Promise</code> with an error using code <code>UV_ENOSYS</code>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (319, 'FileHandle', 'write', 'filehandle.write(buffer, offset, length, position)', '<p>Write <code>buffer</code> to the file.</p>\n<p>The <code>Promise</code> is resolved with an object containing a <code>bytesWritten</code> property\nidentifying the number of bytes written, and a <code>buffer</code> property containing\na reference to the <code>buffer</code> written.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>It is unsafe to use <code>filehandle.write()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected). For this\nscenario, <code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (320, 'FileHandle', 'writeFile', 'filehandle.writeFile(data, options)', '<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer. The <code>Promise</code> will be resolved with no\narguments upon success.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>filehandle.writeFile()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected).</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (321, 'fs_promises_api', 'access', 'fsPromises.access(path[, mode])', '<p>Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. Check <a href=\"#fs_file_access_constants\">File Access Constants</a> for possible values\nof <code>mode</code>. It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<p>If the accessibility check is successful, the <code>Promise</code> is resolved with no\nvalue. If any of the accessibility checks fail, the <code>Promise</code> is rejected\nwith an <code>Error</code> object. The following example checks if the file\n<code>/etc/passwd</code> can be read and written by the current process.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\n\nfsPromises.access(&#39;/etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK)\n  .then(() =&gt; console.log(&#39;can access&#39;))\n  .catch(() =&gt; console.error(&#39;cannot access&#39;));\n</code></pre>\n<p>Using <code>fsPromises.access()</code> to check for the accessibility of a file before\ncalling <code>fsPromises.open()</code> is not recommended. Doing so introduces a race\ncondition, since other processes may change the file&#39;s state between the two\ncalls. Instead, user code should open/read/write the file directly and handle\nthe error raised if the file is not accessible.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (322, 'fs_promises_api', 'appendFile', 'fsPromises.appendFile(path, data[, options])', '<p>Asynchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. The <code>Promise</code> will be\nresolved with no arguments upon success.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>path</code> may be specified as a <code>FileHandle</code> that has been opened\nfor appending (using <code>fsPromises.open()</code>).</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (323, 'fs_promises_api', 'chmod', 'fsPromises.chmod(path, mode)', '<p>Changes the permissions of a file then resolves the <code>Promise</code> with no\narguments upon succces.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (324, 'fs_promises_api', 'chown', 'fsPromises.chown(path, uid, gid)', '<p>Changes the ownership of a file then resolves the <code>Promise</code> with no arguments\nupon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (325, 'fs_promises_api', 'fchown', 'fsPromises.fchown(filehandle, uid, gid)', '<p>Changes the ownership of the file represented by <code>filehandle</code> then resolves\nthe <code>Promise</code> with no arguments upon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (326, 'fs_promises_api', 'copyFile', 'fsPromises.copyFile(src, dest[, flags])', '<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. The <code>Promise</code> will be resolved with no arguments upon success.</p>\n<p>Node.js makes no guarantees about the atomicity of the copy operation. If an\nerror occurs after the destination file has been opened for writing, Node.js\nwill attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fsPromises = require(&#39;fs&#39;).promises;\n\n// destination.txt will be created or overwritten by default.\nfsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;)\n  .then(() =&gt; console.log(&#39;source.txt was copied to destination.txt&#39;))\n  .catch(() =&gt; console.log(&#39;The file could not be copied&#39;));\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fsPromises = fs.promises;\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL)\n  .then(() =&gt; console.log(&#39;source.txt was copied to destination.txt&#39;))\n  .catch(() =&gt; console.log(&#39;The file could not be copied&#39;));\n</code></pre>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (327, 'fs_promises_api', 'fchmod', 'fsPromises.fchmod(filehandle, mode)', '<p>Asynchronous fchmod(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (328, 'fs_promises_api', 'fdatasync', 'fsPromises.fdatasync(filehandle)', '<p>Asynchronous fdatasync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (329, 'fs_promises_api', 'fstat', 'fsPromises.fstat(filehandle)', '<p>Retrieves the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> for the given <code>filehandle</code>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (330, 'fs_promises_api', 'fsync', 'fsPromises.fsync(filehandle)', '<p>Asynchronous fsync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (331, 'fs_promises_api', 'ftruncate', 'fsPromises.ftruncate(filehandle[, len])', '<p>Truncates the file represented by <code>filehandle</code> then resolves the <code>Promise</code>\nwith no arguments upon success.</p>\n<p>If the file referred to by the <code>FileHandle</code> was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 4);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints: Node\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 10);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints Node.js\\0\\0\\0\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (332, 'fs_promises_api', 'futimes', 'fsPromises.futimes(filehandle, atime, mtime)', '<p>Change the file system timestamps of the object referenced by the supplied\n<code>FileHandle</code> then resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>This function does not work on AIX versions before 7.1, it will resolve the\n<code>Promise</code> with an error using code <code>UV_ENOSYS</code>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (333, 'fs_promises_api', 'lchmod', 'fsPromises.lchmod(path, mode)', '<p>Changes the permissions on a symbolic link then resolves the <code>Promise</code> with\nno arguments upon success. This method is only implemented on macOS.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (334, 'fs_promises_api', 'lchown', 'fsPromises.lchown(path, uid, gid)', '<p>Changes the ownership on a symbolic link then resolves the <code>Promise</code> with\nno arguments upon success. This method is only implemented on macOS.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (335, 'fs_promises_api', 'link', 'fsPromises.link(existingPath, newPath)', '<p>Asynchronous link(2). The <code>Promise</code> is resolved with no arguments upon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (336, 'fs_promises_api', 'lstat', 'fsPromises.lstat(path)', '<p>Asynchronous lstat(2). The <code>Promise</code> is resolved with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object\nfor the given symbolic link <code>path</code>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (337, 'fs_promises_api', 'mkdir', 'fsPromises.mkdir(path[, mode])', '<p>Asynchronously creates a directory then resolves the <code>Promise</code> with no\narguments upon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (338, 'fs_promises_api', 'mkdtemp', 'fsPromises.mkdtemp(prefix[, options])', '<p>Creates a unique temporary directory and resolves the <code>Promise</code> with the created\nfolder path. A unique directory name is generated by appending six random\ncharacters to the end of the provided <code>prefix</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n<pre><code class=\"lang-js\">fsPromises.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;))\n  .catch(console.error);\n</code></pre>\n<p>The <code>fsPromises.mkdtemp()</code> method will append the six randomly selected\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>, the\n<code>prefix</code> must end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (339, 'fs_promises_api', 'open', 'fsPromises.open(path, flags[, mode])', '<p>Asynchronous file open that returns a <code>Promise</code> that, when resolved, yields a\n<code>FileHandle</code> object. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated.</p>\n<p>Some characters (<code>&lt; &gt; : &quot; / \\ | ? *</code>) are reserved under Windows as documented\nby <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx\">this MSDN page</a>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (340, 'fs_promises_api', 'read', 'fsPromises.read(filehandle, buffer, offset, length, position)', '<p>Read data from the file specified by <code>filehandle</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>Following successful read, the <code>Promise</code> is resolved with an object with a\n<code>bytesRead</code> property specifying the number of bytes read, and a <code>buffer</code>\nproperty that is a reference to the passed in <code>buffer</code> argument.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (341, 'fs_promises_api', 'realpath', 'fsPromises.realpath(path[, options])', '<p>Determines the actual location of <code>path</code> using the same semantics as the\n<code>fs.realpath.native()</code> function then resolves the <code>Promise</code> with the resolved\npath.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned will be\npassed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (342, 'fs_promises_api', 'rename', 'fsPromises.rename(oldPath, newPath)', '<p>Renames <code>oldPath</code> to <code>newPath</code> and resolves the <code>Promise</code> with no arguments\nupon success.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (343, 'fs_promises_api', 'rmdir', 'fsPromises.rmdir(path)', '<p>Removes the directory identified by <code>path</code> then resolves the <code>Promise</code> with\nno arguments upon success.</p>\n<p>Using <code>fsPromises.rmdir()</code> on a file (not a directory) results in the\n<code>Promise</code> being rejected with an <code>ENOENT</code> error on Windows and an <code>ENOTDIR</code>\nerror on POSIX.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (344, 'fs_promises_api', 'stat', 'fsPromises.stat(path)', '<p>The <code>Promise</code> is resolved with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object for the given <code>path</code>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (345, 'fs_promises_api', 'symlink', 'fsPromises.symlink(target, path[, type])', '<p>Creates a symbolic link then resolves the <code>Promise</code> with no arguments upon\nsuccess.</p>\n<p>The <code>type</code> argument is only used on Windows platforms and can be one of <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code>. Note that Windows junction\npoints require the destination path to be absolute. When using <code>&#39;junction&#39;</code>,\nthe <code>target</code> argument will automatically be normalized to absolute path.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (346, 'fs_promises_api', 'truncate', 'fsPromises.truncate(path[, len])', '<p>Truncates the <code>path</code> then resolves the <code>Promise</code> with no arguments upon\nsuccess. The <code>path</code> <em>must</em> be a string or <code>Buffer</code>.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (347, 'fs_promises_api', 'unlink', 'fsPromises.unlink(path)', '<p>Asynchronous unlink(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (348, 'fs_promises_api', 'readdir', 'fsPromises.readdir(path[, options])', '<p>Reads the contents of a directory then resolves the <code>Promise</code> with an array\nof the names of the files in the directory excludiing <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the filenames returned\nwill be passed as <code>Buffer</code> objects.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (349, 'fs_promises_api', 'readFile', 'fsPromises.readFile(path[, options])', '<p>Asynchronously reads the entire contents of a file.</p>\n<p>The <code>Promise</code> is resolved with the contents of the file. If no encoding is\nspecified (using <code>options.encoding</code>), the data is returned as a <code>Buffer</code>\nobject. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory&#39;s contents will be\nreturned.</p>\n<p>Any specified <code>FileHandle</code> has to support reading.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (350, 'fs_promises_api', 'readlink', 'fsPromises.readlink(path[, options])', '<p>Asynchronous readlink(2). The <code>Promise</code> is resolved with the <code>linkString</code> upon\nsuccess.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path returned. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the link path\nreturned will be passed as a <code>Buffer</code> object.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (351, 'fs_promises_api', 'utimes', 'fsPromises.utimes(path, atime, mtime)', '<p>Change the file system timestamps of the object referenced by <code>path</code> then\nresolves the <code>Promise</code> with no arguments upon success.</p>\n<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>\n<ul>\n<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a\nnumeric string like <code>&#39;123456789.0&#39;</code>.</li>\n<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code> or\n<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>\n</ul>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (352, 'fs_promises_api', 'write', 'fsPromises.write(filehandle, buffer[, offset[, length[, position]]])', '<p>Write <code>buffer</code> to the file specified by <code>filehandle</code>.</p>\n<p>The <code>Promise</code> is resolved with an object containing a <code>bytesWritten</code> property\nidentifying the number of bytes written, and a <code>buffer</code> property containing\na reference to the <code>buffer</code> written.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>It is unsafe to use <code>fsPromises.write()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected). For this\nscenario, <code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (353, 'fs.Stats', 'isBlockDevice', 'stats.isBlockDevice()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a block device.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (354, 'fs_promises_api', 'writeFile', 'fsPromises.writeFile(file, data[, options])', '<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer. The <code>Promise</code> will be resolved with no\narguments upon success.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>Any specified <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>fsPromises.writeFile()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected).</p>\n', 'Promise', 'Returns: {Promise} ', 'nodejs fs');
INSERT INTO `methods` VALUES (355, 'fs.FSWatcher', 'close', 'watcher.close()', '<p>Stop watching for changes on the given <code>fs.FSWatcher</code>. Once stopped, the\n<code>fs.FSWatcher</code> object is no longer usable.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (356, 'fs.Stats', 'isCharacterDevice', 'stats.isCharacterDevice()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a character device.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (357, 'fs.Stats', 'isDirectory', 'stats.isDirectory()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a file system directory.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (358, 'fs.Stats', 'isFIFO', 'stats.isFIFO()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a first-in-first-out (FIFO)\npipe.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (359, 'fs.Stats', 'isFile', 'stats.isFile()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a regular file.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (360, 'fs.Stats', 'isSocket', 'stats.isSocket()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a socket.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (361, 'fs.Stats', 'isSymbolicLink', 'stats.isSymbolicLink()', '<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a symbolic link.</p>\n<p>This method is only valid when using <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a>.</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (362, 'fs', 'access', 'fs.access(path[, mode], callback)', '<p>Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. Check <a href=\"#fs_file_access_constants\">File Access Constants</a> for possible values\nof <code>mode</code>. It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<p>The final argument, <code>callback</code>, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be an <code>Error</code> object. The following examples check if\n<code>package.json</code> exists, and if it is readable or writable.</p>\n<pre><code class=\"lang-js\">const file = &#39;package.json&#39;;\n\n// Check if the file exists in the current directory.\nfs.access(file, fs.constants.F_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;does not exist&#39; : &#39;exists&#39;}`);\n});\n\n// Check if the file is readable.\nfs.access(file, fs.constants.R_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;is not readable&#39; : &#39;is readable&#39;}`);\n});\n\n// Check if the file is writable.\nfs.access(file, fs.constants.W_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;is not writable&#39; : &#39;is writable&#39;}`);\n});\n\n// Check if the file exists in the current directory, and if it is writable.\nfs.access(file, fs.constants.F_OK | fs.constants.W_OK, (err) =&gt; {\n  if (err) {\n    console.error(\n      `${file} ${err.code === &#39;ENOENT&#39; ? &#39;does not exist&#39; : &#39;is read-only&#39;}`);\n  } else {\n    console.log(`${file} exists, and it is writable`);\n  }\n});\n</code></pre>\n<p>Using <code>fs.access()</code> to check for the accessibility of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible.</p>\n<p><strong>write (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (!err) {\n    console.error(&#39;myfile already exists&#39;);\n    return;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n</code></pre>\n<p><strong>write (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;EEXIST&#39;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<p><strong>read (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n</code></pre>\n<p><strong>read (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</code></pre>\n<p>The &quot;not recommended&quot; examples above check for accessibility and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.</p>\n<p>In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (363, 'fs', 'accessSync', 'fs.accessSync(path[, mode])', '<p>Synchronously tests a user&#39;s permissions for the file or directory specified\nby <code>path</code>. The <code>mode</code> argument is an optional integer that specifies the\naccessibility checks to be performed. Check <a href=\"#fs_file_access_constants\">File Access Constants</a> for\npossible values of <code>mode</code>. It is possible to create a mask consisting of\nthe bitwise OR of two or more values\n(e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<p>If any of the accessibility checks fail, an <code>Error</code> will be thrown. Otherwise,\nthe method will return <code>undefined</code>.</p>\n<pre><code class=\"lang-js\">try {\n  fs.accessSync(&#39;etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK);\n  console.log(&#39;can read/write&#39;);\n} catch (err) {\n  console.error(&#39;no access!&#39;);\n}\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (364, 'fs', 'appendFile', 'fs.appendFile(path, data[, options], callback)', '<p>Asynchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened\nfor appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will\nnot be closed automatically.</p>\n<pre><code class=\"lang-js\">fs.open(&#39;message.txt&#39;, &#39;a&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.appendFile(fd, &#39;data to append&#39;, &#39;utf8&#39;, (err) =&gt; {\n    fs.close(fd, (err) =&gt; {\n      if (err) throw err;\n    });\n    if (err) throw err;\n  });\n});\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (365, 'fs', 'appendFileSync', 'fs.appendFileSync(path, data[, options])', '<p>Synchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">try {\n  fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;);\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n} catch (err) {\n  /* Handle the error */\n}\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;);\n</code></pre>\n<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened\nfor appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will\nnot be closed automatically.</p>\n<pre><code class=\"lang-js\">let fd;\n\ntry {\n  fd = fs.openSync(&#39;message.txt&#39;, &#39;a&#39;);\n  fs.appendFileSync(fd, &#39;data to append&#39;, &#39;utf8&#39;);\n} catch (err) {\n  /* Handle the error */\n} finally {\n  if (fd !== undefined)\n    fs.closeSync(fd);\n}\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (366, 'fs', 'chmod', 'fs.chmod(path, mode, callback)', '<p>Asynchronously changes the permissions of a file. No arguments other than a\npossible exception are given to the completion callback.</p>\n<p>See also: chmod(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (367, 'fs', 'chmodSync', 'fs.chmodSync(path, mode)', '<p>Synchronously changes the permissions of a file. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_chmod_path_mode_callback\"><code>fs.chmod()</code></a>.</p>\n<p>See also: chmod(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (368, 'fs', 'chown', 'fs.chown(path, uid, gid, callback)', '<p>Asynchronously changes owner and group of a file. No arguments other than a\npossible exception are given to the completion callback.</p>\n<p>See also: chown(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (369, 'fs', 'chownSync', 'fs.chownSync(path, uid, gid)', '<p>Synchronously changes owner and group of a file. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_chown_path_uid_gid_callback\"><code>fs.chown()</code></a>.</p>\n<p>See also: chown(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (370, 'fs', 'close', 'fs.close(fd, callback)', '<p>Asynchronous close(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (371, 'fs', 'copyFile', 'fs.copyFile(src, dest[, flags], callback)', '<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. No arguments other than a possible exception are given to the\ncallback function. Node.js makes no guarantees about the atomicity of the copy\noperation. If an error occurs after the destination file has been opened for\nwriting, Node.js will attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;source.txt was copied to destination.txt&#39;);\n});\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL, callback);\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (372, 'fs', 'closeSync', 'fs.closeSync(fd)', '<p>Synchronous close(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (373, 'fs', 'copyFileSync', 'fs.copyFileSync(src, dest[, flags])', '<p>Synchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. Returns <code>undefined</code>. Node.js makes no guarantees about the\natomicity of the copy operation. If an error occurs after the destination file\nhas been opened for writing, Node.js will attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;);\nconsole.log(&#39;source.txt was copied to destination.txt&#39;);\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL);\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (374, 'fs', 'createReadStream', 'fs.createReadStream(path[, options])', '<p>Unlike the 16 kb default <code>highWaterMark</code> for a readable stream, the stream\nreturned by this method has a default <code>highWaterMark</code> of 64 kb.</p>\n<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from\nthe file instead of the entire file. Both <code>start</code> and <code>end</code> are inclusive and\nstart counting at 0. If <code>fd</code> is specified and <code>start</code> is omitted or <code>undefined</code>,\n<code>fs.createReadStream()</code> reads sequentially from the current file position.\nThe <code>encoding</code> can be any one of those accepted by <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use\nthe specified file descriptor. This means that no <code>&#39;open&#39;</code> event will be\nemitted. Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed\nto <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>autoClose</code> is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error. It is the application&#39;s responsibility to close it and make\nsure there&#39;s no file descriptor leak. If <code>autoClose</code> is set to true (default\nbehavior), on <code>&#39;error&#39;</code> or <code>&#39;end&#39;</code> the file descriptor will be closed\nautomatically.</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the\nfile was created.</p>\n<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>\n<pre><code class=\"lang-js\">fs.createReadStream(&#39;sample.txt&#39;, { start: 90, end: 99 });\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n', 'fs.ReadStream', 'Returns: {fs.ReadStream} See [Readable Streams][]. ', 'nodejs fs');
INSERT INTO `methods` VALUES (375, 'fs', 'createWriteStream', 'fs.createWriteStream(path[, options])', '<p><code>options</code> may also include a <code>start</code> option to allow writing data at\nsome position past the beginning of the file. Modifying a file rather\nthan replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the\ndefault mode <code>w</code>. The <code>encoding</code> can be any one of those accepted by\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>autoClose</code> is set to true (default behavior) on <code>&#39;error&#39;</code> or <code>&#39;finish&#39;</code>\nthe file descriptor will be closed automatically. If <code>autoClose</code> is false,\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\nIt is the application&#39;s responsibility to close it and make sure there&#39;s no\nfile descriptor leak.</p>\n<p>Like <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a>, if <code>fd</code> is specified, <a href=\"#fs_class_fs_writestream\"><code>WriteStream</code></a> will ignore the\n<code>path</code> argument and will use the specified file descriptor. This means that no\n<code>&#39;open&#39;</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking\n<code>fd</code>s should be passed to <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n', 'fs.WriteStream', 'Returns: {fs.WriteStream} See [Writable Stream][]. ', 'nodejs fs');
INSERT INTO `methods` VALUES (376, 'fs', 'exists', 'fs.exists(path, callback)', '<p>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false. Example:</p>\n<pre><code class=\"lang-js\">fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\n  console.log(exists ? &#39;it\\&#39;s there&#39; : &#39;no passwd!&#39;);\n});\n</code></pre>\n<p><strong>Note that the parameter to this callback is not consistent with other\nNode.js callbacks.</strong> Normally, the first parameter to a Node.js callback is\nan <code>err</code> parameter, optionally followed by other parameters. The\n<code>fs.exists()</code> callback has only one boolean parameter. This is one reason\n<code>fs.access()</code> is recommended instead of <code>fs.exists()</code>.</p>\n<p>Using <code>fs.exists()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist.</p>\n<p><strong>write (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    console.error(&#39;myfile already exists&#39;);\n  } else {\n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n</code></pre>\n<p><strong>write (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;EEXIST&#39;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<p><strong>read (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      readMyData(fd);\n    });\n  } else {\n    console.error(&#39;myfile does not exist&#39;);\n  }\n});\n</code></pre>\n<p><strong>read (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</code></pre>\n<p>The &quot;not recommended&quot; examples above check for existence and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.</p>\n<p>In general, check for the existence of a file only if the file won’t be\nused directly, for example when its existence is a signal from another\nprocess.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (377, 'fs', 'existsSync', 'fs.existsSync(path)', '<p>Synchronous version of <a href=\"fs.html#fs_fs_exists_path_callback\"><code>fs.exists()</code></a>.\nReturns <code>true</code> if the path exists, <code>false</code> otherwise.</p>\n<p>Note that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not.\n(The <code>callback</code> parameter to <code>fs.exists()</code> accepts parameters that are\ninconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not use\na callback.)</p>\n', 'boolean', 'Returns: {boolean} ', 'nodejs fs');
INSERT INTO `methods` VALUES (378, 'fs', 'fchmod', 'fs.fchmod(fd, mode, callback)', '<p>Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (379, 'fs', 'fchmodSync', 'fs.fchmodSync(fd, mode)', '<p>Synchronous fchmod(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (380, 'fs', 'fchown', 'fs.fchown(fd, uid, gid, callback)', '<p>Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (381, 'fs', 'fchownSync', 'fs.fchownSync(fd, uid, gid)', '<p>Synchronous fchown(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (382, 'fs', 'fdatasync', 'fs.fdatasync(fd, callback)', '<p>Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (383, 'fs', 'fdatasyncSync', 'fs.fdatasyncSync(fd)', '<p>Synchronous fdatasync(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (384, 'fs', 'fstat', 'fs.fstat(fd, callback)', '<p>Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>fstat()</code> is identical to <a href=\"fs.html#fs_fs_stat_path_callback\"><code>stat()</code></a>,\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (385, 'fs', 'fsync', 'fs.fsync(fd, callback)', '<p>Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (386, 'fs', 'fstatSync', 'fs.fstatSync(fd)', '<p>Synchronous fstat(2).</p>\n', 'fs.Stats', 'Returns: {fs.Stats} ', 'nodejs fs');
INSERT INTO `methods` VALUES (387, 'fs', 'fsyncSync', 'fs.fsyncSync(fd)', '<p>Synchronous fsync(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (388, 'fs', 'ftruncateSync', 'fs.ftruncateSync(fd[, len])', '<p>Synchronous ftruncate(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (389, 'fs', 'lchmodSync', 'fs.lchmodSync(path, mode)', '<p>Synchronous lchmod(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (390, 'fs', 'lchownSync', 'fs.lchownSync(path, uid, gid)', '<p>Synchronous lchown(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (391, 'fs', 'ftruncate', 'fs.ftruncate(fd[, len], callback)', '<p>Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<p>If the file referred to by the file descriptor was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n});\n// Prints: Node\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// (&#39;Node.js\\0\\0\\0&#39; in UTF8)\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (392, 'fs', 'futimes', 'fs.futimes(fd, atime, mtime, callback)', '<p>Change the file system timestamps of the object referenced by the supplied file\ndescriptor. See <a href=\"#fs_fs_utimes_path_atime_mtime_callback\"><code>fs.utimes()</code></a>.</p>\n<p>This function does not work on AIX versions before 7.1, it will return the\nerror <code>UV_ENOSYS</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (393, 'fs', 'futimesSync', 'fs.futimesSync(fd, atime, mtime)', '<p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (394, 'fs', 'lchmod', 'fs.lchmod(path, mode, callback)', '<p>Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>Only available on macOS.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (395, 'fs', 'lchown', 'fs.lchown(path, uid, gid, callback)', '<p>Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (396, 'fs', 'link', 'fs.link(existingPath, newPath, callback)', '<p>Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (397, 'fs', 'linkSync', 'fs.linkSync(existingPath, newPath)', '<p>Synchronous link(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (398, 'fs', 'lstat', 'fs.lstat(path, callback)', '<p>Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>lstat()</code> is identical to <code>stat()</code>,\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (399, 'fs', 'lstatSync', 'fs.lstatSync(path)', '<p>Synchronous lstat(2).</p>\n', 'fs.Stats', 'Returns: {fs.Stats} ', 'nodejs fs');
INSERT INTO `methods` VALUES (400, 'fs', 'mkdir', 'fs.mkdir(path[, mode], callback)', '<p>Asynchronously creates a directory. No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>See also: mkdir(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (401, 'fs', 'mkdirSync', 'fs.mkdirSync(path[, mode])', '<p>Synchronously creates a directory. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_mkdir_path_mode_callback\"><code>fs.mkdir()</code></a>.</p>\n<p>See also: mkdir(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (402, 'fs', 'mkdtemp', 'fs.mkdtemp(prefix[, options], callback)', '<p>Creates a unique temporary directory.</p>\n<p>Generates six random characters to be appended behind a required\n<code>prefix</code> to create a unique temporary directory.</p>\n<p>The created folder path is passed as a string to the callback&#39;s second\nparameter.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n<pre><code class=\"lang-js\">fs.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;), (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2\n});\n</code></pre>\n<p>The <code>fs.mkdtemp()</code> method will append the six randomly selected characters\ndirectly to the <code>prefix</code> string. For instance, given a directory <code>/tmp</code>, if the\nintention is to create a temporary directory <em>within</em> <code>/tmp</code>, the <code>prefix</code>\nmust end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n<pre><code class=\"lang-js\">// The parent directory for the new temporary directory\nconst tmpDir = os.tmpdir();\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst { sep } = require(&#39;path&#39;);\nfs.mkdtemp(`${tmpDir}${sep}`, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (403, 'fs', 'mkdtempSync', 'fs.mkdtempSync(prefix[, options])', '<p>The synchronous version of <a href=\"#fs_fs_mkdtemp_prefix_options_callback\"><code>fs.mkdtemp()</code></a>. Returns the created\nfolder path.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n', 'string', 'Returns: {string} ', 'nodejs fs');
INSERT INTO `methods` VALUES (404, 'fs', 'open', 'fs.open(path, flags[, mode], callback)', '<p>Asynchronous file open. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated.</p>\n<p>The callback gets two arguments <code>(err, fd)</code>.</p>\n<p>Some characters (<code>&lt; &gt; : &quot; / \\ | ? *</code>) are reserved under Windows as documented\nby <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx\">this MSDN page</a>.</p>\n<p>Functions based on <code>fs.open()</code> exhibit this behavior as well. eg.\n<code>fs.writeFile()</code>, <code>fs.readFile()</code>, etc.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (405, 'fs', 'openSync', 'fs.openSync(path, flags[, mode])', '<p>Synchronous version of <a href=\"#fs_fs_open_path_flags_mode_callback\"><code>fs.open()</code></a>. Returns an integer representing the file\ndescriptor.</p>\n', 'number', 'Returns: {number} ', 'nodejs fs');
INSERT INTO `methods` VALUES (406, 'fs', 'read', 'fs.read(fd, buffer, offset, length, position, callback)', '<p>Read data from the file specified by <code>fd</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>\n<p>If this method is invoked as its <a href=\"util.html#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>bytesRead</code> and <code>buffer</code> properties.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (407, 'fs', 'readdir', 'fs.readdir(path[, options], callback)', '<p>Asynchronous readdir(3). Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\nthe names of the files in the directory excluding <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (408, 'fs', 'readdirSync', 'fs.readdirSync(path[, options])', '<p>Synchronous readdir(3).</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n', 'string[]', 'Returns: {string[]} An array of filenames excluding `\'.\'` and `\'..\'`. ', 'nodejs fs');
INSERT INTO `methods` VALUES (409, 'fs', 'readFile', 'fs.readFile(path[, options], callback)', '<p>Asynchronously reads the entire contents of a file. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>\n<p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the\ncontents of the file.</p>\n<p>If no encoding is specified, then the raw buffer is returned.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>When the path is a directory, the behavior of <code>fs.readFile()</code> and\n<a href=\"#fs_fs_readfilesync_path_options\"><code>fs.readFileSync()</code></a> is platform-specific. On macOS, Linux, and Windows, an\nerror will be returned. On FreeBSD, a representation of the directory&#39;s contents\nwill be returned.</p>\n<pre><code class=\"lang-js\">// macOS, Linux, and Windows\nfs.readFile(&#39;&lt;directory&gt;&#39;, (err, data) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, read &lt;directory&gt;]\n});\n\n//  FreeBSD\nfs.readFile(&#39;&lt;directory&gt;&#39;, (err, data) =&gt; {\n  // =&gt; null, &lt;data&gt;\n});\n</code></pre>\n<p>Any specified file descriptor has to support reading.</p>\n<p>If a file descriptor is specified as the <code>path</code>, it will not be closed\nautomatically.</p>\n<p>The <code>fs.readFile()</code> function buffers the entire file. To minimize memory costs,\nwhen possible prefer streaming via <code>fs.createReadStream()</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (410, 'fs', 'readFileSync', 'fs.readFileSync(path[, options])', '<p>Synchronous version of <a href=\"#fs_fs_readfile_path_options_callback\"><code>fs.readFile()</code></a>. Returns the contents of the <code>path</code>.</p>\n<p>If the <code>encoding</code> option is specified then this function returns a\nstring. Otherwise it returns a buffer.</p>\n<p>Similar to <a href=\"#fs_fs_readfile_path_options_callback\"><code>fs.readFile()</code></a>, when the path is a directory, the behavior of\n<code>fs.readFileSync()</code> is platform-specific.</p>\n<pre><code class=\"lang-js\">// macOS, Linux, and Windows\nfs.readFileSync(&#39;&lt;directory&gt;&#39;);\n// =&gt; [Error: EISDIR: illegal operation on a directory, read &lt;directory&gt;]\n\n//  FreeBSD\nfs.readFileSync(&#39;&lt;directory&gt;&#39;); // =&gt; null, &lt;data&gt;\n</code></pre>\n', 'string|Buffer', 'Returns: {string|Buffer} ', 'nodejs fs');
INSERT INTO `methods` VALUES (411, 'fs', 'readlink', 'fs.readlink(path[, options], callback)', '<p>Asynchronous readlink(2). The callback gets two arguments <code>(err,\nlinkString)</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (412, 'fs', 'readlinkSync', 'fs.readlinkSync(path[, options])', '<p>Synchronous readlink(2). Returns the symbolic link&#39;s string value.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n', 'string|Buffer', 'Returns: {string|Buffer} ', 'nodejs fs');
INSERT INTO `methods` VALUES (413, 'fs', 'readSync', 'fs.readSync(fd, buffer, offset, length, position)', '<p>Synchronous version of <a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\"><code>fs.read()</code></a>. Returns the number of <code>bytesRead</code>.</p>\n', 'number', 'Returns: {number} ', 'nodejs fs');
INSERT INTO `methods` VALUES (414, 'fs', 'realpath', 'fs.realpath(path[, options], callback)', '<p>Asynchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and\nsymbolic links.</p>\n<p>Note that &quot;canonical&quot; does not mean &quot;unique&quot;: hard links and bind mounts can\nexpose a file system entity through many pathnames.</p>\n<p>This function behaves like realpath(3), with some exceptions:</p>\n<ol>\n<li><p>No case conversion is performed on case-insensitive file systems.</p>\n</li>\n<li><p>The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.</p>\n</li>\n</ol>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>. May use <code>process.cwd</code>\nto resolve relative paths.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system\ndependent name for that object.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (415, 'fs', 'native', 'fs.realpath.native(path[, options], callback)', '<p>Asynchronous realpath(3).</p>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (416, 'fs', 'realpathSync', 'fs.realpathSync(path[, options])', '<p>Synchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and\nsymbolic links.</p>\n<p>Note that &quot;canonical&quot; does not mean &quot;unique&quot;: hard links and bind mounts can\nexpose a file system entity through many pathnames.</p>\n<p>This function behaves like realpath(3), with some exceptions:</p>\n<ol>\n<li><p>No case conversion is performed on case-insensitive file systems.</p>\n</li>\n<li><p>The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.</p>\n</li>\n</ol>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe returned value. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned\nwill be passed as a <code>Buffer</code> object.</p>\n<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system\ndependent name for that object.</p>\n', 'string|Buffer', 'Returns: {string|Buffer} ', 'nodejs fs');
INSERT INTO `methods` VALUES (417, 'fs', 'native', 'fs.realpathSync.native(path[, options])', '<p>Synchronous realpath(3).</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n', 'string|Buffer', 'Returns: {string|Buffer} ', 'nodejs fs');
INSERT INTO `methods` VALUES (418, 'fs', 'rename', 'fs.rename(oldPath, newPath, callback)', '<p>Asynchronously rename file at <code>oldPath</code> to the pathname provided\nas <code>newPath</code>. In the case that <code>newPath</code> already exists, it will\nbe overwritten. No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<p>See also: rename(2).</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;oldFile.txt&#39;, &#39;newFile.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;Rename complete!&#39;);\n});\n</code></pre>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (419, 'fs', 'renameSync', 'fs.renameSync(oldPath, newPath)', '<p>Synchronous rename(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (420, 'fs', 'rmdir', 'fs.rmdir(path, callback)', '<p>Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n<p>Using <code>fs.rmdir()</code> on a file (not a directory) results in an <code>ENOENT</code> error on\nWindows and an <code>ENOTDIR</code> error on POSIX.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (421, 'fs', 'rmdirSync', 'fs.rmdirSync(path)', '<p>Synchronous rmdir(2). Returns <code>undefined</code>.</p>\n<p>Using <code>fs.rmdirSync()</code> on a file (not a directory) results in an <code>ENOENT</code> error\non Windows and an <code>ENOTDIR</code> error on POSIX.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (422, 'fs', 'stat', 'fs.stat(path, callback)', '<p>Asynchronous stat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object.</p>\n<p>In case of an error, the <code>err.code</code> will be one of <a href=\"errors.html#errors_common_system_errors\">Common System Errors</a>.</p>\n<p>Using <code>fs.stat()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available.</p>\n<p>To check if a file exists without manipulating it afterwards, <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>\nis recommended.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (423, 'fs', 'statSync', 'fs.statSync(path)', '<p>Synchronous stat(2).</p>\n', 'fs.Stats', 'Returns: {fs.Stats} ', 'nodejs fs');
INSERT INTO `methods` VALUES (424, 'fs', 'symlink', 'fs.symlink(target, path[, type], callback)', '<p>Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback. The <code>type</code> argument can be set to <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code> and is only available on\nWindows (ignored on other platforms). Note that Windows junction points require\nthe destination path to be absolute. When using <code>&#39;junction&#39;</code>, the <code>target</code>\nargument will automatically be normalized to absolute path.</p>\n<p>Here is an example below:</p>\n<pre><code class=\"lang-js\">fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;, callback);\n</code></pre>\n<p>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (425, 'fs', 'symlinkSync', 'fs.symlinkSync(target, path[, type])', '<p>Synchronous symlink(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (426, 'fs', 'truncate', 'fs.truncate(path[, len], callback)', '<p>Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.</p>\n<p>Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (427, 'fs', 'truncateSync', 'fs.truncateSync(path[, len])', '<p>Synchronous truncate(2). Returns <code>undefined</code>. A file descriptor can also be\npassed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p>\n<p>Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (428, 'fs', 'unlink', 'fs.unlink(path, callback)', '<p>Asynchronously removes a file or symbolic link. No arguments other than a\npossible exception are given to the completion callback.</p>\n<pre><code class=\"lang-js\">// Assuming that &#39;path/file.txt&#39; is a regular file.\nfs.unlink(&#39;path/file.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;path/file.txt was deleted&#39;);\n});\n</code></pre>\n<p><code>fs.unlink()</code> will not work on a directory, empty or otherwise. To remove a\ndirectory, use <a href=\"#fs_fs_rmdir_path_callback\"><code>fs.rmdir()</code></a>.</p>\n<p>See also: unlink(2).</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (429, 'fs', 'unlinkSync', 'fs.unlinkSync(path)', '<p>Synchronous unlink(2). Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (430, 'fs', 'unwatchFile', 'fs.unwatchFile(filename[, listener])', '<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed,\neffectively stopping watching of <code>filename</code>.</p>\n<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a\nno-op, not an error.</p>\n<p>Using <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and\n<code>fs.unwatchFile()</code>. <code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code>\nand <code>fs.unwatchFile()</code> when possible.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (431, 'fs', 'utimes', 'fs.utimes(path, atime, mtime, callback)', '<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>\n<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>\n<ul>\n<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a\nnumeric string like <code>&#39;123456789.0&#39;</code>.</li>\n<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code> or\n<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>\n</ul>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (432, 'fs', 'utimesSync', 'fs.utimesSync(path, atime, mtime)', '<p>Synchronous version of <a href=\"#fs_fs_utimes_path_atime_mtime_callback\"><code>fs.utimes()</code></a>. Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (433, 'fs', 'watch', 'fs.watch(filename[, options][, listener])', '<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\ndirectory.</p>\n<p>The second argument is optional. If <code>options</code> is provided as a string, it\nspecifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>\n<p>The listener callback gets two arguments <code>(eventType, filename)</code>. <code>eventType</code>\nis either <code>&#39;rename&#39;</code> or <code>&#39;change&#39;</code>, and <code>filename</code> is the name of the file\nwhich triggered the event.</p>\n<p>Note that on most platforms, <code>&#39;rename&#39;</code> is emitted whenever a filename appears\nor disappears in the directory.</p>\n<p>Also note the listener callback is attached to the <code>&#39;change&#39;</code> event fired by\n<a href=\"#fs_class_fs_fswatcher\"><code>fs.FSWatcher</code></a>, but it is not the same thing as the <code>&#39;change&#39;</code> value of\n<code>eventType</code>.</p>\n', 'fs.FSWatcher', 'Returns: {fs.FSWatcher} ', 'nodejs fs');
INSERT INTO `methods` VALUES (434, 'fs', 'watchFile', 'fs.watchFile(filename[, options], listener)', '<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\ntime the file is accessed.</p>\n<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The\n<code>options</code> object may contain a boolean named <code>persistent</code> that indicates\nwhether the process should continue to run as long as files are being watched.\nThe <code>options</code> object may specify an <code>interval</code> property indicating how often the\ntarget should be polled in milliseconds.</p>\n<p>The <code>listener</code> gets two arguments the current stat object and the previous\nstat object:</p>\n<pre><code class=\"lang-js\">fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</code></pre>\n<p>These stat objects are instances of <code>fs.Stat</code>.</p>\n<p>To be notified when the file was modified, not just accessed, it is necessary\nto compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p>\n<p>When an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it\nwill invoke the listener once, with all the fields zeroed (or, for dates, the\nUnix Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>,\ninstead of zero. If the file is created later on, the listener will be called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10.</p>\n<p>Using <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code>. <code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code> when possible.</p>\n<p>When a file being watched by <code>fs.watchFile()</code> disappears and reappears,\nthen the <code>previousStat</code> reported in the second callback event (the file&#39;s\nreappearance) will be the same as the <code>previousStat</code> of the first callback\nevent (its disappearance).</p>\n<p>This happens when:</p>\n<ul>\n<li>the file is deleted, followed by a restore</li>\n<li>the file is renamed twice - the second time back to its original name</li>\n</ul>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (435, 'fs', 'write', 'fs.write(fd, buffer[, offset[, length[, position]]], callback)', '<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>The callback will be given three arguments <code>(err, bytesWritten, buffer)</code> where\n<code>bytesWritten</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>\n<p>If this method is invoked as its <a href=\"util.html#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>bytesWritten</code> and <code>buffer</code> properties.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (436, 'fs', 'write', 'fs.write(fd, string[, position[, encoding]], callback)', '<p>Write <code>string</code> to the file specified by <code>fd</code>. If <code>string</code> is not a string, then\nthe value will be coerced to one.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code> the data will be written at\nthe current position. See pwrite(2).</p>\n<p><code>encoding</code> is the expected string encoding.</p>\n<p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>\nspecifies how many <em>bytes</em> the passed string required to be written. Note that\nbytes written is not the same as string characters. See <a href=\"buffer.html#buffer_class_method_buffer_bytelength_string_encoding\"><code>Buffer.byteLength</code></a>.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (437, 'fs', 'writeFile', 'fs.writeFile(file, data[, options], callback)', '<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The file has been saved!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>Any specified file descriptor has to support writing.</p>\n<p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>If a file descriptor is specified as the <code>file</code>, it will not be closed\nautomatically.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (438, 'fs', 'writeFileSync', 'fs.writeFileSync(file, data[, options])', '<p>The synchronous version of <a href=\"#fs_fs_writefile_file_data_options_callback\"><code>fs.writeFile()</code></a>. Returns <code>undefined</code>.</p>\n', NULL, NULL, 'nodejs fs');
INSERT INTO `methods` VALUES (439, 'fs', 'writeSync', 'fs.writeSync(fd, buffer[, offset[, length[, position]]])', '<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n', 'number', 'Returns: {number} ', 'nodejs fs');
INSERT INTO `methods` VALUES (440, 'fs', 'writeSync', 'fs.writeSync(fd, string[, position[, encoding]])', '<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n', 'number', 'Returns: {number} ', 'nodejs fs');
INSERT INTO `methods` VALUES (441, 'Admin', 'buildInfo', 'buildInfo(options, callback)', 'Retrieve the server information for the currentinstance of the db client', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (442, 'Admin', 'addUser', 'addUser(username, password, options, callback)', 'Add a user to the database.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (443, 'BulkWriteError', 'BulkWriteError', 'new BulkWriteError(message, result)', 'Creates a new BulkWriteError', 'BulkWriteError', 'BulkWriteError instance', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (444, 'Admin', 'command', 'command(command, options, callback)', 'Execute a command', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (445, 'AggregationCursor', 'batchSize', 'batchSize(value)', 'Set the batch size for the cursor.', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (446, 'AggregationCursor', 'close', 'close(callback)', 'Close the cursor, sending a AggregationCursor command and emitting close.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (447, 'Admin', 'ping', 'ping(options, callback)', 'Ping the MongoDB server and retrieve results', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (448, 'Admin', 'listDatabases', 'listDatabases(options, callback)', 'List the available databases', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (449, 'AggregationCursor', 'each', 'each(callback)', 'Iterates over all the documents for this cursor. As with {cursor.toArray},not all of the elements will be iterated if this cursor had been previouly accessed.In that case, {cursor.rewind} can be used to reset the cursor. However, unlike{cursor.toArray}, the cursor will only hold a maximum of batch size elementsat any given time if batch size is specified. Otherwise, the caller is responsiblefor making sure that the entire result can fit the memory.', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (450, 'AggregationCursor', 'explain', 'explain(callback)', 'Execute the explain for the cursor', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (451, 'AggregationCursor', 'geoNear', 'geoNear(document)', 'Add a geoNear stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (452, 'Admin', 'removeUser', 'removeUser(username, options, callback)', 'Remove a user from a database', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (453, 'Cursor', 'addCursorFlag', 'addCursorFlag(flag, value)', 'Add a cursor flag to the cursor', 'Cursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (454, 'Binary', 'Binary', 'new Binary(buffer, subType)', 'A class representation of the BSON Binary type.\nSub types\n\nBSON.BSON_BINARY_SUBTYPE_DEFAULT, default BSON type.\nBSON.BSON_BINARY_SUBTYPE_FUNCTION, BSON function type.\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY, BSON byte array type.\nBSON.BSON_BINARY_SUBTYPE_UUID, BSON uuid type.\nBSON.BSON_BINARY_SUBTYPE_MD5, BSON md5 type.\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED, BSON user defined type.', 'Binary', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (455, 'ChangeStream', 'ChangeStream', 'new ChangeStream(changeDomain, pipeline, options)', 'Creates a new Change Stream instance. Normally created using Collection.watch().', 'ChangeStream', 'ChangeStream instance.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (456, 'BulkWriteResult', 'getUpsertedIdAt', 'getUpsertedIdAt(index)', 'Return the upserted id at position x', 'object', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (457, 'Code', 'Code', 'new Code(code, scope)', 'A class representation of the BSON Code type.', 'Code', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (458, 'CommandCursor', 'batchSize', 'batchSize(value)', 'Set the batch size for the cursor.', 'CommandCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (459, 'AggregationCursor', 'group', 'group(document)', 'Add a group stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (460, 'AggregationCursor', 'limit', 'limit(value)', 'Add a limit stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (461, 'AggregationCursor', 'hasNext', 'hasNext(callback)', 'Check if there is any document still available in the cursor', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (462, 'AggregationCursor', 'lookup', 'lookup(document)', 'Add a lookup stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (463, 'AggregationCursor', 'match', 'match(document)', 'Add a match stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (464, 'Admin', 'replSetGetStatus', 'replSetGetStatus(options, callback)', 'Get ReplicaSet status', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (465, 'Admin', 'serverInfo', 'serverInfo(options, callback)', 'Retrieve the server information for the currentinstance of the db client', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (466, 'Cursor', 'addQueryModifier', 'addQueryModifier(name, value)', 'Add a query modifier to the cursor query', 'Cursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (467, 'Admin', 'serverStatus', 'serverStatus(options, callback)', 'Retrieve this db\'s server status.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (468, 'Cursor', 'batchSize', 'batchSize(value)', 'Set the batch size for the cursor.', 'Cursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (469, 'Cursor', 'close', 'close(options, callback)', 'Close the cursor, sending a KillCursor command and emitting close.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (470, 'Cursor', 'collation', 'collation(value)', 'Set the collation options for the cursor.', 'Cursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (471, 'Binary', 'put', 'put(byte_value)', 'Updates this binary with byte_value.', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (472, 'Binary', 'read', 'read(position, length)', 'Reads length bytes starting at position.', 'Buffer', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (473, 'Binary', 'write', 'write(string, offset)', 'Writes a buffer or string to the binary.', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (474, 'CommandCursor', 'close', 'close(callback)', 'Close the cursor, sending a KillCursor command and emitting close.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (475, 'CommandCursor', 'maxTimeMS', 'maxTimeMS(value)', 'Add a maxTimeMS stage to the aggregation pipeline', 'CommandCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (476, 'BulkWriteResult', 'getWriteErrorAt', 'getWriteErrorAt(index)', 'Returns a specific write error object', 'WriteError', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (477, 'CommandCursor', 'each', 'each(callback)', 'Iterates over all the documents for this cursor. As with {cursor.toArray},not all of the elements will be iterated if this cursor had been previouly accessed.In that case, {cursor.rewind} can be used to reset the cursor. However, unlike{cursor.toArray}, the cursor will only hold a maximum of batch size elementsat any given time if batch size is specified. Otherwise, the caller is responsiblefor making sure that the entire result can fit the memory.', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (478, 'CommandCursor', 'hasNext', 'hasNext(callback)', 'Check if there is any document still available in the cursor', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (479, 'AggregationCursor', 'maxTimeMS', 'maxTimeMS(value)', 'Add a maxTimeMS stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (480, 'AggregationCursor', 'out', 'out(destination)', 'Add a out stage to the aggregation pipeline', 'AggregationCursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (481, 'Admin', 'validateCollection', 'validateCollection(collectionName, options, callback)', 'Validate an existing collection', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (482, 'AggregationCursor', 'next', 'next(callback)', 'Get the next available document from the cursor, returns null if no more documents are available.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (483, 'Admin', '~resultCallback', 'resultCallback(error, result)', 'The callback format for results', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (484, 'DBRef', 'DBRef', 'new DBRef(namespace, oid, db)', 'A class representation of the BSON DBRef type.', 'DBRef', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (485, 'Decimal128', 'Decimal128', 'new Decimal128(bytes)', 'A class representation of the BSON Decimal128 type.', 'Double', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (486, 'Double', 'Double', 'new Double(value)', 'A class representation of the BSON Double type.', 'Double', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (487, 'FindOperatorsOrdered', 'replaceOne', 'replaceOne(doc)', 'Add a replace one operation to the bulk operation', 'OrderedBulkOperation', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (488, 'FindOperatorsUnordered', 'replaceOne', 'replaceOne(updateDocument)', 'Add a replace one operation to the bulk operation', 'FindOperatorsUnordered', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (489, 'GridFSBucket', 'GridFSBucket', 'new GridFSBucket(db, options)', 'Constructor for a streaming GridFS interface', 'GridFSBucket', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (490, 'Cursor', 'comment', 'comment(value)', 'Add a comment to the cursor query allowing for tracking the comment in the log.', 'Cursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (491, 'Cursor', 'count', 'count(applySkipLimit, options, callback)', 'Get the count of documents for this cursor', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (492, 'CommandCursor', 'next', 'next(callback)', 'Get the next available document from the cursor, returns null if no more documents are available.', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (493, 'Decimal128', 'Decimal128.fromString', 'Decimal128.fromString(string)', 'Create a Decimal128 instance from a string representation', 'Decimal128', 'a Decimal128 instance.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (494, 'FindOperatorsOrdered', 'update', 'update(doc)', 'Add a single update document to the bulk operation', 'OrderedBulkOperation', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (495, 'FindOperatorsOrdered', 'updateOne', 'updateOne(doc)', 'Add a single update one document to the bulk operation', 'OrderedBulkOperation', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (496, 'FindOperatorsUnordered', 'update', 'update(updateDocument)', 'Add a single update document to the bulk operation', 'FindOperatorsUnordered', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (497, 'GridFSBucket', 'delete', 'delete(id, callback)', 'Deletes a file with the given id', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (498, 'GridFSBucket', 'find', 'find(filter, options)', 'Convenience wrapper around find on the files collection', 'Cursor', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (499, 'GridFSBucket', 'drop', 'drop(callback)', 'Removes this bucket\'s files collection, followed by its chunks collection.', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (500, 'Cursor', 'each', 'each(callback)', 'Iterates over all the documents for this cursor. As with {cursor.toArray},not all of the elements will be iterated if this cursor had been previouly accessed.In that case, {cursor.rewind} can be used to reset the cursor. However, unlike{cursor.toArray}, the cursor will only hold a maximum of batch size elementsat any given time if batch size is specified. Otherwise, the caller is responsiblefor making sure that the entire result can fit the memory.', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (501, 'GridFSBucketWriteStream', 'GridFSBucketWriteStream', 'new GridFSBucketWriteStream(bucket, filename, options)', 'A writable stream that enables you to write buffers to GridFS.\nDo not instantiate this class directly. Use openUploadStream() instead.', 'GridFSBucketWriteStream', 'GridFSBucketWriteStream instance.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (502, 'GridStore', 'GridStore', 'new GridStore(db, id, filename, mode, options)', 'Create a new GridStore instance\nModes\n\n\"r\" - read only. This is the default mode.\n\"w\" - write in truncate mode. Existing data will be overwriten.', 'GridStore', 'GridStore instance.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (503, 'GridFSBucket', 'openDownloadStream', 'openDownloadStream(id, options)', 'Returns a readable stream (GridFSBucketReadStream) for streaming filedata from GridFS.', 'GridFSBucketReadStream', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (504, 'GridFSBucketReadStream', 'GridFSBucketReadStream', 'new GridFSBucketReadStream(chunks, files, readPreference, filter, options)', 'A readable stream that enables you to read buffers from GridFS.\nDo not instantiate this class directly. Use openDownloadStream() instead.', 'GridFSBucketReadStream', 'GridFSBucketReadStream instance.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (505, 'FindOperatorsUnordered', 'updateOne', 'updateOne(updateDocument)', 'Add a single update one document to the bulk operation', 'FindOperatorsUnordered', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (506, 'GridFSBucket', 'openDownloadStreamByName', 'openDownloadStreamByName(filename, options)', 'Returns a readable stream (GridFSBucketReadStream) for streaming thefile with the given name from GridFS. If there are multiple files withthe same name, this will stream the most recent file with the given name(as determined by the uploadDate field). You can set the revisionoption to change this behavior.', 'GridFSBucketReadStream', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (507, 'GridFSBucketWriteStream', 'abort', 'abort(callback)', 'Places this write stream into an aborted state (all future writes fail)and deletes all chunks that have already been written.', 'Promise', 'no callback specified', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (508, 'GridFSBucketWriteStream', 'end', 'end(chunk, encoding, callback)', 'Tells the stream that no more data will be coming in. The stream willpersist the remaining data to MongoDB, write the files document, andthen emit a \'finish\' event.', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (509, 'GridFSBucketReadStream', 'abort', 'abort(callback)', 'Marks this stream as aborted (will never push another data event)and kills the underlying cursor. Will emit the \'end\' event, and thenthe \'close\' event once the cursor is successfully killed.', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (510, 'GridFSBucketReadStream', 'start', 'start(start)', 'Sets the 0-based offset in bytes to start streaming from. Throwsan error if this stream has entered flowing mode(e.g. if you\'ve already called on(\'data\'))', 'GridFSBucketReadStream', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (511, 'GridFSBucketWriteStream', 'write', 'write(chunk, encoding, callback)', 'Write a buffer to the stream.', 'Boolean', 'if this write required flushing a chunk to MongoDB. True otherwise.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (512, 'GridFSBucket', 'openUploadStreamWithId', 'openUploadStreamWithId(id, filename, options)', 'Returns a writable stream (GridFSBucketWriteStream) for writingbuffers to GridFS for a custom file id. The stream\'s \'id\' property contains the resultingfile\'s id.', 'GridFSBucketWriteStream', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (513, 'Logger', 'Logger', 'new Logger(className, options)', 'Creates a new Logger instance', 'Logger', 'Logger instance.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (514, 'GridFSBucketReadStream', 'end', 'end(end)', 'Sets the 0-based offset in bytes to start streaming from. Throwsan error if this stream has entered flowing mode(e.g. if you\'ve already called on(\'data\'))', 'GridFSBucketReadStream', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (515, 'GridFSBucket', 'openUploadStream', 'openUploadStream(filename, options)', 'Returns a writable stream (GridFSBucketWriteStream) for writingbuffers to GridFS. The stream\'s \'id\' property contains the resultingfile\'s id.', 'GridFSBucketWriteStream', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (516, 'Int32', 'Int32', 'new Int32(value)', 'A class representation of a BSON Int32 type.', 'Int32', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (517, 'GridFSBucket', 'rename', 'rename(id, filename, callback)', 'Renames the file with the given _id to the given string', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (518, 'GridFSBucket', '~errorCallback', 'errorCallback(error)', 'Callback format for all GridFSBucket methods that can accept a callback.', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (519, 'Long', 'Long', 'new Long(low, high)', 'Defines a Long class for representing a 64-bit two\'s-complementinteger value, which faithfully simulates the behavior of a Java \"Long\". Thisimplementation is derived from LongLib in GWT.\nConstructs a 64-bit two\'s-complement integer, given its low and high 32-bitvalues as signed integers.  See the from* functions below for moreconvenient ways of constructing Longs.\nThe internal representation of a Long is the two given signed, 32-bit values.We use 32-bit pieces because these are the size of integers on whichJavascript performs bit-operations.  For operations like addition andmultiplication, we split each number into 16-bit pieces, which can easily bemultiplied within Javascript\'s floating-point representation without overflowor change in sign.\nIn the algorithms below, we frequently reduce the negative case to thepositive case by negating the input(s) and then post-processing the result.Note that we must ALWAYS check specially whether those values are MIN_VALUE(-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented asa positive number, it overflows back into a negative).  Not handling thiscase would often result in infinite recursion.', 'Long', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (520, 'Logger', 'Logger.filter', 'Logger.filter(type, values)', 'Set what classes to log.', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (521, 'Logger', 'error', 'error(message, object)', 'Log a message at the error level', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (522, 'Long', 'Long.fromInt', 'Long.fromInt(value)', 'Returns a Long representing the given (32-bit) integer value.', 'Long', 'corresponding Long value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (523, 'Long', 'Long.fromNumber', 'Long.fromNumber(value)', 'Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.', 'Long', 'corresponding Long value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (524, 'Long', 'Long.fromString', 'Long.fromString(str, opt_radix)', 'Returns a Long representation of the given string, written using the given radix.', 'Long', 'corresponding Long value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (525, 'Logger', 'Logger.setCurrentLogger', 'Logger.setCurrentLogger(logger)', 'Set the current logger function', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (526, 'Logger', 'Logger.setLevel', 'Logger.setLevel(level)', 'Set the current log level', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (527, 'Logger', 'debug', 'debug(message, object)', 'Log a message at the debug level', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (528, 'Long', 'Long.fromBits', 'Long.fromBits(lowBits, highBits)', 'Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.', 'Long', 'corresponding Long value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (529, 'Logger', 'info', 'info(message, object)', 'Log a message at the info level', 'null', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (530, 'Long', 'add', 'add(other)', 'Returns the sum of this and the given Long.', 'Long', 'sum of this and the given Long.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (531, 'Long', 'and', 'and(other)', 'Returns the bitwise-AND of this Long and the given one.', 'Long', 'bitwise-AND of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (532, 'Long', 'div', 'div(other)', 'Returns this Long divided by the given one.', 'Long', 'Long divided by the given one.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (533, 'Long', 'compare', 'compare(other)', 'Compares this Long with the given one.', 'boolean', 'if they are the same, 1 if the this is greater, and -1 if the given one is greater.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (534, 'Long', 'lessThanOrEqual', 'lessThanOrEqual(other)', 'Return whether this Long is less than or equal to the other.', 'boolean', 'this Long is less than or equal to the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (535, 'Long', 'modulo', 'modulo(other)', 'Returns this Long modulo the given one.', 'Long', 'Long modulo the given one.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (536, 'Long', 'equals', 'equals(other)', 'Return whether this Long equals the other', 'boolean', 'this Long equals the other', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (537, 'Long', 'greaterThan', 'greaterThan(other)', 'Return whether this Long is greater than the other.', 'boolean', 'this Long is greater than the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (538, 'MongoError', 'MongoError', 'new MongoError(message)', 'Creates a new MongoError', 'MongoError', 'MongoError instance', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (539, 'Long', 'greaterThanOrEqual', 'greaterThanOrEqual(other)', 'Return whether this Long is greater than or equal to the other.', 'boolean', 'this Long is greater than or equal to the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (540, 'Long', 'lessThan', 'lessThan(other)', 'Return whether this Long is less than the other.', 'boolean', 'this Long is less than the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (541, 'Long', 'notEquals', 'notEquals(other)', 'Return whether this Long does not equal the other.', 'boolean', 'this Long does not equal the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (542, 'Long', 'multiply', 'multiply(other)', 'Returns the product of this and the given Long.', 'Long', 'product of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (543, 'Long', 'or', 'or(other)', 'Returns the bitwise-OR of this Long and the given one.', 'Long', 'bitwise-OR of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (544, 'Long', 'shiftLeft', 'shiftLeft(numBits)', 'Returns this Long with bits shifted to the left by the given amount.', 'Long', 'shifted to the left by the given amount.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (545, 'MongoParseError', 'MongoParseError', 'new MongoParseError(message)', 'An error used when attempting to parse a value (like a connection string)', 'MongoParseError', 'MongoNetworkError instance', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (546, 'Long', 'shiftRight', 'shiftRight(numBits)', 'Returns this Long with bits shifted to the right by the given amount.', 'Long', 'shifted to the right by the given amount.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (547, 'Long', 'shiftRightUnsigned', 'shiftRightUnsigned(numBits)', 'Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.', 'Long', 'shifted to the right by the given amount, with zeros placed into the new leading bits.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (548, 'Long', 'subtract', 'subtract(other)', 'Returns the difference of this and the given Long.', 'Long', 'difference of this and the given Long.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (549, 'Long', 'toString', 'toString(opt_radix)', 'Return the String value.', 'string', 'textual representation of this value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (550, 'Long', 'xor', 'xor(other)', 'Returns the bitwise-XOR of this Long and the given one.', 'Long', 'bitwise-XOR of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (551, 'ObjectID', 'ObjectID', 'new ObjectID(id)', 'Create a new ObjectID instance', 'ObjectID', 'of ObjectID.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (552, 'OrderedBulkOperation', 'execute', 'execute(options, callback)', 'Execute the ordered bulk operation', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (553, 'ObjectID', 'ObjectID.createFromHexString', 'ObjectID.createFromHexString(hexString)', 'Creates an ObjectID from a hex string representation of an ObjectID.', 'ObjectID', 'the created ObjectID', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (554, 'ObjectID', 'ObjectID.createFromTime', 'ObjectID.createFromTime(time)', 'Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.', 'ObjectID', 'the created ObjectID', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (555, 'ObjectID', 'equals', 'equals(otherID)', 'Compares the equality of this ObjectID with otherID.', 'boolean', 'result of comparing two ObjectID\'s', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (556, 'ObjectID', 'generate', 'generate(time)', 'Generate a 12 byte id buffer used in ObjectID\'s', 'Buffer', 'the 12 byte id buffer string.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (557, 'OrderedBulkOperation', 'insert', 'insert(doc)', 'Add a single insert document to the bulk operation', 'OrderedBulkOperation', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (558, 'OrderedBulkOperation', '~resultCallback', 'resultCallback(error, result)', 'The callback format for results', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (559, 'Symbol', 'Symbol', 'new Symbol(value)', 'A class representation of the BSON Symbol type.', 'Symbol', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (560, 'Timestamp', 'Timestamp', 'new Timestamp(low, high)', 'This type is for INTERNAL use in MongoDB only and should not be used in applications.The appropriate corresponding type is the JavaScript Date type.\nDefines a Timestamp class for representing a 64-bit two\'s-complementinteger value, which faithfully simulates the behavior of a Java \"Timestamp\". Thisimplementation is derived from TimestampLib in GWT.\nConstructs a 64-bit two\'s-complement integer, given its low and high 32-bitvalues as signed integers.  See the from* functions below for moreconvenient ways of constructing Timestamps.\nThe internal representation of a Timestamp is the two given signed, 32-bit values.We use 32-bit pieces because these are the size of integers on whichJavascript performs bit-operations.  For operations like addition andmultiplication, we split each number into 16-bit pieces, which can easily bemultiplied within Javascript\'s floating-point representation without overflowor change in sign.\nIn the algorithms below, we frequently reduce the negative case to thepositive case by negating the input(s) and then post-processing the result.Note that we must ALWAYS check specially whether those values are MIN_VALUE(-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented asa positive number, it overflows back into a negative).  Not handling thiscase would often result in infinite recursion.', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (561, 'Timestamp', 'Timestamp.fromBits', 'Timestamp.fromBits(lowBits, highBits)', 'Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.', 'Timestamp', 'corresponding Timestamp value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (562, 'Timestamp', 'Timestamp.fromInt', 'Timestamp.fromInt(value)', 'Returns a Timestamp representing the given (32-bit) integer value.', 'Timestamp', 'corresponding Timestamp value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (563, 'OrderedBulkOperation', 'find', 'find(selector)', 'Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne', 'FindOperatorsOrdered', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (564, 'Timestamp', 'Timestamp.fromNumber', 'Timestamp.fromNumber(value)', 'Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.', 'Timestamp', 'corresponding Timestamp value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (565, 'UnorderedBulkOperation', 'execute', 'execute(options, callback)', 'Execute the ordered bulk operation', 'Promise', 'Promise if no callback passed', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (566, 'Timestamp', 'Timestamp.fromString', 'Timestamp.fromString(str, opt_radix)', 'Returns a Timestamp representation of the given string, written using the given radix.', 'Timestamp', 'corresponding Timestamp value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (567, 'Timestamp', 'add', 'add(other)', 'Returns the sum of this and the given Timestamp.', 'Timestamp', 'sum of this and the given Timestamp.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (568, 'Timestamp', 'and', 'and(other)', 'Returns the bitwise-AND of this Timestamp and the given one.', 'Timestamp', 'bitwise-AND of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (569, 'Timestamp', 'compare', 'compare(other)', 'Compares this Timestamp with the given one.', 'boolean', 'if they are the same, 1 if the this is greater, and -1 if the given one is greater.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (570, 'Timestamp', 'div', 'div(other)', 'Returns this Timestamp divided by the given one.', 'Timestamp', 'Timestamp divided by the given one.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (571, 'UnorderedBulkOperation', 'find', 'find(selector)', 'Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne', 'FindOperatorsUnordered', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (572, 'UnorderedBulkOperation', 'insert', 'insert(document)', 'Add a single insert document to the bulk operation', 'UnorderedBulkOperation', '', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (573, 'Timestamp', 'greaterThan', 'greaterThan(other)', 'Return whether this Timestamp is greater than the other.', 'boolean', 'this Timestamp is greater than the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (574, 'UnorderedBulkOperation', '~resultCallback', 'resultCallback(error, result)', 'The callback format for results', NULL, NULL, 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (575, 'Timestamp', 'equals', 'equals(other)', 'Return whether this Timestamp equals the other', 'boolean', 'this Timestamp equals the other', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (576, 'Timestamp', 'greaterThanOrEqual', 'greaterThanOrEqual(other)', 'Return whether this Timestamp is greater than or equal to the other.', 'boolean', 'this Timestamp is greater than or equal to the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (577, 'Timestamp', 'lessThan', 'lessThan(other)', 'Return whether this Timestamp is less than the other.', 'boolean', 'this Timestamp is less than the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (578, 'Timestamp', 'lessThanOrEqual', 'lessThanOrEqual(other)', 'Return whether this Timestamp is less than or equal to the other.', 'boolean', 'this Timestamp is less than or equal to the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (579, 'Timestamp', 'modulo', 'modulo(other)', 'Returns this Timestamp modulo the given one.', 'Timestamp', 'Timestamp modulo the given one.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (580, 'Timestamp', 'multiply', 'multiply(other)', 'Returns the product of this and the given Timestamp.', 'Timestamp', 'product of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (581, 'Timestamp', 'notEquals', 'notEquals(other)', 'Return whether this Timestamp does not equal the other.', 'boolean', 'this Timestamp does not equal the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (582, 'Timestamp', 'or', 'or(other)', 'Returns the bitwise-OR of this Timestamp and the given one.', 'Timestamp', 'bitwise-OR of this and the other.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (583, 'Timestamp', 'shiftLeft', 'shiftLeft(numBits)', 'Returns this Timestamp with bits shifted to the left by the given amount.', 'Timestamp', 'shifted to the left by the given amount.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (584, 'Timestamp', 'shiftRight', 'shiftRight(numBits)', 'Returns this Timestamp with bits shifted to the right by the given amount.', 'Timestamp', 'shifted to the right by the given amount.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (585, 'Timestamp', 'subtract', 'subtract(other)', 'Returns the difference of this and the given Timestamp.', 'Timestamp', 'difference of this and the given Timestamp.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (586, 'Timestamp', 'shiftRightUnsigned', 'shiftRightUnsigned(numBits)', 'Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.', 'Timestamp', 'shifted to the right by the given amount, with zeros placed into the new leading bits.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (587, 'Timestamp', 'toString', 'toString(opt_radix)', 'Return the String value.', 'string', 'textual representation of this value.', 'mongodb nodejs driver');
INSERT INTO `methods` VALUES (588, 'Timestamp', 'xor', 'xor(other)', 'Returns the bitwise-XOR of this Timestamp and the given one.', 'Timestamp', 'bitwise-XOR of this and the other.', 'mongodb nodejs driver');

-- ----------------------------
-- Table structure for options
-- ----------------------------
DROP TABLE IF EXISTS `options`;
CREATE TABLE `options`  (
  `pid` int(11) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `default` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of options
-- ----------------------------
INSERT INTO `options` VALUES (201, 'leading', 'boolean', 'false', 'Specify invoking on the leading edge of the timeout.');
INSERT INTO `options` VALUES (230, 'leading', 'boolean', 'true', 'Specify invoking on the leading edge of the timeout.');
INSERT INTO `options` VALUES (201, 'maxWait', 'number', NULL, 'The maximum time func is allowed to be delayed before it\'s invoked.');
INSERT INTO `options` VALUES (201, 'trailing', 'boolean', 'true', 'Specify invoking on the trailing edge of the timeout.');
INSERT INTO `options` VALUES (230, 'trailing', 'boolean', 'true', 'Specify invoking on the trailing edge of the timeout.');
INSERT INTO `options` VALUES (469, 'escape', 'RegExp', '_.templateSettings.escape', 'The HTML \"escape\" delimiter.');
INSERT INTO `options` VALUES (469, 'evaluate', 'RegExp', '_.templateSettings.evaluate', 'The \"evaluate\" delimiter.');
INSERT INTO `options` VALUES (469, 'imports', 'Object', '_.templateSettings.imports', 'An object to import into the template as free variables.');
INSERT INTO `options` VALUES (469, 'sourceURL', 'string', '\'lodash.templateSources[n', 'The sourceURL of the compiled template.');
INSERT INTO `options` VALUES (469, 'interpolate', 'RegExp', '_.templateSettings.interpolate', 'The \"interpolate\" delimiter.');
INSERT INTO `options` VALUES (469, 'variable', 'string', '\'obj\'', 'The data object variable name.');
INSERT INTO `options` VALUES (478, 'length', 'number', '30', 'The maximum string length.');
INSERT INTO `options` VALUES (478, 'omission', 'string', '\'...\'', 'The string to indicate text is omitted.');
INSERT INTO `options` VALUES (478, 'separator', 'RegExp|string', NULL, 'The separator pattern to truncate to.');
INSERT INTO `options` VALUES (507, 'chain', 'boolean', 'true', 'Specify whether mixins are chainable.');
INSERT INTO `options` VALUES (527, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (527, 'flag', 'string', '`\'a\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'a\'`. ');
INSERT INTO `options` VALUES (527, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (536, 'flag', 'string', '`\'r\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'r\'`. ');
INSERT INTO `options` VALUES (553, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (553, 'flag', 'string', '`\'w\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'w\'`. ');
INSERT INTO `options` VALUES (553, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (536, 'encoding', 'string|null', '`null`', '`encoding` {string|null} **Default:** `null` ');
INSERT INTO `options` VALUES (559, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (559, 'flag', 'string', '`\'a\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'a\'`. ');
INSERT INTO `options` VALUES (559, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (573, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (591, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (602, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (604, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (606, 'encoding', 'string|null', '`null`', '`encoding` {string|null} **Default:** `null` ');
INSERT INTO `options` VALUES (606, 'flag', 'string', '`\'r\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'r\'`. ');
INSERT INTO `options` VALUES (618, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (621, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (618, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (618, 'flag', 'string', '`\'w\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'w\'`. ');
INSERT INTO `options` VALUES (625, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (625, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (625, 'flag', 'string', '`\'a\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'a\'`. ');
INSERT INTO `options` VALUES (627, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (645, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (645, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (630, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (634, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (645, 'flag', 'string', '`\'a\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'a\'`. ');
INSERT INTO `options` VALUES (649, 'flags', 'string', '`\'r\'`', '`flags` {string} See [support of file system `flags`][]. **Default:** `\'r\'`. ');
INSERT INTO `options` VALUES (649, 'encoding', 'string', '`null`', '`encoding` {string} **Default:** `null` ');
INSERT INTO `options` VALUES (649, 'fd', 'integer', '`null`', '`fd` {integer} **Default:** `null` ');
INSERT INTO `options` VALUES (649, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (649, 'autoClose', 'boolean', '`true`', '`autoClose` {boolean} **Default:** `true` ');
INSERT INTO `options` VALUES (649, 'start', 'integer', NULL, '`start` {integer} ');
INSERT INTO `options` VALUES (649, 'end', 'integer', '`Infinity`', '`end` {integer} **Default:** `Infinity` ');
INSERT INTO `options` VALUES (649, 'highWaterMark', 'integer', '`64 * 1024`', '`highWaterMark` {integer} **Default:** `64 * 1024` ');
INSERT INTO `options` VALUES (652, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (656, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (656, 'fd', 'integer', '`null`', '`fd` {integer} **Default:** `null` ');
INSERT INTO `options` VALUES (656, 'autoClose', 'boolean', '`true`', '`autoClose` {boolean} **Default:** `true` ');
INSERT INTO `options` VALUES (656, 'flags', 'string', '`\'w\'`', '`flags` {string} See [support of file system `flags`][]. **Default:** `\'w\'`. ');
INSERT INTO `options` VALUES (656, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (665, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (656, 'start', 'integer', NULL, '`start` {integer} ');
INSERT INTO `options` VALUES (658, 'exists', 'boolean', NULL, '`exists` {boolean} ');
INSERT INTO `options` VALUES (668, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (670, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (672, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (679, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (679, 'stats', 'fs.Stats', NULL, '`stats` {fs.Stats} ');
INSERT INTO `options` VALUES (689, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (693, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (696, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (704, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (707, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (711, 'stats', 'fs.Stats', NULL, '`stats` {fs.Stats} ');
INSERT INTO `options` VALUES (715, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (711, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (717, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (723, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (725, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (725, 'folder', 'string', NULL, '`folder` {string} ');
INSERT INTO `options` VALUES (729, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (729, 'fd', 'integer', NULL, '`fd` {integer} ');
INSERT INTO `options` VALUES (735, 'buffer', 'Buffer', NULL, '`buffer` {Buffer} ');
INSERT INTO `options` VALUES (735, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (735, 'bytesRead', 'integer', NULL, '`bytesRead` {integer} ');
INSERT INTO `options` VALUES (740, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (737, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (738, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (738, 'files', 'string[]|Buffer[]', NULL, '`files` {string[]|Buffer[]} ');
INSERT INTO `options` VALUES (742, 'encoding', 'string|null', '`null`', '`encoding` {string|null} **Default:** `null` ');
INSERT INTO `options` VALUES (742, 'flag', 'string', '`\'r\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'r\'`. ');
INSERT INTO `options` VALUES (743, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (743, 'data', 'string|Buffer', NULL, '`data` {string|Buffer} ');
INSERT INTO `options` VALUES (747, 'linkString', 'string|Buffer', NULL, '`linkString` {string|Buffer} ');
INSERT INTO `options` VALUES (747, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (744, 'encoding', 'string|null', '`null`', '`encoding` {string|null} **Default:** `null` ');
INSERT INTO `options` VALUES (744, 'flag', 'string', '`\'r\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'r\'`. ');
INSERT INTO `options` VALUES (746, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (757, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (759, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (761, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (762, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (762, 'resolvedPath', 'string|Buffer', NULL, '`resolvedPath` {string|Buffer} ');
INSERT INTO `options` VALUES (764, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (770, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (765, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (765, 'resolvedPath', 'string|Buffer', NULL, '`resolvedPath` {string|Buffer} ');
INSERT INTO `options` VALUES (768, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (772, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (774, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (774, 'stats', 'fs.Stats', NULL, '`stats` {fs.Stats} ');
INSERT INTO `options` VALUES (785, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (782, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (780, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (800, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (802, 'persistent', 'boolean', '`true`', '`persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. ');
INSERT INTO `options` VALUES (802, 'recursive', 'boolean', '`false`', '`recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [Caveats][]). **Default:** `false`. ');
INSERT INTO `options` VALUES (803, 'filename', 'string|Buffer', NULL, '`filename` {string|Buffer} ');
INSERT INTO `options` VALUES (805, 'interval', 'integer', '`5007`', '`interval` {integer} **Default:** `5007` ');
INSERT INTO `options` VALUES (806, 'previous', 'fs.Stats', NULL, '`previous` {fs.Stats} ');
INSERT INTO `options` VALUES (812, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (812, 'bytesWritten', 'integer', NULL, '`bytesWritten` {integer} ');
INSERT INTO `options` VALUES (802, 'encoding', 'string', '`\'utf8\'`', '`encoding` {string} Specifies the character encoding to be used for the  filename passed to the listener. **Default:** `\'utf8\'`. ');
INSERT INTO `options` VALUES (803, 'eventType', 'string', NULL, '`eventType` {string} ');
INSERT INTO `options` VALUES (805, 'persistent', 'boolean', '`true`', '`persistent` {boolean} **Default:** `true` ');
INSERT INTO `options` VALUES (806, 'current', 'fs.Stats', NULL, '`current` {fs.Stats} ');
INSERT INTO `options` VALUES (812, 'buffer', 'Buffer|Uint8Array', NULL, '`buffer` {Buffer|Uint8Array} ');
INSERT INTO `options` VALUES (825, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (821, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (821, 'flag', 'string', '`\'w\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'w\'`. ');
INSERT INTO `options` VALUES (823, 'encoding', 'string|null', '`\'utf8\'`', '`encoding` {string|null} **Default:** `\'utf8\'` ');
INSERT INTO `options` VALUES (823, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (829, 'err', 'Error', NULL, '`err` {Error} ');
INSERT INTO `options` VALUES (821, 'mode', 'integer', '`0o666`', '`mode` {integer} **Default:** `0o666` ');
INSERT INTO `options` VALUES (823, 'flag', 'string', '`\'w\'`', '`flag` {string} See [support of file system `flags`][]. **Default:** `\'w\'`. ');
INSERT INTO `options` VALUES (829, 'string', 'string', NULL, '`string` {string} ');
INSERT INTO `options` VALUES (829, 'written', 'integer', NULL, '`written` {integer} ');
INSERT INTO `options` VALUES (834, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (839, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (842, 'readPreference', 'ReadPreference\n|\n\nstring', 'null', 'The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).');
INSERT INTO `options` VALUES (842, 'maxTimeMS', 'number', 'null', 'Number of milliseconds to wait before aborting the query.');
INSERT INTO `options` VALUES (850, 'w', 'number\n|\n\nstring', 'null', 'The write concern.');
INSERT INTO `options` VALUES (850, 'wtimeout', 'number', 'null', 'The write concern timeout.');
INSERT INTO `options` VALUES (850, 'j', 'boolean', 'false', 'Specify a journal write concern.');
INSERT INTO `options` VALUES (850, 'fsync', 'boolean', 'false', 'Specify a file sync write concern.');
INSERT INTO `options` VALUES (850, 'customData', 'object', 'null', 'Custom data associated with the user (only Mongodb 2.6 or higher)');
INSERT INTO `options` VALUES (850, 'roles', 'Array.<object>', 'null', 'Roles associated with the created user (only Mongodb 2.6 or higher)');
INSERT INTO `options` VALUES (850, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (846, 'nameOnly', 'boolean', 'false', 'Whether the command should return only db names, or names and size info.');
INSERT INTO `options` VALUES (846, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (855, 'w', 'number\n|\n\nstring', 'null', 'The write concern.');
INSERT INTO `options` VALUES (855, 'wtimeout', 'number', 'null', 'The write concern timeout.');
INSERT INTO `options` VALUES (855, 'j', 'boolean', 'false', 'Specify a journal write concern.');
INSERT INTO `options` VALUES (855, 'fsync', 'boolean', 'false', 'Specify a file sync write concern.');
INSERT INTO `options` VALUES (855, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (860, 'fullDocument', 'string', '\'default\'', 'Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.');
INSERT INTO `options` VALUES (860, 'maxAwaitTimeMS', 'number', '', 'The maximum amount of time for the server to wait on new documents to satisfy a change stream query');
INSERT INTO `options` VALUES (860, 'resumeAfter', 'object', 'null', 'Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.');
INSERT INTO `options` VALUES (860, 'batchSize', 'number', 'null', 'The number of documents to return per batch. See aggregation documentation.');
INSERT INTO `options` VALUES (860, 'collation', 'object', 'null', 'Specify collation settings for operation. See aggregation documentation.');
INSERT INTO `options` VALUES (860, 'readPreference', 'ReadPreference', 'null', 'The read preference. Defaults to the read preference of the database or collection. See read preference documentation.');
INSERT INTO `options` VALUES (875, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (880, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (878, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (886, 'skipKillCursors', 'boolean', '', 'Bypass calling killCursors when closing the cursor.');
INSERT INTO `options` VALUES (893, 'session', 'ClientSession', '', 'optional session to use for this operation');
INSERT INTO `options` VALUES (908, 'bucketName', 'string', '\"fs\"', 'The \'files\' and \'chunks\' collections will be prefixed with the bucket name followed by a dot.');
INSERT INTO `options` VALUES (908, 'chunkSizeBytes', 'number', '255 * 1024', 'Number of bytes stored in each chunk. Defaults to 255KB');
INSERT INTO `options` VALUES (908, 'readPreference', 'object', 'null', 'Optional read preference to be passed to read operations');
INSERT INTO `options` VALUES (915, 'skip', 'number', 'null', 'The number of documents to skip.');
INSERT INTO `options` VALUES (915, 'limit', 'number', 'null', 'The maximum amounts to count before aborting.');
INSERT INTO `options` VALUES (915, 'maxTimeMS', 'number', 'null', 'Number of miliseconds to wait before aborting the query.');
INSERT INTO `options` VALUES (915, 'hint', 'string', 'null', 'An index name hint for the query.');
INSERT INTO `options` VALUES (908, 'writeConcern', 'object', 'null', 'Optional write concern to be passed to write operations, for instance { w: 1 }');
INSERT INTO `options` VALUES (915, 'readPreference', 'ReadPreference\n|\n\nstring', 'null', 'The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).');
INSERT INTO `options` VALUES (924, 'batchSize', 'number', 'null', 'Optional batch size for cursor');
INSERT INTO `options` VALUES (924, 'limit', 'number', 'null', 'Optional limit for cursor');
INSERT INTO `options` VALUES (924, 'maxTimeMS', 'number', 'null', 'Optional maxTimeMS for cursor');
INSERT INTO `options` VALUES (924, 'noCursorTimeout', 'boolean', 'null', 'Optionally set cursor\'s noCursorTimeout flag');
INSERT INTO `options` VALUES (924, 'skip', 'number', 'null', 'Optional skip for cursor');
INSERT INTO `options` VALUES (924, 'sort', 'object', 'null', 'Optional sort for cursor');
INSERT INTO `options` VALUES (926, 'start', 'Number', 'null', 'Optional 0-based offset in bytes to start streaming from');
INSERT INTO `options` VALUES (930, 'revision', 'number', '-1', 'The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.');
INSERT INTO `options` VALUES (930, 'start', 'Number', 'null', 'Optional 0-based offset in bytes to start streaming from');
INSERT INTO `options` VALUES (930, 'end', 'Number', 'null', 'Optional 0-based offset in bytes to stop streaming before');
INSERT INTO `options` VALUES (935, 'sort', 'Number', 'null', 'Optional sort for the file find query');
INSERT INTO `options` VALUES (926, 'end', 'Number', 'null', 'Optional 0-based offset in bytes to stop streaming before');
INSERT INTO `options` VALUES (935, 'skip', 'Number', 'null', 'Optional skip for the file find query');
INSERT INTO `options` VALUES (935, 'start', 'Number', 'null', 'Optional 0-based offset in bytes to start streaming from');
INSERT INTO `options` VALUES (935, 'end', 'Number', 'null', 'Optional 0-based offset in bytes to stop streaming before');
INSERT INTO `options` VALUES (944, 'wtimeout', 'number', 'null', 'The write concern timeout.');
INSERT INTO `options` VALUES (944, 'j', 'boolean', 'false', 'Specify a journal write concern.');
INSERT INTO `options` VALUES (944, 'fsync', 'boolean', 'false', 'Specify a file sync write concern.');
INSERT INTO `options` VALUES (944, 'root', 'string', 'null', 'Root collection to use. Defaults to {GridStore.DEFAULT_ROOT_COLLECTION}.');
INSERT INTO `options` VALUES (944, 'w', 'number\n|\n\nstring', 'null', 'The write concern.');
INSERT INTO `options` VALUES (944, 'content_type', 'string', 'null', 'MIME type of the file. Defaults to {GridStore.DEFAULT_CONTENT_TYPE}.');
INSERT INTO `options` VALUES (944, 'chunk_size', 'number', '261120', 'Size for the chunk. Defaults to {Chunk.DEFAULT_CHUNK_SIZE}.');
INSERT INTO `options` VALUES (944, 'metadata', 'object', 'null', 'Arbitrary data the user wants to store.');
INSERT INTO `options` VALUES (944, 'promiseLibrary', 'object', 'null', 'A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible');
INSERT INTO `options` VALUES (944, 'readPreference', 'ReadPreference\n|\n\nstring', 'null', 'The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).');
INSERT INTO `options` VALUES (948, 'id', 'string\n|\n\nnumber\n|\n\nobject', 'null', 'Custom file id for the GridFS file.');
INSERT INTO `options` VALUES (948, 'chunkSizeBytes', 'number', 'null', 'The chunk size to use, in bytes');
INSERT INTO `options` VALUES (948, 'wtimeout', 'number', 'null', 'The write concern timeout');
INSERT INTO `options` VALUES (948, 'j', 'number', 'null', 'The journal write concern');
INSERT INTO `options` VALUES (958, 'chunkSizeBytes', 'number', 'null', 'Optional overwrite this bucket\'s chunkSizeBytes for this file');
INSERT INTO `options` VALUES (958, 'metadata', 'object', 'null', 'Optional object to store in the file document\'s metadata field');
INSERT INTO `options` VALUES (958, 'contentType', 'string', 'null', 'Optional string to store in the file document\'s contentType field');
INSERT INTO `options` VALUES (958, 'aliases', 'array', 'null', 'Optional array of strings to store in the file document\'s aliases field');
INSERT INTO `options` VALUES (956, 'chunkSizeBytes', 'number', 'null', 'Optional overwrite this bucket\'s chunkSizeBytes for this file');
INSERT INTO `options` VALUES (948, 'w', 'number', 'null', 'The write concern');
INSERT INTO `options` VALUES (956, 'metadata', 'object', 'null', 'Optional object to store in the file document\'s metadata field');
INSERT INTO `options` VALUES (956, 'contentType', 'string', 'null', 'Optional string to store in the file document\'s contentType field');
INSERT INTO `options` VALUES (956, 'aliases', 'array', 'null', 'Optional array of strings to store in the file document\'s aliases field');
INSERT INTO `options` VALUES (964, 'loggerLevel', 'string', 'error', 'Override default global log level.');
INSERT INTO `options` VALUES (964, 'logger', 'function', 'null', 'Custom logger function;');
INSERT INTO `options` VALUES (1008, 'w', 'number\n|\n\nstring', 'null', 'The write concern.');
INSERT INTO `options` VALUES (1008, 'j', 'boolean', 'false', 'Specify a journal write concern.');
INSERT INTO `options` VALUES (1027, 'w', 'number\n|\n\nstring', 'null', 'The write concern.');
INSERT INTO `options` VALUES (1027, 'wtimeout', 'number', 'null', 'The write concern timeout.');
INSERT INTO `options` VALUES (1027, 'j', 'boolean', 'false', 'Specify a journal write concern.');
INSERT INTO `options` VALUES (1008, 'wtimeout', 'number', 'null', 'The write concern timeout.');
INSERT INTO `options` VALUES (1008, 'fsync', 'boolean', 'false', 'Specify a file sync write concern.');
INSERT INTO `options` VALUES (1027, 'fsync', 'boolean', 'false', 'Specify a file sync write concern.');

-- ----------------------------
-- Table structure for params
-- ----------------------------
DROP TABLE IF EXISTS `params`;
CREATE TABLE `params`  (
  `pid` int(11) NOT NULL AUTO_INCREMENT,
  `mid` int(11) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `optional` tinyint(1) NULL DEFAULT NULL,
  PRIMARY KEY (`pid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 527 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of params
-- ----------------------------
INSERT INTO `params` VALUES (1, 2, 'values', '...Array', 'The values to exclude.', 0);
INSERT INTO `params` VALUES (2, 6, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (3, 4, 'array', 'Array', 'The array to concatenate.', 0);
INSERT INTO `params` VALUES (4, 1, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (5, 2, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (6, 5, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (7, 4, 'values', '...*', 'The values to concatenate.', 0);
INSERT INTO `params` VALUES (8, 6, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (9, 1, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (10, 5, 'n', 'number', 'The number of elements to drop.', 1);
INSERT INTO `params` VALUES (11, 3, 'array', 'Array', 'The array to process.', 0);
INSERT INTO `params` VALUES (12, 3, 'size', 'number', 'The length of each chunk', 1);
INSERT INTO `params` VALUES (13, 7, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (14, 7, 'values', '...Array', 'The values to exclude.', 0);
INSERT INTO `params` VALUES (15, 7, 'comparator', 'Function', 'The comparator invoked per element.', 0);
INSERT INTO `params` VALUES (16, 9, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (17, 9, 'values', '...Array', 'The values to exclude.', 0);
INSERT INTO `params` VALUES (18, 10, 'array', 'Array', 'The array to compact.', 0);
INSERT INTO `params` VALUES (19, 8, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (20, 9, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (21, 8, 'n', 'number', 'The number of elements to drop.', 1);
INSERT INTO `params` VALUES (22, 11, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (23, 11, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (24, 15, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (25, 15, 'value', '*', 'The value to search for.', 0);
INSERT INTO `params` VALUES (26, 15, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (27, 13, 'pairs', 'Array', 'The key-value pairs.', 0);
INSERT INTO `params` VALUES (28, 14, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (29, 18, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (30, 11, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (31, 18, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (32, 18, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (33, 17, 'array', 'Array', 'The array to fill.', 0);
INSERT INTO `params` VALUES (34, 17, 'value', '*', 'The value to fill array with.', 0);
INSERT INTO `params` VALUES (35, 17, 'start', 'number', 'The start position.', 1);
INSERT INTO `params` VALUES (36, 20, 'array', 'Array', 'The array to flatten.', 0);
INSERT INTO `params` VALUES (37, 12, 'array', 'Array', 'The array to flatten.', 0);
INSERT INTO `params` VALUES (38, 16, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (39, 19, 'array', 'Array', 'The array to flatten.', 0);
INSERT INTO `params` VALUES (40, 21, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (41, 17, 'end', 'number', 'The end position.', 1);
INSERT INTO `params` VALUES (42, 12, 'depth', 'number', 'The maximum recursion depth.', 1);
INSERT INTO `params` VALUES (43, 22, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (44, 23, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (45, 23, 'values', '...*', 'The values to remove.', 0);
INSERT INTO `params` VALUES (46, 24, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (47, 24, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (48, 27, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (49, 27, 'value', '*', 'The value to search for.', 0);
INSERT INTO `params` VALUES (50, 27, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (51, 28, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (52, 28, 'n', 'number', 'The index of the element to return.', 1);
INSERT INTO `params` VALUES (53, 26, 'array', 'Array', 'The array to convert.', 0);
INSERT INTO `params` VALUES (54, 26, 'separator', 'string', 'The element separator.', 1);
INSERT INTO `params` VALUES (55, 25, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (56, 25, 'comparator', 'Function', 'The comparator invoked per element.', 0);
INSERT INTO `params` VALUES (57, 29, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (58, 29, 'values', 'Array', 'The values to remove.', 0);
INSERT INTO `params` VALUES (59, 31, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (60, 31, 'comparator', 'Function', 'The comparator invoked per element.', 0);
INSERT INTO `params` VALUES (61, 30, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (62, 30, 'values', 'Array', 'The values to remove.', 0);
INSERT INTO `params` VALUES (63, 30, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (64, 32, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (65, 32, 'indexes', '...(number|number[])', 'The indexes of elements to remove.', 0);
INSERT INTO `params` VALUES (66, 33, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (67, 31, 'values', 'Array', 'The values to remove.', 0);
INSERT INTO `params` VALUES (68, 33, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (69, 34, 'array', 'Array', 'The array to modify.', 0);
INSERT INTO `params` VALUES (70, 39, 'array', 'Array', 'The sorted array to inspect.', 0);
INSERT INTO `params` VALUES (71, 39, 'value', '*', 'The value to evaluate.', 0);
INSERT INTO `params` VALUES (72, 39, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (73, 37, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (74, 37, 'value', '*', 'The value to search for.', 0);
INSERT INTO `params` VALUES (75, 38, 'array', 'Array', 'The sorted array to inspect.', 0);
INSERT INTO `params` VALUES (76, 38, 'value', '*', 'The value to evaluate.', 0);
INSERT INTO `params` VALUES (77, 36, 'array', 'Array', 'The sorted array to inspect.', 0);
INSERT INTO `params` VALUES (78, 36, 'value', '*', 'The value to evaluate.', 0);
INSERT INTO `params` VALUES (79, 41, 'array', 'Array', 'The sorted array to inspect.', 0);
INSERT INTO `params` VALUES (80, 41, 'value', '*', 'The value to evaluate.', 0);
INSERT INTO `params` VALUES (81, 41, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (82, 35, 'array', 'Array', 'The array to slice.', 0);
INSERT INTO `params` VALUES (83, 35, 'end', 'number', 'The end position.', 1);
INSERT INTO `params` VALUES (84, 42, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (85, 40, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (86, 35, 'start', 'number', 'The start position.', 1);
INSERT INTO `params` VALUES (87, 40, 'value', '*', 'The value to search for.', 0);
INSERT INTO `params` VALUES (88, 43, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (89, 43, 'iteratee', 'Function', 'The iteratee invoked per element.', 0);
INSERT INTO `params` VALUES (90, 44, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (91, 44, 'n', 'number', 'The number of elements to take.', 1);
INSERT INTO `params` VALUES (92, 50, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (93, 50, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (94, 45, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (95, 52, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (96, 52, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (97, 47, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (98, 47, 'n', 'number', 'The number of elements to take.', 1);
INSERT INTO `params` VALUES (99, 49, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (100, 45, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (101, 48, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (102, 48, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (103, 51, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (104, 51, 'comparator', 'Function', 'The comparator invoked per element.', 0);
INSERT INTO `params` VALUES (105, 53, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (106, 54, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (107, 56, 'array', 'Array', 'The array of grouped elements to process.', 0);
INSERT INTO `params` VALUES (108, 56, 'iteratee', 'Function', 'The function to combine regrouped values.', 1);
INSERT INTO `params` VALUES (109, 46, 'array', 'Array', 'The array to query.', 0);
INSERT INTO `params` VALUES (110, 57, 'array', 'Array', 'The array to inspect.', 0);
INSERT INTO `params` VALUES (111, 57, 'values', '...*', 'The values to exclude.', 0);
INSERT INTO `params` VALUES (112, 58, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (113, 54, 'comparator', 'Function', 'The comparator invoked per element.', 0);
INSERT INTO `params` VALUES (114, 55, 'array', 'Array', 'The array of grouped elements to process.', 0);
INSERT INTO `params` VALUES (115, 59, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (116, 59, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (117, 60, 'props', 'Array', 'The property identifiers.', 1);
INSERT INTO `params` VALUES (118, 60, 'values', 'Array', 'The property values.', 1);
INSERT INTO `params` VALUES (119, 63, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (120, 61, 'arrays', '...Array', 'The arrays to process.', 0);
INSERT INTO `params` VALUES (121, 61, 'iteratee', 'Function', 'The function to combine grouped values.', 1);
INSERT INTO `params` VALUES (122, 63, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (123, 67, 'props', 'Array', 'The property identifiers.', 1);
INSERT INTO `params` VALUES (124, 67, 'values', 'Array', 'The property values.', 1);
INSERT INTO `params` VALUES (125, 62, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (126, 62, 'iteratee', 'Function', 'The iteratee to transform keys.', 1);
INSERT INTO `params` VALUES (127, 64, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (128, 64, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (129, 68, 'collection', 'Array|Object', 'The collection to inspect.', 0);
INSERT INTO `params` VALUES (130, 68, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (131, 68, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (132, 65, 'arrays', '...Array', 'The arrays to inspect.', 0);
INSERT INTO `params` VALUES (133, 69, 'collection', 'Array|Object', 'The collection to inspect.', 0);
INSERT INTO `params` VALUES (134, 69, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (135, 69, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (136, 70, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (137, 65, 'comparator', 'Function', 'The comparator invoked per element.', 0);
INSERT INTO `params` VALUES (138, 66, 'arrays', '...Array', 'The arrays to process.', 0);
INSERT INTO `params` VALUES (139, 71, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (140, 72, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (141, 70, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (142, 71, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (143, 72, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (144, 72, 'depth', 'number', 'The maximum recursion depth.', 1);
INSERT INTO `params` VALUES (145, 77, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (146, 77, 'path', 'Array|Function|string', 'The path of the method to invoke or the function invoked per iteration.', 0);
INSERT INTO `params` VALUES (147, 77, 'args', '...*', 'The arguments to invoke each method with.', 0);
INSERT INTO `params` VALUES (148, 75, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (149, 75, 'iteratee', 'Function', 'The iteratee to transform keys.', 1);
INSERT INTO `params` VALUES (150, 74, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (151, 74, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (152, 76, 'collection', 'Array|Object|string', 'The collection to inspect.', 0);
INSERT INTO `params` VALUES (153, 76, 'fromIndex', 'number', 'The index to search from.', 1);
INSERT INTO `params` VALUES (154, 76, 'value', '*', 'The value to search for.', 0);
INSERT INTO `params` VALUES (155, 78, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (156, 78, 'iteratee', 'Function', 'The iteratee to transform keys.', 1);
INSERT INTO `params` VALUES (157, 73, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (158, 73, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (159, 79, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (160, 79, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (161, 83, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (162, 83, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (163, 83, 'accumulator', '*', 'The initial value.', 0);
INSERT INTO `params` VALUES (164, 82, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (165, 82, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (166, 82, 'accumulator', '*', 'The initial value.', 0);
INSERT INTO `params` VALUES (167, 81, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (168, 81, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (169, 80, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (170, 80, 'orders', 'string[]', 'The sort orders of iteratees.', 0);
INSERT INTO `params` VALUES (171, 84, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (172, 84, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (173, 85, 'collection', 'Array|Object', 'The collection to sample.', 0);
INSERT INTO `params` VALUES (174, 80, 'iteratees', 'Array[]|Function[]|Object[]|string[]', 'The iteratees to sort by.', 1);
INSERT INTO `params` VALUES (175, 86, 'collection', 'Array|Object', 'The collection to sample.', 0);
INSERT INTO `params` VALUES (176, 86, 'n', 'number', 'The number of elements to sample.', 1);
INSERT INTO `params` VALUES (177, 87, 'collection', 'Array|Object', 'The collection to shuffle.', 0);
INSERT INTO `params` VALUES (178, 90, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (179, 90, 'iteratees', '...(Function|Function[])', 'The iteratees to sort by.', 1);
INSERT INTO `params` VALUES (180, 88, 'collection', 'Array|Object|string', 'The collection to inspect.', 0);
INSERT INTO `params` VALUES (181, 94, 'n', 'number', 'The number of calls at which func is no longer invoked.', 0);
INSERT INTO `params` VALUES (182, 94, 'func', 'Function', 'The function to restrict.', 0);
INSERT INTO `params` VALUES (183, 93, 'func', 'Function', 'The function to cap arguments for.', 0);
INSERT INTO `params` VALUES (184, 93, 'n', 'number', 'The arity cap.', 1);
INSERT INTO `params` VALUES (185, 89, 'collection', 'Array|Object', 'The collection to iterate over.', 0);
INSERT INTO `params` VALUES (186, 89, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (187, 92, 'n', 'number', 'The number of calls before func is invoked.', 0);
INSERT INTO `params` VALUES (188, 92, 'func', 'Function', 'The function to restrict.', 0);
INSERT INTO `params` VALUES (189, 96, 'object', 'Object', 'The object to invoke the method on.', 0);
INSERT INTO `params` VALUES (190, 96, 'key', 'string', 'The key of the method.', 0);
INSERT INTO `params` VALUES (191, 95, 'func', 'Function', 'The function to bind.', 0);
INSERT INTO `params` VALUES (192, 96, 'partials', '...*', 'The arguments to be partially applied.', 0);
INSERT INTO `params` VALUES (193, 97, 'func', 'Function', 'The function to curry.', 0);
INSERT INTO `params` VALUES (194, 98, 'func', 'Function', 'The function to curry.', 0);
INSERT INTO `params` VALUES (195, 99, 'func', 'Function', 'The function to debounce.', 0);
INSERT INTO `params` VALUES (196, 99, 'wait', 'number', 'The number of milliseconds to delay.', 1);
INSERT INTO `params` VALUES (197, 95, 'thisArg', '*', 'The this binding of func.', 0);
INSERT INTO `params` VALUES (198, 95, 'partials', '...*', 'The arguments to be partially applied.', 0);
INSERT INTO `params` VALUES (199, 97, 'arity', 'number', 'The arity of func.', 1);
INSERT INTO `params` VALUES (200, 98, 'arity', 'number', 'The arity of func.', 1);
INSERT INTO `params` VALUES (201, 99, 'options', 'Object', 'The options object.', 0);
INSERT INTO `params` VALUES (202, 102, 'func', 'Function', 'The function to flip arguments for.', 0);
INSERT INTO `params` VALUES (203, 104, 'predicate', 'Function', 'The predicate to negate.', 0);
INSERT INTO `params` VALUES (204, 100, 'func', 'Function', 'The function to defer.', 0);
INSERT INTO `params` VALUES (205, 100, 'args', '...*', 'The arguments to invoke func with.', 0);
INSERT INTO `params` VALUES (206, 101, 'func', 'Function', 'The function to delay.', 0);
INSERT INTO `params` VALUES (207, 101, 'wait', 'number', 'The number of milliseconds to delay invocation.', 0);
INSERT INTO `params` VALUES (208, 106, 'func', 'Function', 'The function to wrap.', 0);
INSERT INTO `params` VALUES (209, 101, 'args', '...*', 'The arguments to invoke func with.', 0);
INSERT INTO `params` VALUES (210, 106, 'transforms', '...(Function|Function[])', 'The argument transforms.', 1);
INSERT INTO `params` VALUES (211, 103, 'resolver', 'Function', 'The function to resolve the cache key.', 0);
INSERT INTO `params` VALUES (212, 105, 'func', 'Function', 'The function to restrict.', 0);
INSERT INTO `params` VALUES (213, 103, 'func', 'Function', 'The function to have its output memoized.', 0);
INSERT INTO `params` VALUES (214, 108, 'func', 'Function', 'The function to partially apply arguments to.', 0);
INSERT INTO `params` VALUES (215, 108, 'partials', '...*', 'The arguments to be partially applied.', 0);
INSERT INTO `params` VALUES (216, 109, 'func', 'Function', 'The function to rearrange arguments for.', 0);
INSERT INTO `params` VALUES (217, 109, 'indexes', '...(number|number[])', 'The arranged argument indexes.', 0);
INSERT INTO `params` VALUES (218, 107, 'func', 'Function', 'The function to partially apply arguments to.', 0);
INSERT INTO `params` VALUES (219, 107, 'partials', '...*', 'The arguments to be partially applied.', 0);
INSERT INTO `params` VALUES (220, 110, 'start', 'number', 'The start position of the rest parameter.', 1);
INSERT INTO `params` VALUES (221, 111, 'func', 'Function', 'The function to spread arguments over.', 0);
INSERT INTO `params` VALUES (222, 111, 'start', 'number', 'The start position of the spread.', 1);
INSERT INTO `params` VALUES (223, 110, 'func', 'Function', 'The function to apply a rest parameter to.', 0);
INSERT INTO `params` VALUES (224, 114, 'value', '*', 'The value to inspect.', 0);
INSERT INTO `params` VALUES (225, 112, 'func', 'Function', 'The function to cap arguments for.', 0);
INSERT INTO `params` VALUES (226, 113, 'value', '*', 'The value to wrap.', 0);
INSERT INTO `params` VALUES (227, 113, 'wrapper', 'Function', 'The wrapper function.', 1);
INSERT INTO `params` VALUES (228, 115, 'func', 'Function', 'The function to throttle.', 0);
INSERT INTO `params` VALUES (229, 115, 'wait', 'number', 'The number of milliseconds to throttle invocations to.', 1);
INSERT INTO `params` VALUES (230, 115, 'options', 'Object', 'The options object.', 0);
INSERT INTO `params` VALUES (231, 116, 'value', '*', 'The value to clone.', 0);
INSERT INTO `params` VALUES (232, 117, 'value', '*', 'The value to recursively clone.', 0);
INSERT INTO `params` VALUES (233, 120, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (234, 120, 'source', 'Object', 'The object of property predicates to conform to.', 0);
INSERT INTO `params` VALUES (235, 118, 'value', '*', 'The value to recursively clone.', 0);
INSERT INTO `params` VALUES (236, 118, 'customizer', 'Function', 'The function to customize cloning.', 0);
INSERT INTO `params` VALUES (237, 119, 'value', '*', 'The value to clone.', 0);
INSERT INTO `params` VALUES (238, 119, 'customizer', 'Function', 'The function to customize cloning.', 0);
INSERT INTO `params` VALUES (239, 121, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (240, 121, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (241, 122, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (242, 122, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (243, 125, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (244, 124, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (245, 128, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (246, 123, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (247, 126, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (248, 129, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (249, 123, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (250, 127, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (251, 130, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (252, 131, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (253, 134, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (254, 134, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (255, 132, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (256, 133, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (257, 136, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (258, 138, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (259, 139, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (260, 140, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (261, 142, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (262, 137, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (263, 135, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (264, 135, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (265, 142, 'source', 'Object', 'The object of property values to match.', 0);
INSERT INTO `params` VALUES (266, 141, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (267, 135, 'customizer', 'Function', 'The function to customize comparisons.', 0);
INSERT INTO `params` VALUES (268, 143, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (269, 143, 'source', 'Object', 'The object of property values to match.', 0);
INSERT INTO `params` VALUES (270, 143, 'customizer', 'Function', 'The function to customize comparisons.', 0);
INSERT INTO `params` VALUES (271, 145, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (272, 146, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (273, 149, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (274, 150, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (275, 148, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (276, 147, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (277, 144, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (278, 151, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (279, 152, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (280, 154, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (281, 153, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (282, 155, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (283, 157, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (284, 158, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (285, 156, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (286, 161, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (287, 164, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (288, 160, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (289, 159, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (290, 161, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (291, 162, 'other', '*', 'The other value to compare.', 0);
INSERT INTO `params` VALUES (292, 162, 'value', '*', 'The value to compare.', 0);
INSERT INTO `params` VALUES (293, 163, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (294, 165, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (295, 166, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (296, 167, 'value', '*', 'The value to process.', 0);
INSERT INTO `params` VALUES (297, 169, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (298, 171, 'augend', 'number', 'The first number in an addition.', 0);
INSERT INTO `params` VALUES (299, 172, 'dividend', 'number', 'The first number in a division.', 0);
INSERT INTO `params` VALUES (300, 172, 'divisor', 'number', 'The second number in a division.', 0);
INSERT INTO `params` VALUES (301, 171, 'addend', 'number', 'The second number in an addition.', 0);
INSERT INTO `params` VALUES (302, 176, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (303, 176, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (304, 170, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (305, 174, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (306, 173, 'number', 'number', 'The number to round down.', 0);
INSERT INTO `params` VALUES (307, 168, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (308, 173, 'precision', 'number', 'The precision to round down to.', 1);
INSERT INTO `params` VALUES (309, 175, 'number', 'number', 'The number to round up.', 0);
INSERT INTO `params` VALUES (310, 177, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (311, 178, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (312, 178, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (313, 179, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (314, 180, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (315, 175, 'precision', 'number', 'The precision to round up to.', 1);
INSERT INTO `params` VALUES (316, 181, 'multiplicand', 'number', 'The second number in a multiplication.', 0);
INSERT INTO `params` VALUES (317, 182, 'number', 'number', 'The number to round.', 0);
INSERT INTO `params` VALUES (318, 180, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (319, 181, 'multiplier', 'number', 'The first number in a multiplication.', 0);
INSERT INTO `params` VALUES (320, 182, 'precision', 'number', 'The precision to round to.', 1);
INSERT INTO `params` VALUES (321, 184, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (322, 186, 'number', 'number', 'The number to clamp.', 0);
INSERT INTO `params` VALUES (323, 186, 'lower', 'number', 'The lower bound.', 0);
INSERT INTO `params` VALUES (324, 186, 'upper', 'number', 'The upper bound.', 0);
INSERT INTO `params` VALUES (325, 183, 'minuend', 'number', 'The first number in a subtraction.', 0);
INSERT INTO `params` VALUES (326, 183, 'subtrahend', 'number', 'The second number in a subtraction.', 0);
INSERT INTO `params` VALUES (327, 187, 'number', 'number', 'The number to check.', 0);
INSERT INTO `params` VALUES (328, 187, 'start', 'number', 'The start of the range.', 1);
INSERT INTO `params` VALUES (329, 187, 'end', 'number', 'The end of the range.', 0);
INSERT INTO `params` VALUES (330, 185, 'array', 'Array', 'The array to iterate over.', 0);
INSERT INTO `params` VALUES (331, 185, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (332, 189, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (333, 189, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (334, 190, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (335, 190, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (336, 192, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (337, 192, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (338, 192, 'customizer', 'Function', 'The function to customize assigned values.', 0);
INSERT INTO `params` VALUES (339, 188, 'lower', 'number', 'The lower bound.', 1);
INSERT INTO `params` VALUES (340, 188, 'upper', 'number', 'The upper bound.', 1);
INSERT INTO `params` VALUES (341, 188, 'floating', 'boolean', 'Specify returning a floating-point number.', 0);
INSERT INTO `params` VALUES (342, 191, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (343, 191, 'customizer', 'Function', 'The function to customize assigned values.', 0);
INSERT INTO `params` VALUES (344, 191, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (345, 195, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (346, 195, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (347, 193, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (348, 193, 'paths', '...(string|string[])', 'The property paths to pick.', 0);
INSERT INTO `params` VALUES (349, 194, 'prototype', 'Object', 'The object to inherit from.', 0);
INSERT INTO `params` VALUES (350, 194, 'properties', 'Object', 'The properties to assign to the object.', 0);
INSERT INTO `params` VALUES (351, 196, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (352, 198, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (353, 196, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (354, 198, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (355, 197, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (356, 197, 'predicate', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (357, 199, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (358, 199, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (359, 200, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (360, 200, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (361, 201, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (362, 202, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (363, 202, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (364, 203, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (365, 201, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (366, 204, 'object', 'Object', 'The object to inspect.', 0);
INSERT INTO `params` VALUES (367, 205, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (368, 205, 'path', 'Array|string', 'The path of the property to get.', 0);
INSERT INTO `params` VALUES (369, 205, 'defaultValue', '*', 'The value returned for undefined resolved values.', 0);
INSERT INTO `params` VALUES (370, 208, 'object', 'Object', 'The object to invert.', 0);
INSERT INTO `params` VALUES (371, 207, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (372, 207, 'path', 'Array|string', 'The path to check.', 0);
INSERT INTO `params` VALUES (373, 210, 'path', 'Array|string', 'The path of the method to invoke.', 0);
INSERT INTO `params` VALUES (374, 210, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (375, 210, 'args', '...*', 'The arguments to invoke the method with.', 0);
INSERT INTO `params` VALUES (376, 209, 'object', 'Object', 'The object to invert.', 0);
INSERT INTO `params` VALUES (377, 209, 'iteratee', 'Function', 'The iteratee invoked per element.', 1);
INSERT INTO `params` VALUES (378, 206, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (379, 206, 'path', 'Array|string', 'The path to check.', 0);
INSERT INTO `params` VALUES (380, 212, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (381, 213, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (382, 211, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (383, 213, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (384, 214, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (385, 214, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (386, 216, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (387, 216, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (388, 216, 'customizer', 'Function', 'The function to customize assigned values.', 0);
INSERT INTO `params` VALUES (389, 215, 'object', 'Object', 'The destination object.', 0);
INSERT INTO `params` VALUES (390, 215, 'sources', '...Object', 'The source objects.', 0);
INSERT INTO `params` VALUES (391, 217, 'paths', '...(string|string[])', 'The property paths to omit.', 0);
INSERT INTO `params` VALUES (392, 217, 'object', 'Object', 'The source object.', 0);
INSERT INTO `params` VALUES (393, 218, 'object', 'Object', 'The source object.', 0);
INSERT INTO `params` VALUES (394, 218, 'predicate', 'Function', 'The function invoked per property.', 1);
INSERT INTO `params` VALUES (395, 219, 'object', 'Object', 'The source object.', 0);
INSERT INTO `params` VALUES (396, 219, 'paths', '...(string|string[])', 'The property paths to pick.', 0);
INSERT INTO `params` VALUES (397, 220, 'object', 'Object', 'The source object.', 0);
INSERT INTO `params` VALUES (398, 220, 'predicate', 'Function', 'The function invoked per property.', 1);
INSERT INTO `params` VALUES (399, 221, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (400, 222, 'object', 'Object', 'The object to modify.', 0);
INSERT INTO `params` VALUES (401, 222, 'path', 'Array|string', 'The path of the property to set.', 0);
INSERT INTO `params` VALUES (402, 221, 'path', 'Array|string', 'The path of the property to resolve.', 0);
INSERT INTO `params` VALUES (403, 221, 'defaultValue', '*', 'The value returned for undefined resolved values.', 0);
INSERT INTO `params` VALUES (404, 224, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (405, 225, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (406, 223, 'object', 'Object', 'The object to modify.', 0);
INSERT INTO `params` VALUES (407, 222, 'value', '*', 'The value to set.', 0);
INSERT INTO `params` VALUES (408, 223, 'path', 'Array|string', 'The path of the property to set.', 0);
INSERT INTO `params` VALUES (409, 223, 'value', '*', 'The value to set.', 0);
INSERT INTO `params` VALUES (410, 223, 'customizer', 'Function', 'The function to customize assigned values.', 0);
INSERT INTO `params` VALUES (411, 228, 'object', 'Object', 'The object to modify.', 0);
INSERT INTO `params` VALUES (412, 228, 'path', 'Array|string', 'The path of the property to set.', 0);
INSERT INTO `params` VALUES (413, 226, 'object', 'Object', 'The object to iterate over.', 0);
INSERT INTO `params` VALUES (414, 228, 'updater', 'Function', 'The function to produce the updated value.', 0);
INSERT INTO `params` VALUES (415, 226, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (416, 226, 'accumulator', '*', 'The custom accumulator value.', 0);
INSERT INTO `params` VALUES (417, 229, 'object', 'Object', 'The object to modify.', 0);
INSERT INTO `params` VALUES (418, 229, 'path', 'Array|string', 'The path of the property to set.', 0);
INSERT INTO `params` VALUES (419, 229, 'customizer', 'Function', 'The function to customize assigned values.', 0);
INSERT INTO `params` VALUES (420, 235, 'value', '*', 'The value to provide to interceptor.', 0);
INSERT INTO `params` VALUES (421, 234, 'value', '*', 'The value to provide to interceptor.', 0);
INSERT INTO `params` VALUES (422, 234, 'interceptor', 'Function', 'The function to invoke.', 0);
INSERT INTO `params` VALUES (423, 231, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (424, 229, 'updater', 'Function', 'The function to produce the updated value.', 0);
INSERT INTO `params` VALUES (425, 235, 'interceptor', 'Function', 'The function to invoke.', 0);
INSERT INTO `params` VALUES (426, 227, 'path', 'Array|string', 'The path of the property to unset.', 0);
INSERT INTO `params` VALUES (427, 227, 'object', 'Object', 'The object to modify.', 0);
INSERT INTO `params` VALUES (428, 233, 'value', '*', 'The value to wrap.', 0);
INSERT INTO `params` VALUES (429, 230, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (430, 232, 'value', '*', 'The value to wrap in a lodash instance.', 0);
INSERT INTO `params` VALUES (431, 245, 'string', 'string', 'The string to capitalize.', 1);
INSERT INTO `params` VALUES (432, 246, 'string', 'string', 'The string to deburr.', 1);
INSERT INTO `params` VALUES (433, 237, 'paths', '...(string|string[])', 'The property paths to pick.', 0);
INSERT INTO `params` VALUES (434, 241, 'value', '*', 'The value to plant.', 0);
INSERT INTO `params` VALUES (435, 244, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (436, 247, 'target', 'string', 'The string to search for.', 0);
INSERT INTO `params` VALUES (437, 248, 'string', 'string', 'The string to escape.', 1);
INSERT INTO `params` VALUES (438, 247, 'string', 'string', 'The string to inspect.', 1);
INSERT INTO `params` VALUES (439, 247, 'position', 'number', 'The position to search up to.', 1);
INSERT INTO `params` VALUES (440, 249, 'string', 'string', 'The string to escape.', 1);
INSERT INTO `params` VALUES (441, 250, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (442, 251, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (443, 252, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (444, 253, 'length', 'number', 'The padding length.', 1);
INSERT INTO `params` VALUES (445, 255, 'string', 'string', 'The string to pad.', 1);
INSERT INTO `params` VALUES (446, 255, 'length', 'number', 'The padding length.', 1);
INSERT INTO `params` VALUES (447, 254, 'string', 'string', 'The string to pad.', 1);
INSERT INTO `params` VALUES (448, 253, 'string', 'string', 'The string to pad.', 1);
INSERT INTO `params` VALUES (449, 253, 'chars', '] (string', 'The string used as padding.', 1);
INSERT INTO `params` VALUES (450, 255, 'chars', '] (string', 'The string used as padding.', 1);
INSERT INTO `params` VALUES (451, 254, 'length', 'number', 'The padding length.', 1);
INSERT INTO `params` VALUES (452, 254, 'chars', '] (string', 'The string used as padding.', 1);
INSERT INTO `params` VALUES (453, 257, 'string', 'string', 'The string to repeat.', 1);
INSERT INTO `params` VALUES (454, 257, 'n', 'number', 'The number of times to repeat the string.', 1);
INSERT INTO `params` VALUES (455, 258, 'string', 'string', 'The string to modify.', 1);
INSERT INTO `params` VALUES (456, 258, 'pattern', 'RegExp|string', 'The pattern to replace.', 0);
INSERT INTO `params` VALUES (457, 256, 'string', 'string', 'The string to convert.', 0);
INSERT INTO `params` VALUES (458, 256, 'radix', 'number', 'The radix to interpret value by.', 1);
INSERT INTO `params` VALUES (459, 258, 'replacement', 'Function|string', 'The match replacement.', 0);
INSERT INTO `params` VALUES (460, 259, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (461, 260, 'string', 'string', 'The string to split.', 1);
INSERT INTO `params` VALUES (462, 260, 'separator', 'RegExp|string', 'The separator pattern to split by.', 0);
INSERT INTO `params` VALUES (463, 260, 'limit', 'number', 'The length to truncate results to.', 0);
INSERT INTO `params` VALUES (464, 261, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (465, 264, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (466, 263, 'string', 'string', 'The template string.', 1);
INSERT INTO `params` VALUES (467, 262, 'target', 'string', 'The string to search for.', 0);
INSERT INTO `params` VALUES (468, 262, 'position', 'number', 'The position to search from.', 1);
INSERT INTO `params` VALUES (469, 263, 'options', 'Object', 'The options object.', 0);
INSERT INTO `params` VALUES (470, 262, 'string', 'string', 'The string to inspect.', 1);
INSERT INTO `params` VALUES (471, 268, 'string', 'string', 'The string to trim.', 1);
INSERT INTO `params` VALUES (472, 268, 'chars', 'string', 'The characters to trim.', 1);
INSERT INTO `params` VALUES (473, 266, 'string', 'string', 'The string to trim.', 1);
INSERT INTO `params` VALUES (474, 266, 'chars', 'string', 'The characters to trim.', 1);
INSERT INTO `params` VALUES (475, 265, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (476, 267, 'chars', 'string', 'The characters to trim.', 1);
INSERT INTO `params` VALUES (477, 267, 'string', 'string', 'The string to trim.', 1);
INSERT INTO `params` VALUES (478, 269, 'options', 'Object', 'The options object.', 0);
INSERT INTO `params` VALUES (479, 269, 'string', 'string', 'The string to truncate.', 1);
INSERT INTO `params` VALUES (480, 270, 'string', 'string', 'The string to unescape.', 1);
INSERT INTO `params` VALUES (481, 271, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (482, 272, 'string', 'string', 'The string to convert.', 1);
INSERT INTO `params` VALUES (483, 274, 'func', 'Function', 'The function to attempt.', 0);
INSERT INTO `params` VALUES (484, 273, 'string', 'string', 'The string to inspect.', 1);
INSERT INTO `params` VALUES (485, 273, 'pattern', 'RegExp|string', 'The pattern to match words.', 0);
INSERT INTO `params` VALUES (486, 274, 'args', '...*', 'The arguments to invoke func with.', 0);
INSERT INTO `params` VALUES (487, 275, 'object', 'Object', 'The object to bind and assign the bound methods to.', 0);
INSERT INTO `params` VALUES (488, 275, 'methodNames', '...(string|string[])', 'The object method names to bind.', 0);
INSERT INTO `params` VALUES (489, 276, 'pairs', 'Array', 'The predicate-function pairs.', 0);
INSERT INTO `params` VALUES (490, 280, 'funcs', '...(Function|Function[])', 'The functions to invoke.', 0);
INSERT INTO `params` VALUES (491, 277, 'source', 'Object', 'The object of property predicates to conform to.', 0);
INSERT INTO `params` VALUES (492, 281, 'funcs', '...(Function|Function[])', 'The functions to invoke.', 0);
INSERT INTO `params` VALUES (493, 279, 'value', '*', 'The value to check.', 0);
INSERT INTO `params` VALUES (494, 284, 'source', 'Object', 'The object of property values to match.', 0);
INSERT INTO `params` VALUES (495, 285, 'args', '...*', 'The arguments to invoke the method with.', 0);
INSERT INTO `params` VALUES (496, 279, 'defaultValue', '*', 'The default value.', 0);
INSERT INTO `params` VALUES (497, 282, 'value', '*', 'Any value.', 0);
INSERT INTO `params` VALUES (498, 278, 'value', '*', 'The value to return from the new function.', 0);
INSERT INTO `params` VALUES (499, 283, 'func', '*', 'The value to convert to a callback.', 1);
INSERT INTO `params` VALUES (500, 285, 'path', 'Array|string', 'The path of the method to invoke.', 0);
INSERT INTO `params` VALUES (501, 286, 'path', 'Array|string', 'The path of the property to get.', 0);
INSERT INTO `params` VALUES (502, 286, 'srcValue', '*', 'The value to match.', 0);
INSERT INTO `params` VALUES (503, 287, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (504, 287, 'args', '...*', 'The arguments to invoke the method with.', 0);
INSERT INTO `params` VALUES (505, 288, 'object', 'Function|Object', 'The destination object.', 1);
INSERT INTO `params` VALUES (506, 288, 'source', 'Object', 'The object of functions to add.', 0);
INSERT INTO `params` VALUES (507, 288, 'options', 'Object', 'The options object.', 0);
INSERT INTO `params` VALUES (508, 292, 'iteratees', '...(Function|Function[])', 'The iteratees to invoke.', 1);
INSERT INTO `params` VALUES (509, 293, 'predicates', '...(Function|Function[])', 'The predicates to check.', 1);
INSERT INTO `params` VALUES (510, 295, 'path', 'Array|string', 'The path of the property to get.', 0);
INSERT INTO `params` VALUES (511, 294, 'predicates', '...(Function|Function[])', 'The predicates to check.', 1);
INSERT INTO `params` VALUES (512, 291, 'n', 'number', 'The index of the argument to return.', 1);
INSERT INTO `params` VALUES (513, 296, 'object', 'Object', 'The object to query.', 0);
INSERT INTO `params` VALUES (514, 297, 'end', 'number', 'The end of the range.', 0);
INSERT INTO `params` VALUES (515, 299, 'context', 'Object', 'The context object.', 1);
INSERT INTO `params` VALUES (516, 298, 'start', 'number', 'The start of the range.', 1);
INSERT INTO `params` VALUES (517, 298, 'end', 'number', 'The end of the range.', 0);
INSERT INTO `params` VALUES (518, 298, 'step', 'number', 'The value to increment or decrement by.', 1);
INSERT INTO `params` VALUES (519, 297, 'start', 'number', 'The start of the range.', 1);
INSERT INTO `params` VALUES (520, 297, 'step', 'number', 'The value to increment or decrement by.', 1);
INSERT INTO `params` VALUES (521, 306, 'value', '*', 'The value to convert.', 0);
INSERT INTO `params` VALUES (522, 307, 'prefix', 'string', 'The value to prefix the ID with.', 1);
INSERT INTO `params` VALUES (523, 305, 'n', 'number', 'The number of times to invoke iteratee.', 0);
INSERT INTO `params` VALUES (524, 305, 'iteratee', 'Function', 'The function invoked per iteration.', 1);
INSERT INTO `params` VALUES (525, 309, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (526, 308, 'data', 'string|Buffer', '`data` {string|Buffer} ', 0);
INSERT INTO `params` VALUES (527, 308, 'options', 'Object|string', '`options` {Object|string} ', 0);
INSERT INTO `params` VALUES (528, 310, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (529, 310, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (530, 313, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (531, 313, 'offset', 'integer', '`offset` {integer} ', 0);
INSERT INTO `params` VALUES (532, 313, 'length', 'integer', '`length` {integer} ', 0);
INSERT INTO `params` VALUES (533, 313, 'position', 'integer', '`position` {integer} ', 0);
INSERT INTO `params` VALUES (534, 317, 'len', 'integer', '`len` {integer} **Default:** `0` ', 0);
INSERT INTO `params` VALUES (535, 318, 'atime', 'number|string|Date', '`atime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (536, 316, 'options', 'Object|string', '`options` {Object|string} ', 0);
INSERT INTO `params` VALUES (537, 318, 'mtime', 'number|string|Date', '`mtime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (538, 319, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (539, 319, 'offset', 'integer', '`offset` {integer} ', 0);
INSERT INTO `params` VALUES (540, 319, 'length', 'integer', '`length` {integer} ', 0);
INSERT INTO `params` VALUES (541, 319, 'position', 'integer', '`position` {integer} ', 0);
INSERT INTO `params` VALUES (542, 327, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (543, 327, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (544, 325, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (545, 325, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (546, 325, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (547, 326, 'src', 'string|Buffer|URL', '`src` {string|Buffer|URL} source filename to copy ', 0);
INSERT INTO `params` VALUES (548, 326, 'dest', 'string|Buffer|URL', '`dest` {string|Buffer|URL} destination filename of the copy operation ', 0);
INSERT INTO `params` VALUES (549, 326, 'flags', 'number', '`flags` {number} modifiers for copy operation. **Default:** `0`. ', 1);
INSERT INTO `params` VALUES (550, 323, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (551, 323, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (552, 320, 'data', 'string|Buffer|Uint8Array', '`data` {string|Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (553, 320, 'options', 'Object|string', '`options` {Object|string} ', 0);
INSERT INTO `params` VALUES (554, 324, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (555, 324, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (556, 324, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (557, 322, 'path', 'string|Buffer|URL|FileHandle', '`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` ', 0);
INSERT INTO `params` VALUES (558, 322, 'data', 'string|Buffer', '`data` {string|Buffer} ', 0);
INSERT INTO `params` VALUES (559, 322, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (560, 321, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (561, 321, 'mode', 'integer', '`mode` {integer} **Default:** `fs.constants.F_OK` ', 1);
INSERT INTO `params` VALUES (562, 328, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (563, 329, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (564, 330, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (565, 332, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (566, 332, 'atime', 'number|string|Date', '`atime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (567, 332, 'mtime', 'number|string|Date', '`mtime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (568, 331, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (569, 331, 'len', 'integer', '`len` {integer} **Default:** `0` ', 1);
INSERT INTO `params` VALUES (570, 335, 'existingPath', 'string|Buffer|URL', '`existingPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (571, 335, 'newPath', 'string|Buffer|URL', '`newPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (572, 338, 'prefix', 'string', '`prefix` {string} ', 0);
INSERT INTO `params` VALUES (573, 338, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (574, 336, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (575, 337, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (576, 337, 'mode', 'integer', '`mode` {integer} **Default:** `0o777` ', 1);
INSERT INTO `params` VALUES (577, 333, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (578, 333, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (579, 334, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (580, 334, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (581, 334, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (582, 340, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (583, 340, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (584, 340, 'offset', 'integer', '`offset` {integer} ', 0);
INSERT INTO `params` VALUES (585, 340, 'length', 'integer', '`length` {integer} ', 0);
INSERT INTO `params` VALUES (586, 340, 'position', 'integer', '`position` {integer} ', 0);
INSERT INTO `params` VALUES (587, 339, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (588, 339, 'flags', 'string|number', '`flags` {string|number} See [support of file system `flags`][]. ', 0);
INSERT INTO `params` VALUES (589, 339, 'mode', 'integer', '`mode` {integer} **Default:** `0o666` (readable and writable) ', 1);
INSERT INTO `params` VALUES (590, 341, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (591, 341, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (592, 343, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (593, 342, 'oldPath', 'string|Buffer|URL', '`oldPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (594, 342, 'newPath', 'string|Buffer|URL', '`newPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (595, 345, 'target', 'string|Buffer|URL', '`target` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (596, 345, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (597, 345, 'type', 'string', '`type` {string} **Default:** `\'file\'` ', 1);
INSERT INTO `params` VALUES (598, 344, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (599, 346, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (600, 346, 'len', 'integer', '`len` {integer} **Default:** `0` ', 1);
INSERT INTO `params` VALUES (601, 348, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (602, 348, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (603, 350, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (604, 350, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (605, 349, 'path', 'string|Buffer|URL|FileHandle', '`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` ', 0);
INSERT INTO `params` VALUES (606, 349, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (607, 347, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (608, 351, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (609, 351, 'atime', 'number|string|Date', '`atime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (610, 351, 'mtime', 'number|string|Date', '`mtime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (611, 352, 'filehandle', 'FileHandle', '`filehandle` {FileHandle} ', 0);
INSERT INTO `params` VALUES (612, 352, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (613, 352, 'length', 'integer', '`length` {integer} ', 1);
INSERT INTO `params` VALUES (614, 354, 'file', 'string|Buffer|URL|FileHandle', '`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` ', 0);
INSERT INTO `params` VALUES (615, 354, 'data', 'string|Buffer|Uint8Array', '`data` {string|Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (616, 352, 'offset', 'integer', '`offset` {integer} ', 1);
INSERT INTO `params` VALUES (617, 352, 'position', 'integer', '`position` {integer} ', 1);
INSERT INTO `params` VALUES (618, 354, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (619, 362, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (620, 362, 'mode', 'integer', '`mode` {integer} **Default:** `fs.constants.F_OK` ', 1);
INSERT INTO `params` VALUES (621, 362, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (622, 363, 'mode', 'integer', '`mode` {integer} **Default:** `fs.constants.F_OK` ', 1);
INSERT INTO `params` VALUES (623, 364, 'path', 'string|Buffer|URL|number', '`path` {string|Buffer|URL|number} filename or file descriptor ', 0);
INSERT INTO `params` VALUES (624, 364, 'data', 'string|Buffer', '`data` {string|Buffer} ', 0);
INSERT INTO `params` VALUES (625, 364, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (626, 363, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (627, 364, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (628, 366, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (629, 366, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (630, 366, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (631, 368, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (632, 368, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (633, 368, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (634, 368, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (635, 369, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (636, 369, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (637, 369, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (638, 372, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (639, 371, 'src', 'string|Buffer|URL', '`src` {string|Buffer|URL} source filename to copy ', 0);
INSERT INTO `params` VALUES (640, 371, 'dest', 'string|Buffer|URL', '`dest` {string|Buffer|URL} destination filename of the copy operation ', 0);
INSERT INTO `params` VALUES (641, 371, 'flags', 'number', '`flags` {number} modifiers for copy operation. **Default:** `0`. ', 1);
INSERT INTO `params` VALUES (642, 371, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (643, 365, 'path', 'string|Buffer|URL|number', '`path` {string|Buffer|URL|number} filename or file descriptor ', 0);
INSERT INTO `params` VALUES (644, 365, 'data', 'string|Buffer', '`data` {string|Buffer} ', 0);
INSERT INTO `params` VALUES (645, 365, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (646, 373, 'src', 'string|Buffer|URL', '`src` {string|Buffer|URL} source filename to copy ', 0);
INSERT INTO `params` VALUES (647, 373, 'dest', 'string|Buffer|URL', '`dest` {string|Buffer|URL} destination filename of the copy operation ', 0);
INSERT INTO `params` VALUES (648, 373, 'flags', 'number', '`flags` {number} modifiers for copy operation. **Default:** `0`. ', 1);
INSERT INTO `params` VALUES (649, 374, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (650, 370, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (651, 374, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (652, 370, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (653, 367, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (654, 367, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (655, 375, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (656, 375, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (657, 376, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (658, 376, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (659, 377, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (660, 379, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (661, 379, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (662, 380, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (663, 380, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (664, 380, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (665, 380, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (666, 378, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (667, 378, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (668, 378, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (669, 385, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (670, 385, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (671, 382, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (672, 382, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (673, 386, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (674, 381, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (675, 381, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (676, 381, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (677, 383, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (678, 384, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (679, 384, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (680, 387, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (681, 388, 'len', 'integer', '`len` {integer} **Default:** `0` ', 1);
INSERT INTO `params` VALUES (682, 388, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (683, 393, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (684, 393, 'atime', 'integer', '`atime` {integer} ', 0);
INSERT INTO `params` VALUES (685, 393, 'mtime', 'integer', '`mtime` {integer} ', 0);
INSERT INTO `params` VALUES (686, 395, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (687, 395, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (688, 395, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (689, 395, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (690, 392, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (691, 392, 'atime', 'number|string|Date', '`atime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (692, 392, 'mtime', 'number|string|Date', '`mtime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (693, 392, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (694, 394, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (695, 394, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (696, 394, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (697, 389, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (698, 389, 'mode', 'integer', '`mode` {integer} ', 0);
INSERT INTO `params` VALUES (699, 390, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (700, 390, 'uid', 'integer', '`uid` {integer} ', 0);
INSERT INTO `params` VALUES (701, 390, 'gid', 'integer', '`gid` {integer} ', 0);
INSERT INTO `params` VALUES (702, 391, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (703, 391, 'len', 'integer', '`len` {integer} **Default:** `0` ', 1);
INSERT INTO `params` VALUES (704, 391, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (705, 396, 'existingPath', 'string|Buffer|URL', '`existingPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (706, 396, 'newPath', 'string|Buffer|URL', '`newPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (707, 396, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (708, 397, 'existingPath', 'string|Buffer|URL', '`existingPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (709, 397, 'newPath', 'string|Buffer|URL', '`newPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (710, 398, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (711, 398, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (712, 399, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (713, 400, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (714, 400, 'mode', 'integer', '`mode` {integer} **Default:** `0o777` ', 1);
INSERT INTO `params` VALUES (715, 400, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (716, 403, 'prefix', 'string', '`prefix` {string} ', 0);
INSERT INTO `params` VALUES (717, 403, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (718, 401, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (719, 401, 'mode', 'integer', '`mode` {integer} **Default:** `0o777` ', 1);
INSERT INTO `params` VALUES (720, 405, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (721, 405, 'flags', 'string|number', '`flags` {string|number} See [support of file system `flags`][]. ', 0);
INSERT INTO `params` VALUES (722, 405, 'mode', 'integer', '`mode` {integer} **Default:** `0o666` ', 1);
INSERT INTO `params` VALUES (723, 402, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (724, 402, 'prefix', 'string', '`prefix` {string} ', 0);
INSERT INTO `params` VALUES (725, 402, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (726, 404, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (727, 404, 'flags', 'string|number', '`flags` {string|number} See [support of file system `flags`][]. ', 0);
INSERT INTO `params` VALUES (728, 404, 'mode', 'integer', '`mode` {integer} **Default:** `0o666` (readable and writable) ', 1);
INSERT INTO `params` VALUES (729, 404, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (730, 406, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (731, 406, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (732, 406, 'offset', 'integer', '`offset` {integer} ', 0);
INSERT INTO `params` VALUES (733, 406, 'position', 'integer', '`position` {integer} ', 0);
INSERT INTO `params` VALUES (734, 406, 'length', 'integer', '`length` {integer} ', 0);
INSERT INTO `params` VALUES (735, 406, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (736, 407, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (737, 407, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (738, 407, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (739, 408, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (740, 408, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (741, 409, 'path', 'string|Buffer|URL|integer', '`path` {string|Buffer|URL|integer} filename or file descriptor ', 0);
INSERT INTO `params` VALUES (742, 409, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (743, 409, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (744, 410, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (745, 411, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (746, 411, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (747, 411, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (748, 410, 'path', 'string|Buffer|URL|integer', '`path` {string|Buffer|URL|integer} filename or file descriptor ', 0);
INSERT INTO `params` VALUES (749, 419, 'oldPath', 'string|Buffer|URL', '`oldPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (750, 419, 'newPath', 'string|Buffer|URL', '`newPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (751, 413, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (752, 413, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (753, 413, 'offset', 'integer', '`offset` {integer} ', 0);
INSERT INTO `params` VALUES (754, 413, 'length', 'integer', '`length` {integer} ', 0);
INSERT INTO `params` VALUES (755, 413, 'position', 'integer', '`position` {integer} ', 0);
INSERT INTO `params` VALUES (756, 412, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (757, 412, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (758, 416, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (759, 416, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (760, 415, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (761, 415, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (762, 415, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (763, 414, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (764, 414, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (765, 414, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (766, 418, 'oldPath', 'string|Buffer|URL', '`oldPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (767, 418, 'newPath', 'string|Buffer|URL', '`newPath` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (768, 418, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (769, 417, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (770, 417, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (771, 420, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (772, 420, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (773, 421, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (774, 422, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (775, 423, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (776, 424, 'target', 'string|Buffer|URL', '`target` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (777, 422, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (778, 424, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (779, 424, 'type', 'string', '`type` {string} **Default:** `\'file\'` ', 1);
INSERT INTO `params` VALUES (780, 424, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (781, 428, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (782, 428, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (783, 426, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (784, 426, 'len', 'integer', '`len` {integer} **Default:** `0` ', 1);
INSERT INTO `params` VALUES (785, 426, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (786, 425, 'target', 'string|Buffer|URL', '`target` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (787, 425, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (788, 425, 'type', 'string', '`type` {string} **Default:** `\'file\'` ', 1);
INSERT INTO `params` VALUES (789, 427, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (790, 427, 'len', 'integer', '`len` {integer} **Default:** `0` ', 1);
INSERT INTO `params` VALUES (791, 429, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (792, 432, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (793, 432, 'atime', 'integer', '`atime` {integer} ', 0);
INSERT INTO `params` VALUES (794, 432, 'mtime', 'integer', '`mtime` {integer} ', 0);
INSERT INTO `params` VALUES (795, 430, 'filename', 'string|Buffer|URL', '`filename` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (796, 430, 'listener', 'Function', '`listener` {Function} Optional, a listener previously attached using `fs.watchFile()` ', 1);
INSERT INTO `params` VALUES (797, 431, 'path', 'string|Buffer|URL', '`path` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (798, 431, 'atime', 'number|string|Date', '`atime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (799, 431, 'mtime', 'number|string|Date', '`mtime` {number|string|Date} ', 0);
INSERT INTO `params` VALUES (800, 431, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (801, 433, 'filename', 'string|Buffer|URL', '`filename` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (802, 433, 'options', 'string|Object', '`options` {string|Object} ', 1);
INSERT INTO `params` VALUES (803, 433, 'listener', 'Function|undefined', '`listener` {Function|undefined} **Default:** `undefined` ', 1);
INSERT INTO `params` VALUES (804, 434, 'filename', 'string|Buffer|URL', '`filename` {string|Buffer|URL} ', 0);
INSERT INTO `params` VALUES (805, 434, 'options', 'Object', '`options` {Object} ', 1);
INSERT INTO `params` VALUES (806, 434, 'listener', 'Function', '`listener` {Function} ', 0);
INSERT INTO `params` VALUES (807, 435, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (808, 435, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (809, 435, 'offset', 'integer', '`offset` {integer} ', 1);
INSERT INTO `params` VALUES (810, 435, 'length', 'integer', '`length` {integer} ', 1);
INSERT INTO `params` VALUES (811, 435, 'position', 'integer', '`position` {integer} ', 1);
INSERT INTO `params` VALUES (812, 435, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (813, 439, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (814, 439, 'buffer', 'Buffer|Uint8Array', '`buffer` {Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (815, 439, 'offset', 'integer', '`offset` {integer} ', 1);
INSERT INTO `params` VALUES (816, 439, 'length', 'integer', '`length` {integer} ', 1);
INSERT INTO `params` VALUES (817, 438, 'file', 'string|Buffer|URL|integer', '`file` {string|Buffer|URL|integer} filename or file descriptor ', 0);
INSERT INTO `params` VALUES (818, 439, 'position', 'integer', '`position` {integer} ', 1);
INSERT INTO `params` VALUES (819, 438, 'data', 'string|Buffer|Uint8Array', '`data` {string|Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (820, 437, 'file', 'string|Buffer|URL|integer', '`file` {string|Buffer|URL|integer} filename or file descriptor ', 0);
INSERT INTO `params` VALUES (821, 437, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (822, 436, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (823, 438, 'options', 'Object|string', '`options` {Object|string} ', 1);
INSERT INTO `params` VALUES (824, 437, 'data', 'string|Buffer|Uint8Array', '`data` {string|Buffer|Uint8Array} ', 0);
INSERT INTO `params` VALUES (825, 437, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (826, 436, 'string', 'string', '`string` {string} ', 0);
INSERT INTO `params` VALUES (827, 436, 'position', 'integer', '`position` {integer} ', 1);
INSERT INTO `params` VALUES (828, 436, 'encoding', 'string', '`encoding` {string} ', 1);
INSERT INTO `params` VALUES (829, 436, 'callback', 'Function', '`callback` {Function} ', 0);
INSERT INTO `params` VALUES (830, 440, 'fd', 'integer', '`fd` {integer} ', 0);
INSERT INTO `params` VALUES (831, 440, 'string', 'string', '`string` {string} ', 0);
INSERT INTO `params` VALUES (832, 440, 'position', 'integer', '`position` {integer} ', 1);
INSERT INTO `params` VALUES (833, 440, 'encoding', 'string', '`encoding` {string} ', 1);
INSERT INTO `params` VALUES (834, 441, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (835, 441, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (836, 443, 'message', 'Error\n|\n\nstring\n|\n\nobject', 'The error message', 0);
INSERT INTO `params` VALUES (837, 443, 'result', 'BulkWriteResult', 'The result of the bulk write operation', 0);
INSERT INTO `params` VALUES (838, 445, 'value', 'number', 'The batchSize for the cursor.', 0);
INSERT INTO `params` VALUES (839, 447, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (840, 447, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (841, 444, 'command', 'object', 'The command hash', 0);
INSERT INTO `params` VALUES (842, 444, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (843, 444, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (844, 446, 'callback', 'AggregationCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (845, 449, 'callback', 'AggregationCursor~resultCallback', 'The result callback.', 0);
INSERT INTO `params` VALUES (846, 448, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (847, 448, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback.', 0);
INSERT INTO `params` VALUES (848, 442, 'username', 'string', 'The username.', 0);
INSERT INTO `params` VALUES (849, 442, 'password', 'string', 'The password.', 0);
INSERT INTO `params` VALUES (850, 442, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (851, 442, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (852, 450, 'callback', 'AggregationCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (853, 451, 'document', 'object', 'The geoNear stage document.', 0);
INSERT INTO `params` VALUES (854, 452, 'username', 'string', 'The username.', 0);
INSERT INTO `params` VALUES (855, 452, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (856, 452, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (857, 456, 'index', 'number', 'the number of the upserted id to return, returns undefined if no result for passed in index', 0);
INSERT INTO `params` VALUES (858, 455, 'changeDomain', 'Db\n|\n\nCollection', 'The collection against which to create the change stream', 0);
INSERT INTO `params` VALUES (859, 455, 'pipeline', 'Array', 'An array of aggregation pipeline stages through which to pass change stream documents', 0);
INSERT INTO `params` VALUES (860, 455, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (861, 453, 'flag', 'string', 'The flag to set, must be one of following [\'tailable\', \'oplogReplay\', \'noCursorTimeout\', \'awaitData\', \'partial\'].', 0);
INSERT INTO `params` VALUES (862, 453, 'value', 'boolean', 'The flag boolean value.', 0);
INSERT INTO `params` VALUES (863, 457, 'code', 'string\n|\n\nfunction', 'a string or function.', 0);
INSERT INTO `params` VALUES (864, 457, 'scope', 'Object', 'optional\nan optional scope for the function.', 0);
INSERT INTO `params` VALUES (865, 454, 'buffer', 'Buffer', 'a buffer object containing the binary data.', 0);
INSERT INTO `params` VALUES (866, 454, 'subType', 'Number', 'optional\nthe option binary type.', 0);
INSERT INTO `params` VALUES (867, 458, 'value', 'number', 'The batchSize for the cursor.', 0);
INSERT INTO `params` VALUES (868, 459, 'document', 'object', 'The group stage document.', 0);
INSERT INTO `params` VALUES (869, 461, 'callback', 'AggregationCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (870, 460, 'value', 'number', 'The state limit value.', 0);
INSERT INTO `params` VALUES (871, 462, 'document', 'object', 'The lookup stage document.', 0);
INSERT INTO `params` VALUES (872, 463, 'document', 'object', 'The match stage document.', 0);
INSERT INTO `params` VALUES (873, 466, 'name', 'string', 'The query modifier (must start with $, such as $orderby etc)', 0);
INSERT INTO `params` VALUES (874, 466, 'value', 'boolean', 'The flag boolean value.', 0);
INSERT INTO `params` VALUES (875, 464, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (876, 464, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback.', 0);
INSERT INTO `params` VALUES (877, 468, 'value', 'number', 'The batchSize for the cursor.', 0);
INSERT INTO `params` VALUES (878, 467, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (879, 467, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (880, 465, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (881, 465, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback', 0);
INSERT INTO `params` VALUES (882, 472, 'position', 'number', 'read from the given position in the Binary.', 0);
INSERT INTO `params` VALUES (883, 472, 'length', 'number', 'the number of bytes to read.', 0);
INSERT INTO `params` VALUES (884, 470, 'value', 'object', 'The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).', 0);
INSERT INTO `params` VALUES (885, 471, 'byte_value', 'string', 'a single byte we wish to write.', 0);
INSERT INTO `params` VALUES (886, 469, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (887, 469, 'callback', 'Cursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (888, 473, 'string', 'Buffer\n|\n\nstring', 'a string or buffer to be written to the Binary BSON object.', 0);
INSERT INTO `params` VALUES (889, 473, 'offset', 'number', 'specify the binary of where to write the content.', 0);
INSERT INTO `params` VALUES (890, 474, 'callback', 'CommandCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (891, 475, 'value', 'number', 'The state maxTimeMS value.', 0);
INSERT INTO `params` VALUES (892, 481, 'collectionName', 'string', 'The name of the collection to validate.', 0);
INSERT INTO `params` VALUES (893, 481, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (894, 481, 'callback', 'Admin~resultCallback', 'optional\nThe command result callback.', 0);
INSERT INTO `params` VALUES (895, 479, 'value', 'number', 'The state maxTimeMS value.', 0);
INSERT INTO `params` VALUES (896, 476, 'index', 'number', 'of the write error to return, returns null if there is no result for passed in index', 0);
INSERT INTO `params` VALUES (897, 477, 'callback', 'CommandCursor~resultCallback', 'The result callback.', 0);
INSERT INTO `params` VALUES (898, 483, 'error', 'MongoError', 'An error instance representing the error during the execution.', 0);
INSERT INTO `params` VALUES (899, 483, 'result', 'object', 'The result object if the command was executed successfully.', 0);
INSERT INTO `params` VALUES (900, 478, 'callback', 'CommandCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (901, 482, 'callback', 'AggregationCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (902, 484, 'namespace', 'string', 'the collection name.', 0);
INSERT INTO `params` VALUES (903, 484, 'oid', 'ObjectID', 'the reference ObjectID.', 0);
INSERT INTO `params` VALUES (904, 484, 'db', 'string', 'optional\noptional db name, if omitted the reference is local to the current db.', 0);
INSERT INTO `params` VALUES (905, 480, 'destination', 'number', 'The destination name.', 0);
INSERT INTO `params` VALUES (906, 485, 'bytes', 'Buffer', 'a buffer containing the raw Decimal128 bytes.', 0);
INSERT INTO `params` VALUES (907, 489, 'db', 'Db', 'A db handle', 0);
INSERT INTO `params` VALUES (908, 489, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (909, 487, 'doc', 'object', 'the new document to replace the existing one with', 0);
INSERT INTO `params` VALUES (910, 486, 'value', 'number', 'the number we want to represent as a double.', 0);
INSERT INTO `params` VALUES (911, 488, 'updateDocument', 'object', 'the new document to replace the existing one with', 0);
INSERT INTO `params` VALUES (912, 494, 'doc', 'object', 'update operations', 0);
INSERT INTO `params` VALUES (913, 493, 'string', 'string', 'a numeric string representation.', 0);
INSERT INTO `params` VALUES (914, 492, 'callback', 'CommandCursor~resultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (915, 491, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (916, 491, 'callback', 'Cursor~countResultCallback', 'optional\nThe result callback.', 0);
INSERT INTO `params` VALUES (917, 491, 'applySkipLimit', 'boolean', 'optional\nShould the count command apply limit and skip settings on the cursor or in the passed in options.', 0);
INSERT INTO `params` VALUES (918, 490, 'value', 'string', 'The comment attached to this query.', 0);
INSERT INTO `params` VALUES (919, 495, 'doc', 'object', 'update operations', 0);
INSERT INTO `params` VALUES (920, 496, 'updateDocument', 'object', 'update operations', 0);
INSERT INTO `params` VALUES (921, 497, 'id', 'ObjectId', 'The id of the file doc', 0);
INSERT INTO `params` VALUES (922, 497, 'callback', 'GridFSBucket~errorCallback', 'optional', 0);
INSERT INTO `params` VALUES (923, 498, 'filter', 'Object', '', 0);
INSERT INTO `params` VALUES (924, 498, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (925, 503, 'id', 'ObjectId', 'The id of the file doc', 0);
INSERT INTO `params` VALUES (926, 503, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (927, 499, 'callback', 'GridFSBucket~errorCallback', 'optional', 0);
INSERT INTO `params` VALUES (928, 507, 'callback', 'GridFSBucket~errorCallback', 'called when chunks are successfully removed or error occurred', 0);
INSERT INTO `params` VALUES (929, 506, 'filename', 'String', 'The name of the file to stream', 0);
INSERT INTO `params` VALUES (930, 506, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (931, 504, 'chunks', 'Collection', 'Handle for chunks collection', 0);
INSERT INTO `params` VALUES (932, 504, 'files', 'Collection', 'Handle for files collection', 0);
INSERT INTO `params` VALUES (933, 504, 'readPreference', 'Object', 'The read preference to use', 0);
INSERT INTO `params` VALUES (934, 504, 'filter', 'Object', 'The query to use to find the file document', 0);
INSERT INTO `params` VALUES (935, 504, 'options', 'Object', 'Optional settings', 1);
INSERT INTO `params` VALUES (936, 508, 'chunk', 'Buffer', 'Buffer to write', 0);
INSERT INTO `params` VALUES (937, 508, 'encoding', 'String', 'Optional encoding for the buffer', 0);
INSERT INTO `params` VALUES (938, 508, 'callback', 'function', 'Function to call when all files and chunks have been persisted to MongoDB', 0);
INSERT INTO `params` VALUES (939, 505, 'updateDocument', 'object', 'update operations', 0);
INSERT INTO `params` VALUES (940, 502, 'db', 'Db', 'A database instance to interact with.', 0);
INSERT INTO `params` VALUES (941, 502, 'id', 'object', 'optional\noptional unique id for this file', 0);
INSERT INTO `params` VALUES (942, 502, 'filename', 'string', 'optional\noptional filename for this file, no unique constrain on the field', 0);
INSERT INTO `params` VALUES (943, 502, 'mode', 'string', 'set the mode for this file.', 0);
INSERT INTO `params` VALUES (944, 502, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (945, 500, 'callback', 'Cursor~resultCallback', 'The result callback.', 0);
INSERT INTO `params` VALUES (946, 501, 'bucket', 'GridFSBucket', 'Handle for this stream\'s corresponding bucket', 0);
INSERT INTO `params` VALUES (947, 501, 'filename', 'string', 'The value of the \'filename\' key in the files doc', 0);
INSERT INTO `params` VALUES (948, 501, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (949, 509, 'callback', 'GridFSBucket~errorCallback', 'optional\ncalled when the cursor is successfully closed or an error occurred.', 0);
INSERT INTO `params` VALUES (950, 510, 'start', 'Number', 'Offset in bytes to start reading at', 0);
INSERT INTO `params` VALUES (951, 517, 'id', 'ObjectId', 'the id of the file to rename', 0);
INSERT INTO `params` VALUES (952, 517, 'filename', 'String', 'new name for the file', 0);
INSERT INTO `params` VALUES (953, 517, 'callback', 'GridFSBucket~errorCallback', 'optional', 0);
INSERT INTO `params` VALUES (954, 512, 'id', 'string\n|\n\nnumber\n|\n\nobject', 'A custom id used to identify the file', 0);
INSERT INTO `params` VALUES (955, 512, 'filename', 'string', 'The value of the \'filename\' key in the files doc', 0);
INSERT INTO `params` VALUES (956, 512, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (957, 515, 'filename', 'string', 'The value of the \'filename\' key in the files doc', 0);
INSERT INTO `params` VALUES (958, 515, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (959, 514, 'end', 'Number', 'Offset in bytes to stop reading at', 0);
INSERT INTO `params` VALUES (960, 511, 'chunk', 'Buffer', 'Buffer to write', 0);
INSERT INTO `params` VALUES (961, 511, 'encoding', 'String', 'Optional encoding for the buffer', 0);
INSERT INTO `params` VALUES (962, 511, 'callback', 'function', 'Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.', 0);
INSERT INTO `params` VALUES (963, 513, 'className', 'string', 'The Class name associated with the logging instance', 0);
INSERT INTO `params` VALUES (964, 513, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (965, 516, 'value', 'number', 'the number we want to represent as an int32.', 0);
INSERT INTO `params` VALUES (966, 518, 'error', 'MongoError', 'An error instance representing any errors that occurred', 0);
INSERT INTO `params` VALUES (967, 519, 'low', 'number', 'the low (signed) 32 bits of the Long.', 0);
INSERT INTO `params` VALUES (968, 519, 'high', 'number', 'the high (signed) 32 bits of the Long.', 0);
INSERT INTO `params` VALUES (969, 520, 'type', 'string', 'The type of filter (currently only class)', 0);
INSERT INTO `params` VALUES (970, 520, 'values', 'Array.<string>', 'The filters to apply', 0);
INSERT INTO `params` VALUES (971, 521, 'message', 'string', 'The message to log', 0);
INSERT INTO `params` VALUES (972, 521, 'object', 'object', 'additional meta data to log', 0);
INSERT INTO `params` VALUES (973, 524, 'str', 'string', 'the textual representation of the Long.', 0);
INSERT INTO `params` VALUES (974, 524, 'opt_radix', 'number', 'the radix in which the text is written.', 0);
INSERT INTO `params` VALUES (975, 523, 'value', 'number', 'the number in question.', 0);
INSERT INTO `params` VALUES (976, 528, 'lowBits', 'number', 'the low 32-bits.', 0);
INSERT INTO `params` VALUES (977, 528, 'highBits', 'number', 'the high 32-bits.', 0);
INSERT INTO `params` VALUES (978, 522, 'value', 'number', 'the 32-bit integer in question.', 0);
INSERT INTO `params` VALUES (979, 530, 'other', 'Long', 'Long to add to this one.', 0);
INSERT INTO `params` VALUES (980, 525, 'logger', 'function', 'Logger function.', 0);
INSERT INTO `params` VALUES (981, 529, 'message', 'string', 'The message to log', 0);
INSERT INTO `params` VALUES (982, 529, 'object', 'object', 'additional meta data to log', 0);
INSERT INTO `params` VALUES (983, 526, 'level', 'string', 'Set current log level (debug, info, error)', 0);
INSERT INTO `params` VALUES (984, 527, 'message', 'string', 'The message to log', 0);
INSERT INTO `params` VALUES (985, 531, 'other', 'Long', 'the Long with which to AND.', 0);
INSERT INTO `params` VALUES (986, 527, 'object', 'object', 'additional meta data to log', 0);
INSERT INTO `params` VALUES (987, 532, 'other', 'Long', 'Long by which to divide.', 0);
INSERT INTO `params` VALUES (988, 533, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (989, 539, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (990, 538, 'message', 'Error\n|\n\nstring\n|\n\nobject', 'The error message', 0);
INSERT INTO `params` VALUES (991, 535, 'other', 'Long', 'Long by which to mod.', 0);
INSERT INTO `params` VALUES (992, 534, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (993, 537, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (994, 540, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (995, 536, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (996, 541, 'other', 'Long', 'Long to compare against.', 0);
INSERT INTO `params` VALUES (997, 542, 'other', 'Long', 'Long to multiply with this.', 0);
INSERT INTO `params` VALUES (998, 543, 'other', 'Long', 'the Long with which to OR.', 0);
INSERT INTO `params` VALUES (999, 544, 'numBits', 'number', 'the number of bits by which to shift.', 0);
INSERT INTO `params` VALUES (1000, 545, 'message', 'Error\n|\n\nstring\n|\n\nobject', 'The error message', 0);
INSERT INTO `params` VALUES (1001, 548, 'other', 'Long', 'Long to subtract from this.', 0);
INSERT INTO `params` VALUES (1002, 549, 'opt_radix', 'number', 'optional\nthe radix in which the text should be written.', 0);
INSERT INTO `params` VALUES (1003, 553, 'hexString', 'string', 'create a ObjectID from a passed in 24 byte hexstring.', 0);
INSERT INTO `params` VALUES (1004, 550, 'other', 'Long', 'the Long with which to XOR.', 0);
INSERT INTO `params` VALUES (1005, 546, 'numBits', 'number', 'the number of bits by which to shift.', 0);
INSERT INTO `params` VALUES (1006, 551, 'id', 'string\n|\n\nnumber', 'Can be a 24 byte hex string, 12 byte binary string or a Number.', 0);
INSERT INTO `params` VALUES (1007, 547, 'numBits', 'number', 'the number of bits by which to shift.', 0);
INSERT INTO `params` VALUES (1008, 552, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (1009, 552, 'callback', 'OrderedBulkOperation~resultCallback', 'optional\nThe result callback', 0);
INSERT INTO `params` VALUES (1010, 554, 'time', 'number', 'an integer number representing a number of seconds.', 0);
INSERT INTO `params` VALUES (1011, 555, 'otherID', 'object', 'ObjectID instance to compare against.', 0);
INSERT INTO `params` VALUES (1012, 556, 'time', 'number', 'optional\noptional parameter allowing to pass in a second based timestamp.', 0);
INSERT INTO `params` VALUES (1013, 557, 'doc', 'object', 'the document to insert', 0);
INSERT INTO `params` VALUES (1014, 561, 'lowBits', 'number', 'the low 32-bits.', 0);
INSERT INTO `params` VALUES (1015, 561, 'highBits', 'number', 'the high 32-bits.', 0);
INSERT INTO `params` VALUES (1016, 560, 'low', 'number', 'the low (signed) 32 bits of the Timestamp.', 0);
INSERT INTO `params` VALUES (1017, 560, 'high', 'number', 'the high (signed) 32 bits of the Timestamp.', 0);
INSERT INTO `params` VALUES (1018, 559, 'value', 'string', 'the string representing the symbol.', 0);
INSERT INTO `params` VALUES (1019, 563, 'selector', 'object', 'The selector for the bulk operation.', 0);
INSERT INTO `params` VALUES (1020, 558, 'error', 'MongoError', 'An error instance representing the error during the execution.', 0);
INSERT INTO `params` VALUES (1021, 562, 'value', 'number', 'the 32-bit integer in question.', 0);
INSERT INTO `params` VALUES (1022, 558, 'result', 'BulkWriteResult', 'The bulk write result.', 0);
INSERT INTO `params` VALUES (1023, 564, 'value', 'number', 'the number in question.', 0);
INSERT INTO `params` VALUES (1024, 566, 'str', 'string', 'the textual representation of the Timestamp.', 0);
INSERT INTO `params` VALUES (1025, 566, 'opt_radix', 'number', 'the radix in which the text is written.', 0);
INSERT INTO `params` VALUES (1026, 567, 'other', 'Timestamp', 'Timestamp to add to this one.', 0);
INSERT INTO `params` VALUES (1027, 565, 'options', 'object', 'Optional settings', 1);
INSERT INTO `params` VALUES (1028, 565, 'callback', 'UnorderedBulkOperation~resultCallback', 'optional\nThe result callback', 0);
INSERT INTO `params` VALUES (1029, 568, 'other', 'Timestamp', 'the Timestamp with which to AND.', 0);
INSERT INTO `params` VALUES (1030, 569, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1031, 570, 'other', 'Timestamp', 'Timestamp by which to divide.', 0);
INSERT INTO `params` VALUES (1032, 571, 'selector', 'object', 'The selector for the bulk operation.', 0);
INSERT INTO `params` VALUES (1033, 574, 'error', 'MongoError', 'An error instance representing the error during the execution.', 0);
INSERT INTO `params` VALUES (1034, 574, 'result', 'BulkWriteResult', 'The bulk write result.', 0);
INSERT INTO `params` VALUES (1035, 572, 'document', 'object', 'the document to insert', 0);
INSERT INTO `params` VALUES (1036, 576, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1037, 577, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1038, 575, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1039, 573, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1040, 578, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1041, 580, 'other', 'Timestamp', 'Timestamp to multiply with this.', 0);
INSERT INTO `params` VALUES (1042, 579, 'other', 'Timestamp', 'Timestamp by which to mod.', 0);
INSERT INTO `params` VALUES (1043, 581, 'other', 'Timestamp', 'Timestamp to compare against.', 0);
INSERT INTO `params` VALUES (1044, 582, 'other', 'Timestamp', 'the Timestamp with which to OR.', 0);
INSERT INTO `params` VALUES (1045, 583, 'numBits', 'number', 'the number of bits by which to shift.', 0);
INSERT INTO `params` VALUES (1046, 585, 'other', 'Timestamp', 'Timestamp to subtract from this.', 0);
INSERT INTO `params` VALUES (1047, 584, 'numBits', 'number', 'the number of bits by which to shift.', 0);
INSERT INTO `params` VALUES (1048, 586, 'numBits', 'number', 'the number of bits by which to shift.', 0);
INSERT INTO `params` VALUES (1049, 587, 'opt_radix', 'number', 'optional\nthe radix in which the text should be written.', 0);
INSERT INTO `params` VALUES (1050, 588, 'other', 'Timestamp', 'the Timestamp with which to XOR.', 0);

SET FOREIGN_KEY_CHECKS = 1;
